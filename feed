<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <copyright>Copyright © 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <webMaster>hail2u@gmail.com (Kyo Nagashima)</webMaster>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>:target擬似クラスとHistory API</title>
      <link>http://hail2u.net/blog/webdesign/target-pseudo-class-and-history-api.html</link>
      <description>:target擬似クラスではフラグメント識別子と一致する要素に対してスタイルを当てることができる。これを利用するとCSSだけでインタラクティブにデザインを変更することが可能になる。一方History APIではページの遷移なくフラグメント識別子を含め、アクセス中のURLを書き換えることができる。では:target擬似クラスで有効になっているスタイルは、History APIでフラグメント識別子を変更した場合に動的に切り替わってくれるだろうか。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/target-pseudo-class-and-history-api.html</guid>
      <pubDate>Tue, 23 Dec 2014 15:20:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;code&gt;:target&lt;/code&gt;擬似クラスではフラグメント識別子と一致する要素に対してスタイルを当てることができる。これを利用するとCSSだけでインタラクティブにデザインを変更することが可能になる。一方History APIではページの遷移なくフラグメント識別子を含め、アクセス中のURLを書き換えることができる。では&lt;code&gt;:target&lt;/code&gt;擬似クラスで有効になっているスタイルは、History APIでフラグメント識別子を変更した場合に動的に切り替わってくれるだろうか。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="http://hail2u.net/pub/test/603.html"&gt;:target and history.replaceState()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモ・ページではEnable #test:targetをクリックするとURLに&lt;code&gt;#test&lt;/code&gt;というフラグメント識別子が追加される。&lt;code&gt;#test:target&lt;/code&gt;セレクターを通して、文字色を緑にするようにしてあるので、クリック後文章が緑になることだろう。Disable #test:target by history.replaceState()ボタンを押すと&lt;code&gt;history.replaceState()&lt;/code&gt;を使ってURLからフラグメント識別子が削られる。ここで文字色が緑から黒になればCSSにも反映されることになる。&lt;/p&gt;

&lt;p&gt;しかし、だいたいのブラウザーで緑のままなので、&lt;code&gt;history.replaceState()&lt;/code&gt;によるフラグメント識別子の変更に&lt;code&gt;:target&lt;/code&gt;擬似クラスは応じてくれないようだ。もしかするとどこかでこういう挙動になるべきと決まっているのかもしれないが、残念ながら僕には見つけられなかった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code&gt;:target&lt;/code&gt;擬似クラスを使ったオーバーレイのフルスクリーン・ナビゲーションを作ろうかなという過程で、CSSだけだと消せないためどうしてやろうかと考えていて、History APIを使ってみたらダメだった、という過程で発見した。「珍」というほどではないが、直感的な動作とは思えないので&lt;a href="http://www.adventar.org/calendars/341"&gt;CSS珍百景 Advent Calendar 2014&lt;/a&gt;の19日目として提供しておく。&lt;/p&gt;

&lt;p&gt;対策はそれほど難しくはない。&lt;code&gt;location.hash = &amp;#39;&amp;#39;&lt;/code&gt;でフラグメント識別子を空にし、&lt;code&gt;:target&lt;/code&gt;擬似クラスを無効にした後、改めて&lt;code&gt;history.replaceState(&amp;#39;&amp;#39;, &amp;#39;&amp;#39;, location.pathname)&lt;/code&gt;とすれば良い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>mdtoc - The markdown ToC generator</title>
      <link>http://hail2u.net/blog/coding/mdtoc.html</link>
      <description>Markdownファイルの見出しからGitHub互換のToCを生成して埋め込むCLIツール、mdtocを作成した。Node.js製でmarkedパッケージに依存している。実行すると引数に指定したMarkdownファイルの中に書かれた&lt;!-- #toc --&gt;と&lt;!-- /toc --&gt;の間がToCになる。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/mdtoc.html</guid>
      <pubDate>Mon, 22 Dec 2014 00:40:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Markdownファイルの見出しからGitHub互換のToCを生成して埋め込むCLIツール、mdtocを作成した。Node.js製で&lt;a href="https://www.npmjs.com/package/marked"&gt;markedパッケージ&lt;/a&gt;に依存している。実行すると引数に指定したMarkdownファイルの中に書かれた&lt;code&gt;&amp;lt;!-- #toc --&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;!-- /toc --&amp;gt;&lt;/code&gt;の間がToCになる。&lt;/p&gt;

&lt;p&gt;Download: &lt;a href="http://hail2u.net/pub/mdtoc.js"&gt;mdtoc.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えば以下のようにMarkdownファイル、&lt;code&gt;foo.md&lt;/code&gt;に&lt;code&gt;&amp;lt;!-- #toc --&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;!-- /toc --&amp;gt;&lt;/code&gt;を書いておき、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Test
====

&amp;lt;!-- #toc --&amp;gt;
&amp;lt;!-- /toc --&amp;gt;

Foo
---

### Foo Foo

### Foo Bar

Bar
---

### Bar Foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターミナルからmdtocを実行すると、&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;mdtoc foo.md&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;以下のようにToCが挿入される。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Test
====

&amp;lt;!-- #toc --&amp;gt;

* [Foo](#foo)
  * [Foo Foo](#foo-foo)
  * [Foo Bar](#foo-bar)
* [Bar](#bar)
  * [Bar Foo](#bar-foo)

&amp;lt;!-- /toc --&amp;gt;

Foo
---

### Foo Foo

### Foo Bar

Bar
---

### Bar Foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ToCの生成対象は最初の見出し以外のすべて。インデントは二番目の見出しを基準に調節されるようにした。大抵は&lt;code&gt;README.md&lt;/code&gt;に対して使われると思うので、引数を省略した場合は&lt;code&gt;README.md&lt;/code&gt;に対して実行するようにもなっている。改行コードは元の文書に従うようにしておいた。&lt;/p&gt;

&lt;p&gt;互換性はそこそこありそうだが、Redcarpetを使ったCLIツールの方が確実と思われるので、それを探すか暇な時に書き直したい。そのためnpmで公開するつもりは今のところない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="https://github.com/hail2u/html-best-practices"&gt;HTML Best Practices&lt;/a&gt;のToCを簡単に更新できるようにするために色々探したけど良い物が見つからなかった。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/marked-toc"&gt;marked-toc&lt;/a&gt;は記号の扱いにGitHubと互換性がなく、大体はうまくいくのだけど、たまにうまくいかない。別の名前で一から作り直してるみたいだが、今度はまったく英数字以外がまったく考慮されないものになっていて期待できない。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/doctoc"&gt;doctoc&lt;/a&gt;はコード・ブロックに書いた&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;タグなどを拾ってしまってめちゃくちゃなToCが生成された。他、どうでも良さそうなPRリンクや派手すぎる埋め込みコメントなど色々うっとうしかった。&lt;/p&gt;

&lt;p&gt;他にもたくさんあった(npmだけで15くらい見つかる)が、&lt;code&gt;#&lt;/code&gt;での見出し限定のものであったり、特殊な記法で見出しを書かなくてはならなかったりと、試すまでもなく使いたくならないものばかりだった。&lt;/p&gt;

&lt;p&gt;mdtocでは、markedの&lt;a href="https://github.com/chjj/marked#overriding-renderer-methods"&gt;レンダラーの差し替え&lt;/a&gt;を利用して見出しをすべて拾い、Redcarpetのコードにあった&lt;a href="https://github.com/vmg/redcarpet/blob/816e0933a120b66759a71284a24eacac8880f765/ext/redcarpet/html.h#L76"&gt;削除する文字&lt;/a&gt;を削除し、空白をマイナスに置換し、最後にURLエンコードするというだけにした。余計なことをなるべくしないようにしたので、そこそこ互換性があるんじゃないかと思う。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>HTML Best Practices</title>
      <link>http://hail2u.net/blog/webdesign/html-best-practices.html</link>
      <description>少し前に書いた失われたウェブ制作のベスト・プラクティスという記事の公開後、やはりある程度まとまった形の文書が必要なのではないかという気分になった。そこでHTMLはどのようなことに気を付けて書くと安定したものになるのかという視点で、悪い例と良い例を併記したHTML Best Practicesという文書を作成した。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/html-best-practices.html</guid>
      <pubDate>Sun, 21 Dec 2014 00:05:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="https://github.com/hail2u/html-best-practices"&gt;&lt;img alt="HTML Best Practices" src="http://hail2u.net/images/blog/html-best-practices.png"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;少し前に書いた&lt;a href="http://hail2u.net/blog/webdesign/lost-best-practices.html"&gt;失われたウェブ制作のベスト・プラクティス&lt;/a&gt;という記事の公開後、やはりある程度まとまった形の文書が必要なのではないかという気分になった。そこでHTMLはどのようなことに気を付けて書くと安定したものになるのかという視点で、悪い例と良い例を併記した&lt;a href="https://github.com/hail2u/html-best-practices"&gt;HTML Best Practices&lt;/a&gt;という文書を作成した。&lt;/p&gt;

&lt;p&gt;それぞれにそれぞれの理由はあるが、その解説は簡単ではない。歴史的な背景を始めとした様々な点からの落とし所であり、それら前提となる物事について書くとなると膨大な量になりうる。そのためコード例で悪いものと良いものを併記するだけに留めておいた。&lt;/p&gt;

&lt;p&gt;こうなっていると、「なぜ」がわからないという面もあるが、「これをこう書けるのか」というような面もある。啓蒙的な意味合いが強い文書にも関わらずカジュアルに読めるため、悪くはないのではないかと思う。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;現時点でほとんどの要素の書き方についてはひと通り触れることができた。多くは僕の知識に基づくものなので、それなりに「今」を反映できているはずだ。他も仕様のコード例をアレンジしたもののため、正しく、シンプルなものにできていることと思う。&lt;/p&gt;

&lt;p&gt;このような安定性を意識した書き方に沿って、シンプルにHTMLを書いていけば、保守しやすく拡張しやすいウェブサイトを制作できることだろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;しかし、この文書にはこういったベスト・プラクティスと呼ばれるものに欠かすことのできない系統のものがまったく出てこない。それはパフォーマンスについてのベスト・プラクティスだ。&lt;/p&gt;

&lt;p&gt;パフォーマンス向上を目指したHTMLの書き方とは、つまりHTTPリクエストが効率的に行われるような書き方だ。例えば&lt;code&gt;script&lt;/code&gt;要素を動的に追加することによる非同期なJavaScriptの実行が挙げられる。しかしこれには&lt;a href="https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/"&gt;有害だという大家からの意見&lt;/a&gt;が既にある。またCSSをJavaScriptより先に読み込むというセオリーも崩れ始めている(&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Optimizing_your_pages_for_speculative_parsing"&gt;speculative parsing (投機的パース)&lt;/a&gt;による)。そしてHTTP/2も控えている。&lt;/p&gt;

&lt;p&gt;こういったHTTPリクエストの効率化を目指すための書き方は、数年前ならともかく、激変しつつある今は刹那的なテクニックにしか成りえなそうだ。ベスト・プラクティスと呼べるようなものは減りつつあるのではないか。とは言うものの、そのようなテクニックについて追加してくれれば、取り込むことはやぶさかではない。&lt;/p&gt;

&lt;p&gt;他、もちろん提案はどんなものでも大歓迎なので、悪い例と良い例を作るくらいで是非気軽に提案して欲しい。例さえあればあとはタイトルを英語で考えるだけなので、日本語で提案してくれてもまったく構わない。既に載せたものに関してもベスト・プラクティスとは思えないというような意見も、むしろこちらをお願いしたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>複数のPNGからICOへ変換</title>
      <link>http://hail2u.net/blog/software/convert-pngs-into-ico.html</link>
      <description>favicon.icoの作成を自動化しようとして、いくつかCLIの変換ツールを物色していた。最終的にImageMagickのconvertに行き着いたので、あまり得られるところはなかった……。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/convert-pngs-into-ico.html</guid>
      <pubDate>Sat, 20 Dec 2014 05:03:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;favicon.icoの作成を自動化しようとして、いくつかCLIの変換ツールを物色していた。最終的に&lt;a href="http://www.imagemagick.org/"&gt;ImageMagick&lt;/a&gt;のconvertに行き着いたので、あまり得られるところはなかった……。&lt;/p&gt;

&lt;h2&gt;&lt;a href="http://www.winterdrache.de/freeware/png2ico/"&gt;png2ico&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;png2ico favicon.ico logo-16.png logo-32.png logo-48.png logo-256.png&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;特に何も考えずに使える良いツールだった。しかし256x256以上、つまり256x256のアイコンは含めることができない制限がある。16x16以外に32x32だけでなく、256x256を含めてやりたい現状だとちょっと使いづらい気がする。&lt;/p&gt;

&lt;h2&gt;&lt;a href="http://wizard.ae.krakow.pl/~jb/toico/"&gt;ToICO&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;toico -o favicon.ico logo-16.png logo-32.png logo-48.png logo-256.png&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;これもあまり考えずに使えた。しかし生成されるICOファイルが異様に大きい。256x256を含めたところ70KBを超えるサイズになってしまった。高解像度を含めるとはいえ、せめて20KB、できれば10KB以下にはしたいので、このサイズはちょっと厳しい。&lt;/p&gt;

&lt;h2&gt;ImageMagickのconvert&lt;/h2&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;convert logo-16.png logo-32.png logo-48.png logo-256.png favicon.ico&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;樹海のようにコマンドライン・オプションが複雑だが、ICOへの変換は単純なものだった。特に問題はなさそうに見える。出力サイズも15KBとまずまずだった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ポータビリティーのことも考えるとやはりImageMagickかという感じだ。パスを通さずにいかにして使うかみたいに頑張るのが一番大変だった。&lt;code&gt;C:\WINDOWS\system32\convert.exe&lt;/code&gt;を消しさりたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Hender Schemeの財布</title>
      <link>http://hail2u.net/blog/gadget/hender-scheme-wallet.html</link>
      <description>どんな財布を買おうか色々悩んだ結果、Hender Schemeのものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/hender-scheme-wallet.html</guid>
      <pubDate>Fri, 19 Dec 2014 12:04:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="袋状小銭いれ(ボタンなし)と同じく袋状のカード収納、札入れがコンパクトにまとまっているHender Schemeの財布" src="http://hail2u.net/images/blog/hender-scheme-wallet.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;どんな財布を買おうか色々悩んだ結果、&lt;a href="http://henderscheme.com/"&gt;Hender Scheme&lt;/a&gt;のものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。&lt;/p&gt;

&lt;p&gt;ようやく財布(とついでにスマホ)を鞄に入れるのに慣れてきた。まだポケットが空だと心もとないけれど、財布持ってたっけと鞄を確認することはほぼなくなった。でもポケットに入れないと財布の革がうまく馴染んでこないかもなーと思ってたりもする。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>失われたウェブ制作のベスト・プラクティス</title>
      <link>http://hail2u.net/blog/webdesign/lost-best-practices.html</link>
      <description>ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/lost-best-practices.html</guid>
      <pubDate>Thu, 18 Dec 2014 01:40:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。&lt;/p&gt;

&lt;p&gt;ウェブ制作においては、技術革新の多い世界であることと、他の世界の変革に対応しなければならないことから、よりいっそう変化が速いとも言えるだろう。だからといってベスト・プラクティスが意識するに留めておけば良いという程度のものというわけではない。例えば&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;について考えてみよう。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;これはHTML5が産声を上げた時期に先駆者である人々が編み出した魔法の言葉だ。これによりほとんどすべてのブラウザーでウェブ標準に準拠した形でHTMLが表示されることが保証される。つまり個々のブラウザーで大幅に違う挙動になることはなくなり、予期せぬ問題の発生を大幅に低下させることができる。と同時にそういったことの解決に割く時間を大幅に減らすことができるというわけだ。&lt;/p&gt;

&lt;p&gt;このようにベスト・プラクティスは効率化の手法ではあるが、それは&lt;em&gt;結果&lt;/em&gt;の効率化だけではなく、&lt;em&gt;過程&lt;/em&gt;の効率化にまつわるものでもある。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;HTML5黎明期にはもうひとつ魔法の言葉が生み出された。それは&lt;code&gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/code&gt;だ。この短いフォーマットのタグを書くことでウェブページの文字エンコーディングを指定することができる。あてにならないブラウザーの自動判別機能に依存しなくて済み、文字エンコーディングが正しく解釈されない問題を解決できるというわけだ。&lt;/p&gt;

&lt;p&gt;これの元となった&lt;code&gt;meta&lt;/code&gt;要素による文字エンコーディング指定そのものは古くからベスト・プラクティスとして存在するものだ。特に日本では3種(Shift_JISとEUC-JP、ISO-2022-JP)が使い分けられていた事情もあり、強く意識されまた使われてきた。しかしこの文字エンコーディング指定にはもうひとつ忘れてはならない書き方がある。それはなるべく先頭に書くこと、だ。&lt;/p&gt;

&lt;p&gt;なるべく先頭に書くことにより、英数記号&lt;em&gt;以外&lt;/em&gt;の文字がこの指定より先に来ることがなくなる。そういった文字列が文字エンコーディング指定より前に来ると、ブラウザーの自動判別機能がうまく動かなくなることがあるという事情から、そう書くこともベスト・プラクティスとなっていた。&lt;/p&gt;

&lt;p&gt;最近のブラウザーでこの魔法の言葉の位置により自動判別機能が狂うということは考えづらい。しかしあえて先頭に書かないという強い理由も見つからない。ページのメタデータではあるが、ページの振る舞いを決定するものとも言えるので、&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;と同じように先頭に書くのが安心だろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;文字エンコーディングの指定そのものは失われてはいないが、先頭に書くというベスト・プラクティスは失われつつあるような印象だ。Facebookのいいね！ボタンで使われる&lt;a href="http://ogp.me/"&gt;OGP&lt;/a&gt;や&lt;a href="https://dev.twitter.com/cards/markup"&gt;Twitter Cardsで使われる謎のメタデータ記述法&lt;/a&gt;などにより&lt;code&gt;meta&lt;/code&gt;要素を利用する頻度が増えたため、それらと一緒にまとめて置かれることが増えた結果なのではないかと想像している。&lt;/p&gt;

&lt;p&gt;一方で&lt;code&gt;script&lt;/code&gt;要素の&lt;code&gt;type&lt;/code&gt;属性のようなほぼ疑いなく失われて良いものにも関わらず、まだよく使われているベスト・プラクティスもある。&lt;/p&gt;

&lt;p&gt;これら様々な昔からあるベスト・プラクティス達を体系立てて、失われて良いものかそうではないかを判別することは難しい。失われたことはすなわち必要なくなったわけではなく、失われていないことはつまりまだ必要なわけでもない。それぞれがどうしてそうなっているのか歴史を振り返りながら今に最適化する必要があるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ピンク色のTKGを食べた</title>
      <link>http://hail2u.net/blog/misc/tkg-tarako-20141217.html</link>
      <description>ピンク色とは生のたらこ。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！TKG Advent Calendar 2014も17日目か。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/tkg-tarako-20141217.html</guid>
      <pubDate>Wed, 17 Dec 2014 09:50:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="ピンク色の卵をかけたご飯" src="http://hail2u.net/images/blog/tkg-tarako-20141217.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;ピンク色とは生の&lt;a href="http://ja.wikipedia.org/wiki/%E3%81%9F%E3%82%89%E3%81%93"&gt;たらこ&lt;/a&gt;。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！&lt;a href="http://www.adventar.org/calendars/342"&gt;TKG Advent Calendar 2014&lt;/a&gt;も17日目か。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ja.wikipedia.org/wiki/%E3%82%A4%E3%82%AF%E3%83%A9"&gt;赤&lt;/a&gt;と迷った結果、ピンクにした。&lt;a href="http://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%93%E3%82%A2"&gt;黒&lt;/a&gt;でやってみようかとも考えていたけど、ジョークでやるには高額の出費になるのでやめた。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>絵文字のショートカット・ファミリー</title>
      <link>http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</link>
      <description>Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</guid>
      <pubDate>Tue, 16 Dec 2014 10:31:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@font-face {
  font-family: &amp;#39;Emoji&amp;#39;;
  src: &lt;mark&gt;local(&amp;#39;Apple Color Emoji&amp;#39;)&lt;/mark&gt;,
    local(&amp;#39;Gecko Emoji&amp;#39;),
    local(&amp;#39;Noto Sans Emoji&amp;#39;),
    &lt;mark&gt;local(&amp;#39;Segoe UI Emoji&amp;#39;)&lt;/mark&gt;,
    &lt;mark&gt;local(&amp;#39;Segoe UI Symbol&amp;#39;)&lt;/mark&gt;,
    local(&amp;#39;Noto Sans Symbols&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上から順にOS X、Firefox OS (予)、Android (予)、Windows 8、Windows 7、Linux向けに絵文字を表示できるフォントをフォールバックさせている。通常はハイライトした3つだけで良い。こうして定義したショートカット・ファミリーは自由にCSSで利用できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body {
  font-family: Hoefler Text, Constantia, Emoji, serif;
}

h1 {
  font-family: Helvetica Neue, Calibri, Emoji, sans-serif;
}

pre {
  font-family: Menlo, Consolas, Emoji, monospace;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法そのものとしては&lt;code&gt;unicode-range&lt;/code&gt;プロパティーを使って絵文字を含めた形にフォント・ファミリーを再定義してやる方が真っ当で優れている。しかしFirefox 36以降に限定される問題があることと、OSネイティブの絵文字を表示する仕組みとバッティングしかねない。各ブラウザーで絵文字が自動的に表示されるようになるまでは、このようにショートカット・ファミリーを作ってやるのが良い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ロボ娘のアーキテクチャ</title>
      <link>http://hail2u.net/blog/media/roboko-no-architecture.html</link>
      <description>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。ロボ娘のアーキテクチャは真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/roboko-no-architecture.html</guid>
      <pubDate>Mon, 15 Dec 2014 08:29:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4812475295&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51VOJEjEU1L.jpg" alt="ロボ娘のアーキテクチャ 　① (バンブーコミックス)"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。&lt;a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4812475295&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;ロボ娘のアーキテクチャ&lt;/a&gt;は真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。&lt;/p&gt;

&lt;p&gt;眼帯が欲しい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;4コマは好きでよく読む。わりと何でも読む。けど二極化して長いので、山東ユカの書くやつみたいなのが増えて三極化して欲しい。いわゆる青年誌とかで連載されてる4コマやショートものみたいなのがこれにあたる。専門誌に連載されてるものと違う、絶妙な暗さみたいなのがあるやつ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Gitで最新のタグをチェックアウト</title>
      <link>http://hail2u.net/blog/software/git-checkout-latest-tag.html</link>
      <description>最新のタグを知りたいことがたまにある。その時はgit describe --tagsで調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、describe --tagsがハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、--abbrev=0を加えると消えることがわかった。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/git-checkout-latest-tag.html</guid>
      <pubDate>Sun, 14 Dec 2014 09:21:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;最新のタグを知りたいことがたまにある。その時は&lt;code&gt;git describe --tags&lt;/code&gt;で調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、&lt;code&gt;describe --tags&lt;/code&gt;がハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、&lt;code&gt;--abbrev=0&lt;/code&gt;を加えると消えることがわかった。&lt;/p&gt;

&lt;p&gt;具体的には以下のようなコマンドをターミナルで実行すれば良い。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;git checkout $(git describe --tags &lt;mark&gt;--abbrev=0&lt;/mark&gt;)&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;主に、何かしらをビルドする時のタスクで使っている。事前に最新のタグをチェックアウトさせることによって、常に安定版がデプロイされるように制御することができる。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「CSSポストプロセッサー時代の到来」を追加</title>
      <link>http://hail2u.net/documents/css-postprocessor-era.html</link>
      <pubDate>Wed, 04 Dec 2013 00:15:38 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/css-postprocessor-era.html</guid>
      <description>&lt;p&gt;市民権を得たCSSプリプロセッサーでは開発という段階しかカバーすることは出来ません。レビューとリリースという必要な段階を効率よく確実に行うためには、CSSポストプロセッサーという名前で総称されることになるであろうツールたちをうまく使う必要が出てくるでしょう。CSSポストプロセッサーとはどういうものなのか、そしてどういう働きをするものなのか、更にはどういう効果を持つのか、この文書で説明するこれらの点を理解して適切に使う必要があるでしょう。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Tue, 23 Dec 2014 15:20:00 +0900</lastBuildDate>
  </channel>
</rss>
