<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>rel=dns-prefetchの導入</title>
      <link>http://hail2u.net/blog/webdesign/implementing-dns-prefetch.html</link>
      <description>前にちょっと書いてからもう一年以上経ってしまったが、rel=dns-prefetchを仕込むようにした。小規模なウェブサイトではあまり意味はないが、あってもほとんど損はないとも思われる。他のウェブサイトへ移動した時にも効果があるらしい、というような話を小耳に挟んだこともあり、追加してみることにした。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/implementing-dns-prefetch.html</guid>
      <pubDate>Fri, 30 Jan 2015 19:17:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;前にちょっと書いてからもう一年以上経ってしまったが、&lt;code&gt;rel=dns-prefetch&lt;/code&gt;を仕込むようにした。小規模なウェブサイトではあまり意味はないが、あってもほとんど損はないとも思われる。他のウェブサイトへ移動した時にも効果があるらしい、というような話を小耳に挟んだこともあり、追加してみることにした。&lt;/p&gt;

&lt;p&gt;僕は開発者ツールを見ながら手作業でリストを作っていったが、&lt;a href="http://dnsprefetch.com/"&gt;dns-prefetch Online Code Generator&lt;/a&gt;で生成すると手軽だ。URLを入力してボタンを押すだけで、外部リソースをスキャンしてそのドメイン+αをリストアップしてくれる。Google AdSenseやGoogle Analyticsではリダイレクト先で新たなリソースの追加もあるが、それらのドメインまでは調べてくれない。とはいえこのツールで調べられるドメインまでで十分だろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>クリティカル・パスのCSSなるシロモノ</title>
      <link>http://hail2u.net/blog/webdesign/on-critical-path-css.html</link>
      <description>クリティカル・パスのCSSをインライン化して、描画の開始を早めるテクニックが広まり始めている。数字上は確かに効果的だが、ソーシャル・ボタンの非同期化によるスクロールのつっかかりと似たような問題を孕んでいるのではないかという思いが強い。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/on-critical-path-css.html</guid>
      <pubDate>Thu, 29 Jan 2015 02:35:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;クリティカル・パスのCSSをインライン化して、描画の開始を早めるテクニックが広まり始めている。数字上は確かに効果的だが、ソーシャル・ボタンの非同期化によるスクロールのつっかかりと似たような問題を孕んでいるのではないかという思いが強い。&lt;/p&gt;

&lt;p&gt;世の中にはスクロールをまったくしない人とすぐにする人がいる。しない人はまったくしないので、クリティカル・パスのCSSのインライン化は意味があるような無いようなところだ。効果的になるはずのスクロールする人は、ページが表示され次第&lt;em&gt;とりあえずスクロールする&lt;/em&gt;という行動を取ることが多いように思う。その時、非同期で読み込まれたCSSが間に合っていないとかなりひどいことになるだろう。&lt;/p&gt;

&lt;p&gt;こういったページ閲覧中のちょっとしたパフォーマンスの低下を避けるためにも、CSSは一気に読ませた方が良いと考えている。非同期化されたJavaScriptによりコンテンツの追加や削除が頻繁に行われる昨今ではなおさらそうではないだろうか。&lt;/p&gt;

&lt;p&gt;また、クリティカル・パスのCSSを切り出す時にどうしてもユーザーの平均解像度などといったものを意識せざるをえないことも印象が良くない。このことは定期的に徹底的な見直しを余儀なくされるということでもあるが、ようやく広まり始めたコンテンツ主導のレスポンシブ・ウェブ・デザインとは相反する作業でもある。&lt;/p&gt;

&lt;p&gt;他にもさらなる高速化のために「クリティカル・パスのCSSを小さくしよう」となってしまいそうで怖い。例えば初期描画領域に大きな画像とハンバーガー・ボタンだけといったウェブページはどんどん増えている。この流行りはクリティカル云々とは関係のないものだが、クリティカル・パスのCSSを減らすには都合が良いビジュアル・デザインではある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;body&lt;/code&gt;要素の余白の削除&lt;/li&gt;
&lt;li&gt;大きな画像の敷き詰め&lt;/li&gt;
&lt;li&gt;ハンバーガー・ボタンの位置指定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このくらいでクリティカル・パスのCSSは終わりになる。このCSSの小ささは魅力的なので、それを根拠にパフォーマンス主導でビジュアル・デザインの選択が行われてしまう結果になりうる。もちろんその選択をこの流行りが強力に後押しすることになる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;JavaScriptも含め、ウェブページにおける非同期化は処理を先送りしているに過ぎないことが多い。その処理はユーザーの閲覧と並行して行われるので、閲覧の快適性を損なう可能性は十分に考えられる。初期描画開始までの高速化は、数字としてはわかりやすい指標だが、それが即ウェブページの快適性に繋がるとは限らないことは十分に意識しておく必要があるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>rel=subresourceを併用したCSSの遅延読み込み</title>
      <link>http://hail2u.net/blog/webdesign/async-css-and-rel-subresource-together.html</link>
      <description>クリティカルなんとかの関係やウェブ・フォントにおいて、CSSの遅延読み込みを行う気運は高まっている。様々なアイディアがあって、普通にCSSの中身を読み込んでhead要素に追加するものや、link要素を動的に追加するもの、予めlink要素をrel=stylesheetなしで書いておいて後で追加するものなどがその主なものだ。最後の手法ではrel=subresourceを追加して書いておくと、一部ブラウザーでダウンロードが速く始まるんじゃないかというアイディアを持った。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/async-css-and-rel-subresource-together.html</guid>
      <pubDate>Wed, 28 Jan 2015 20:26:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;クリティカルなんとかの関係やウェブ・フォントにおいて、CSSの遅延読み込みを行う気運は高まっている。様々なアイディアがあって、普通にCSSの中身を読み込んで&lt;code&gt;head&lt;/code&gt;要素に追加するものや、&lt;code&gt;link&lt;/code&gt;要素を動的に追加するもの、予め&lt;code&gt;link&lt;/code&gt;要素を&lt;code&gt;rel=stylesheet&lt;/code&gt;なしで書いておいて後で追加するものなどがその主なものだ。最後の手法では&lt;code&gt;rel=subresource&lt;/code&gt;を追加して書いておくと、一部ブラウザーでダウンロードが速く始まるんじゃないかというアイディアを持った。&lt;/p&gt;

&lt;p&gt;サポートが広いので&lt;code&gt;prefetch&lt;/code&gt;かなと思ったけど、書いたそのページ内で使うリソースの先読みに使うものではないような印象で、すぐさま使う場合は&lt;code&gt;subresource&lt;/code&gt;の方が適切なようだ。Chromeがそういうイメージで実装してるという話で、ウェブ標準では特に細かく規定はないようではある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;
      /* Critical Styles */
    &amp;lt;/style&amp;gt;
    &amp;lt;link class=&amp;quot;async-css&amp;quot; href=&amp;quot;main.css&amp;quot; &lt;mark&gt;rel=&amp;quot;subresource&amp;quot;&lt;/mark&gt;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    ...
    &amp;lt;script&amp;gt;
      var css = document.querySelectorAll(&amp;#39;.async-css&amp;#39;);

      for (var i = 0, l = css.length; i &amp;lt; l; i++) {
        css[i].rel = &amp;#39;stylesheet&amp;#39;;
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特に難しいことはない。&lt;code&gt;rel=subresource&lt;/code&gt;で即キャッシュに持ってきてくれるはずなので、ドキュメントの&lt;em&gt;パース&lt;/em&gt;(レンダリングではない)と平行してダウンロードされることが期待できる。つまり&lt;code&gt;body&lt;/code&gt;要素の最後や&lt;code&gt;DOMContentLoaded&lt;/code&gt;イベントでCSSを追加する場合よりも速くにダウンロードが開始されるのではないだろうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rel=stylesheet&lt;/code&gt;に入れ替える時点でダウンロードが終わってない時にどうなるかは謎(下手をするとリクエストがやり直されたりしそう)なので、実際に使う時はちゃんと検証する必要がある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;遅延読み込みそのものは、その後襲うリペイントやリフローに比べればさほどコストの高いものでもないのでどうやっても良さそうだが、保守性が高そうなのは&lt;code&gt;link&lt;/code&gt;要素を予め書いておく方法だと思う。その上で更に早期に読み込みを開始させるために&lt;code&gt;rel=subresource&lt;/code&gt;を併用するのは悪くなさそうだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ImprovMX</title>
      <link>http://hail2u.net/blog/internet/improvmx.html</link>
      <description>CloudFlareと組み合わせたいメールサービスというものは、つまるところMXレコードを設定するとメール転送だけしてくれるようなサービスだ。探してもドメイン・レジストラーのサービス以外にはなかなか見つからない。そんななか唯一見つけたのがImprovMXだった。MXレコードを設定した後、ドメイン名と転送先のメールアドレスを指定するとキャッチオールで転送してくれる。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/improvmx.html</guid>
      <pubDate>Tue, 27 Jan 2015 17:42:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;CloudFlareと組み合わせたいメールサービスというものは、つまるところMXレコードを設定するとメール転送だけしてくれるようなサービスだ。探してもドメイン・レジストラーのサービス以外にはなかなか見つからない。そんななか唯一見つけたのが&lt;a href="http://improvmx.com/"&gt;ImprovMX&lt;/a&gt;だった。MXレコードを設定した後、ドメイン名と転送先のメールアドレスを指定するとキャッチオールで転送してくれる。&lt;/p&gt;

&lt;p&gt;キャッチオール限定なこと以外はほぼ理想的で、短い期間ではあるが試したところまさにworks like a charmといった具合に動いてくれた。運営者がよくわからないのはともかく、転送先の変更が不透明なのでちょっと怖い。そのため最終的には採用は見送った。&lt;/p&gt;

&lt;p&gt;これくらいシンプルな仕組みのメール転送サービスはもっとあっても良いような気がするが、なかなかないものだ。収益化が見込めないからか。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Bower→npm</title>
      <link>http://hail2u.net/blog/software/forget-about-bower-use-npm.html</link>
      <description>npmとBowerが混ざってたりするとやる気ゲージが一気に減る。Bowerはやめられるけど、npmはやめられない。npmレジストリーにはNormalize.cssがあったりとわりとなんでもありな空気がある。ということでSassパーシャルをnpmパッケージ化してた。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/forget-about-bower-use-npm.html</guid>
      <pubDate>Mon, 26 Jan 2015 00:47:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;npmとBowerが混ざってたりするとやる気ゲージが一気に減る。Bowerはやめられるけど、npmはやめられない。npmレジストリーにはNormalize.cssがあったりとわりとなんでもありな空気がある。ということでSassパーシャルをnpmパッケージ化してた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/hail2u-scss-column-equation"&gt;hail2u-scss-column-equation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/hail2u-scss-functions"&gt;hail2u-scss-functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/hail2u-scss-partials"&gt;hail2u-scss-partials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近はウェブ開発に使うものなら何でもありみたいな雰囲気でnpmは使われているような気がする。io.jsのおかげでNode Package Managerじゃないとか後出しされたのも大きそう。パフォーマンスの面からもnpmを主軸に置くのは悪くない選択だと思う。でもモノによって依存解決の仕組みを切り替えてやるのも一理あるので悩ましい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;こういうものの場合は&lt;code&gt;private: true&lt;/code&gt;にしておいて、publishせずに単に&lt;code&gt;npm install hail2u/scss-partials&lt;/code&gt;してもらう方が良かったかもしれない。もう少し考えてこちらの方が良さそうだったらunpublishしよう……。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>child_process.spawnSync()のoptions引数</title>
      <link>http://hail2u.net/blog/coding/child_process-spawnsync-and-its-options-argument.html</link>
      <description>child_process.spawnSync()で色々書いていたら、3回目で落ちたりすることがわかった。突き詰めていくとどうやら第三引数を再利用していると落ちることがあるようだ。イシュー立てたらすぐ修正された。どうやら内部でoptionsを上書きしてしまっていただけらしい。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/child_process-spawnsync-and-its-options-argument.html</guid>
      <pubDate>Sun, 25 Jan 2015 18:54:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://iojs.org/api/child_process.html#child_process_child_process_spawnsync_command_args_options"&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt;で色々書いていたら、3回目で落ちたりすることがわかった。突き詰めていくとどうやら第三引数を再利用していると落ちることがあるようだ。&lt;a href="https://github.com/iojs/io.js/issues/576"&gt;イシュー&lt;/a&gt;立てたらすぐ&lt;a href="https://github.com/iojs/io.js/pull/579"&gt;修正&lt;/a&gt;された。どうやら内部で&lt;code&gt;options&lt;/code&gt;を上書きしてしまっていただけらしい。&lt;/p&gt;

&lt;p&gt;io.js v1.0.3上では以下のようなコードで再現できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var spawnSync = require(&amp;#39;child_process&amp;#39;).spawnSync;

var ls;
var opts = {
  stdio: &amp;#39;inherit&amp;#39;
};

ls = spawnSync(&amp;#39;ls&amp;#39;, [], opts);
ls = spawnSync(&amp;#39;ls&amp;#39;, [], opts);
ls = spawnSync(&amp;#39;ls&amp;#39;, [], opts);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると3回目の`spawnSync()`で例外を吐いて落ちる。&lt;/p&gt;

&lt;pre&gt;~/Desktop $ iojs test.js
desktop.ini test.js
desktop.ini test.js
child_process.js:905
      throw new TypeError(&amp;#39;Incorrect value for stdio stream: &amp;#39; +
            ^
TypeError: Incorrect value for stdio stream: { type: &amp;#39;fd&amp;#39;, fd: { type: &amp;#39;fd&amp;#39;, fd: 0 } }
    at child_process.js:905:13
    at Array.reduce (native)
    at _validateStdio (child_process.js:829:17)
    at spawnSync (child_process.js:1251:19)
    at Object.&amp;lt;anonymous&amp;gt; (c:\Users\Kyo\Desktop\test.js:13:10)
    at Module._compile (module.js:446:26)
    at Object.Module._extensions..js (module.js:464:10)
    at Module.load (module.js:341:32)
    at Function.Module._load (module.js:296:12)
    at Function.Module.runMain (module.js:487:10)
&lt;/pre&gt;

&lt;p&gt;io.jsではすぐ直りそう(Node.jsではstableに来る頃には直っていることだろう)だが、それまでは&lt;code&gt;options&lt;/code&gt;はいちいち書いた方が無難だろう。具体的には&lt;code&gt;JSON.parse(JSON.stringify(opts))&lt;/code&gt;とオブジェクトをクローンするテクニックを利用して指定するのが安定して良さそうだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>CloudFlareにおけるメール・ソリューションとしてのMailgun</title>
      <link>http://hail2u.net/blog/internet/mailgun-as-an-email-solution-for-cloudflare.html</link>
      <description>Value Domainで取得したドメインをCloudFlareの提供するネームサーバーでGitHub Pagesに向けてやるのは、低コストでウェブサイトをホスティングする優れた手段だ。問題はメールだ。CloudFlareではメール関係の機能はまったく用意されていない。またValue Domainで無料で取得できるXREAのアカウントはメールだけの利用は禁止されている。本道としては別にメール・サーバーを用意するわけだが、転送だけで良いのなら無料枠内で利用することができるMailgunを使うのが良さそうだ。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/mailgun-as-an-email-solution-for-cloudflare.html</guid>
      <pubDate>Sat, 24 Jan 2015 01:24:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://www.value-domain.com/"&gt;Value Domain&lt;/a&gt;で取得したドメインを&lt;a href="https://www.cloudflare.com/"&gt;CloudFlare&lt;/a&gt;の提供するネームサーバーで&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;に向けてやるのは、低コストでウェブサイトをホスティングする優れた手段だ。問題はメールだ。CloudFlareではメール関係の機能はまったく用意されていない。またValue Domainで無料で取得できるXREAのアカウントはメールだけの利用は禁止されている。本道としては別にメール・サーバーを用意するわけだが、転送だけで良いのなら無料枠内で利用することができる&lt;a href="https://mailgun.com/"&gt;Mailgun&lt;/a&gt;を使うのが良さそうだ。&lt;/p&gt;

&lt;p&gt;Mailgunではアカウントを取得後、まずドメインを追加する。すると計5つのDNSレコードが提供される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;認証用のTXTレコードが2つ&lt;/li&gt;
&lt;li&gt;送信メールでのトラッキングに使われるリソースのためのCNAMEレコードが1つ&lt;/li&gt;
&lt;li&gt;受信用のMXレコードが2つ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらDNSレコードをCloudFlareのコントロール・パネルから設定する。転送のみの場合はトラッキングのためのCNAMEレコードは必要ないが、素直に設定しておくべきだろう。ただしOff CloudFlareにし、トラフィックをバイパスさせておくのは忘れないようにしたい。&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-1.png"&gt;&lt;img alt="Mailgunで提供される5つのDNSレコードをCloudFlareのコントロールパネルから設定した様子" src="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-1.png"&gt;&lt;/a&gt;

  &lt;figcaption&gt;DNS Settings on CloudFlare&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;次にMailgun側でドメインの照合を行うわけだが、その前にMailgunで設定しようとしているドメインのDomain SettingsでInbound Spam FilterをBlock Detected Spamに変更しておくと良い。こうしないとスパムメールをちょくちょく受信するようなメールアドレスをMailgunで処理しようとする場合、即座にDisabledにされてしまう。もしDisabledにされた場合は、まだメールの送信はしていないことなどを添えてサポートから連絡すれば簡単に復活させてはくれる。&lt;/p&gt;

&lt;p&gt;続いて改めてドメインの照合を行う。Domain Settingsと同じページにあるCheck DNS Record Nowというボタンを押して照合させる(待っていても自動で照合してはくれない)。うまくいくと各DNSレコードのアイコンが緑の四角に白でチェックマークが描かれたものに変わる。&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-2.png"&gt;&lt;img alt="Mailgunでドメインの認証用TXTレコードの照合に成功した様子" src="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-2.png"&gt;&lt;/a&gt;

  &lt;figcaption&gt;Domain Verification on Mailgun&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;次に受信メールの転送を設定する。これはMailgunのRoutesという機能を使って行う。&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-3.png"&gt;&lt;img alt="Mailgunで独自ドメインのアドレスからGmailへのメール転送を設定している様子" src="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-3.png"&gt;&lt;/a&gt;

  &lt;figcaption&gt;Mail Forwarding Setting on Mailgun&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Filter Expressionで&lt;code&gt;match_recipient()&lt;/code&gt;を使って利用したいメールアドレスを指定し、Actionsで&lt;code&gt;forward()&lt;/code&gt;を使って自分のGmailのメールアドレスを指定する。Priorityは他に何もしないのなら0のままで良い。Descriptionはわかりやすい名前を付けておくべきだろう。Filter Expressionで&lt;code&gt;catch_all()&lt;/code&gt;を使うといわゆるキャッチオール的な転送も可能だ。&lt;/p&gt;

&lt;p&gt;ネームサーバーの切り替えが終了済みなら直ぐに転送が可能になっている。適当なメール・クライアントから実験してみると良い。うまくいっているとメールが転送された上、MailgunではLogsで転送の様子が確認できる。&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-4.png"&gt;&lt;img alt="Mailgunで正常にメールが転送されていることを確認している様子" src="http://hail2u.net/images/blog/mailgun-as-an-email-solution-for-cloudflare-4.png"&gt;&lt;/a&gt;

  &lt;figcaption&gt;Viewing Logs on Mailgun&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Mailgunはクレジットカード情報を登録しない場合、常にFreeアカウントでの運営になる。その場合、&lt;a href="http://documentation.mailgun.com/faqs.html#what-are-the-differences-between-free-and-paid-accounts"&gt;いくつかの制限&lt;/a&gt;があるが、送信せず転送のみならば問題ない制限だろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;今のところは動いているようだが、何回かDisabledになったので継続運営にはまだかなり不安がある。サポートといろいろ話したところ、既存のメールアドレスをそのまま運用するのはなかなか難しいという話なので、僕は別の手段を探した方が良さそうだ。&lt;/p&gt;

&lt;p&gt;日頃からスパムが来ないように注意を払っている人達には十分に機能する手段ではあるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Muspy</title>
      <link>http://hail2u.net/blog/internet/muspy.html</link>
      <description>よく聞くアーティストの新譜がリリースされた時にプッシュ通知させるために長らくSoundamusのカレンダーを使っていたんだけど、2014年12月を最後に完全に停止してしまった。Last.fmからアーティストをインポートできて、カレンダーが提供されているサービスという条件で替りになりそうなものを探したが全然ない。しかし簡単に見つかったもののメールとRSSだけか……と試していなかったMuspyが実はiCalでカレンダーを提供していることがわかったので、これに乗り換えることに決めた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/muspy.html</guid>
      <pubDate>Fri, 23 Jan 2015 03:38:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;よく聞くアーティストの新譜がリリースされた時にプッシュ通知させるために長らく&lt;a href="http://www.soundamus.net/"&gt;Soundamus&lt;/a&gt;のカレンダーを使っていたんだけど、2014年12月を最後に完全に停止してしまった。Last.fmからアーティストをインポートできて、カレンダーが提供されているサービスという条件で替りになりそうなものを探したが全然ない。しかし簡単に見つかったもののメールとRSSだけか……と試していなかった&lt;a href="https://muspy.com/"&gt;Muspy&lt;/a&gt;が実はiCalでカレンダーを提供していることがわかったので、これに乗り換えることに決めた。&lt;/p&gt;

&lt;p&gt;バックエンドは&lt;a href="http://musicbrainz.org/"&gt;MusicBrainz&lt;/a&gt;のようなので、日本人アーティストにも対応しているんじゃないかと思う。残念な点は未来のリリース予定が見えないところ。カレンダーには1ヶ月先のリリース予定くらいまで含めて欲しい気がする。&lt;/p&gt;

&lt;p&gt;ということで&lt;a href="http://en.wikipedia.org/wiki/The_Beautiful_People_(song)"&gt;The Beautiful People&lt;/a&gt;からもうすぐ20年(！)かと思うと感慨深い人の新譜が出ていることを知ったりした。買わないけど。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Sassの変数の仕組みとOOCSS</title>
      <link>http://hail2u.net/blog/webdesign/sass-s-variable-system-and-oocss.html</link>
      <description>A List Apartに掲載されたA Vision for Our Sassという記事を読んでいた。ここに書かれていることが正しいとすると、やはりOOCSSあってのSassなのかなという思いを強くした。でも、今のSassの変数の仕組みとCSSのフラットな構造を考えると、Sassを使ったOOCSSの実現は既に詰みかけている局面だと考えることが多い。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/sass-s-variable-system-and-oocss.html</guid>
      <pubDate>Thu, 22 Jan 2015 02:00:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://alistapart.com/article/a-vision-for-our-sass"&gt;A List Apartに掲載されたA Vision for Our Sass&lt;/a&gt;という記事を読んでいた。ここに書かれていることが正しいとすると、やはりOOCSSあってのSassなのかなという思いを強くした。でも、今のSassの変数の仕組みとCSSのフラットな構造を考えると、Sassを使ったOOCSSの実現は既に詰みかけている局面だと考えることが多い。&lt;/p&gt;

&lt;p&gt;例えば&lt;a href="http://alistapart.com/article/a-vision-for-our-sass#section9"&gt;Function over Presentation&lt;/a&gt;の例を見てみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$primary-color: #b32293; //magenta
$secondary-color: #2f6b49; //green
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは確かに機能すると思う。しかし大体においてカラーパレットは最低でもあと5色くらいは必要になることが多いだろう。もちろん&lt;code&gt;$primary-color&lt;/code&gt;のバリエーションであったりするわけだが、それらの名前付けはどうするのだろうか。例えば名前付けをせずに実際に使われる場所でSassの様々な色関数を利用するという手段がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
  color: $primary-color;

  &amp;amp;:hover {
    color: darken($primary-color, 20%);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これもうまく機能することだろう。だが今度はこの微調整した色の再利用性は失われる。とするとやはり名前付けを行う必要があるということになるだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$primary-color-dark: darken($primary-color, 20%);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうして変数を定義していくとどんどん変数の名前付けが苦しくなっていく。BEMを利用して変数でも頑張って命名規則を細かく規定しても良いだろうが、今度は複数のBEMを取り扱う必要が出てくるかもしれない。カラーパレット用のBEM、ウェブサイト用のBEM、下手をするとプレースホルダー・セレクター用のBEMなどだ。&lt;/p&gt;

&lt;p&gt;別のアプローチとしては変数をさらに挟むという手法もある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$primary-color: #b32293;

$color-a: $primary-color;
$color-a-hover: darken($primary-color, 20%);

a {
  color: $color-a;

  &amp;amp;:hover {
    color: $color-a-hover;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;カラーパレットの定義をまず行い、それを参照する形で要素やコンポーネントに応じた変数を作成していく。変数名は元々存在する要素名やクラス名にプリフィックスを加えたものなので、HTML側でクラス名さえちゃんと付ければあんまり困らない。実際にスタイルを当てるパーシャルでもどのような変数を参照するかまったく迷う必要がなくなる。グローバル変数が前提な今のSassだとこのようにして変数を挟むか、再利用性を一部で捨てるかのどちらかに決断しないとならない印象だ。&lt;/p&gt;

&lt;p&gt;つまりOOCSSのキモとも言える小さい単位でのスタイルの管理が、今のSassのグローバル変数を強いる仕組みと極端に食い合せが悪いということだ。もう少しするとこの辺りは変化していくわけだが、大幅な概念の変化をもたらす変数の局所化へとスムーズに移行ができるわけもなく、破綻して一から作りなおされるという未来はかなり現実味がある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ではその時にSassを選択する意味・価値はあるのか、というのが今の僕が最も興味を持っている部分だ。結局は厳しい命名規則に縛られた管理を行わざるをえないSassを使ったOOCSSの実現の代わりに、ウェブ標準に寄せたHTML/CSSの書き方で対抗できる可能性があったら面白いなというわけだ。そのためにはHTMLに完全に従属する形でCSSを取り扱う必要があると思うので、構造化されたHTMLを設計するところをスタート地点として、Every Declaration Just OnceのようなCSSでは何も抽象化したりする必要のない書き方を採用すると実現しやすそうかなと考え、色々試し始めたということになる。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>無印良品のジーンズのラベル素材シリーズ</title>
      <link>http://hail2u.net/blog/gadget/muji-jeans-lable-stationaries.html</link>
      <description>当初のブラウンのものはかなり前に消え、黒のもののみが細々と展開されてたけど、遂に最後の一種類になってた。このシリーズの商品はいくつか買ったけど、中でも文庫本カバーはストックも含め10個くらい買った。昨日、ついに最後のストックをおろした。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/muji-jeans-lable-stationaries.html</guid>
      <pubDate>Wed, 21 Jan 2015 03:02:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;当初のブラウンのものはかなり前に消え、黒のもののみが細々と展開されてたけど、遂に&lt;a href="http://www.muji.net/store/cmdty/section/S107013804"&gt;最後の一種類&lt;/a&gt;になってた。このシリーズの商品はいくつか買ったけど、中でも文庫本カバーはストックも含め10個くらい買った。昨日、ついに最後のストックをおろした。&lt;/p&gt;

&lt;p&gt;無印良品では同じ名前で提供され続ける商品はある。しかし、継続的に&lt;em&gt;同じ&lt;/em&gt;商品が提供されることはあんまりない。同じ名前でもマイナー・チェンジではないような変更がされちゃう。ふと気づくと綿100%ではなくなっていた足なり靴下やチクチクしないバージョンのみになったタートルネックセーターなどがその例。また再販するまでにかなりの間があったりもするので、その間に乗り換えて悲しい思いをしたりもする。PET詰替えボトルのトリガー・スプレーの奴とか。&lt;/p&gt;

&lt;p&gt;気に入るものはちょくちょくあるんだけれどもそのうち手に入らなくなるのが怖くて、ここ数年は無印良品のものはなるべく避けようと意識してる。でも他に良いものが見つからなくて結局買ってしまう。そしてなくなり、悲しい思いをする。&lt;/p&gt;

&lt;p&gt;文庫本カバー探そう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description>&lt;p&gt;HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Fri, 30 Jan 2015 19:17:00 +0900</lastBuildDate>
  </channel>
</rss>
