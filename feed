<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>Modularized Normalize.scss v3.0.3</title>
      <link>http://hail2u.net/blog/webdesign/modularized-normalize-scss-v3.0.3.html</link>
      <description>Normalize.cssのv3.0.3がリリースされたようなので、Modularized Normalize.scssも追随させた。主な変更点は現在のFirefox ESRであるv31を最低ラインに変更したことによるベンダー拡張プリフィックスの整理くらいか。多少npmから扱いやすくなってもいる。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/modularized-normalize-scss-v3.0.3.html</guid>
      <pubDate>Mon, 06 Apr 2015 14:19:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/necolas/normalize.css/releases/tag/3.0.3">Normalize.cssのv3.0.3</a>がリリースされたようなので、<a href="https://github.com/hail2u/normalize.scss/releases/tag/v3.0.3">Modularized Normalize.scss</a>も追随させた。主な変更点は現在のFirefox ESRであるv31を最低ラインに変更したことによるベンダー拡張プリフィックスの整理くらいか。多少npmから扱いやすくなってもいる。</p>

<p>まだGitHub Pagesの方が更新されていないためテストは通らないが、手元では通せたので大丈夫なはずだ。</p>

<hr>

<p>Normalize.cssはそろそろその役目を終えているような空気と合意がある。それはとても良いことであるのだけど、それと同時にリセットCSSの復権だ的な意見があるのはちょっと悲しい。<q><a href="http://t32k.me/mol/log/wisteria/">真っ白なキャンバス</a></q>という表現と意味はわからないこともないけど、それはjQueryのような危険性を内包するもので、ポリフィル(もどき)として作られ更新されているNormalize.cssの良さはまた別のところ、つまりそれへの依存を徐々に減らすことができることにあると思う。</p>

<pre><code>h1 {
  font-weight: normal;
}

...

.title {
  font-weight: bold;
}
</code></pre>

<p>僕はこういったリセットしたものを戻す作業が無駄としか思えなくて、あるものはそのまま利用すれば良いし、そうでないのなら文脈に従って変更していきたい。</p>

<p>Normalize.cssが役目を終えつつあるということは、つまりブラウザー(に類するもの)でHTMLがどのように表示されるかが安定し始めたとうことであって、覚えることはもうほとんどなくなったということだと思う。そういったブラウザーのCSSの扱いを覚えることというのは、ブラウザーが実装したウェブ標準のインターフェイスの利用方法を覚えることと同じはずだ。それならばリセットするより少しづつ不要なノーマリゼーションを削除していき、最終的には依存なしで普通に書けるようになることを目指すのが良い。</p>

<hr>

<p>Modularized Normalize.scssはそういう用途で使うためのプラッガブルなポリフィルとして考えて、作り、使っている。</p>]]></content:encoded>
    </item>
    <item>
      <title>CSS Font LoadingとFont Face Observer、Web Font Loader</title>
      <link>http://hail2u.net/blog/webdesign/css-font-loading-font-face-observer-and-web-font-loader.html</link>
      <description>ウェブ標準であるCSS Font Loadingが気軽に使えるようになるにはまだまだ時間がかかりそうだ。そのポリフィルであるFont Loaderは動作が不安定かつ開発が止まっており信用できない。代替技術としてはポリフィルと同じ開発者が積極的にコミットしているFont Face Observerと、広く使われているWeb Font Loaderがある。同じフォントの読み込みを検知する場合、この三者ではどのようにコードが変わってくるのだろうか。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/css-font-loading-font-face-observer-and-web-font-loader.html</guid>
      <pubDate>Sun, 05 Apr 2015 14:47:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ウェブ標準である<a href="http://www.w3.org/TR/css-font-loading/">CSS Font Loading</a>が気軽に使えるようになるにはまだまだ時間がかかりそうだ。そのポリフィルである<a href="https://github.com/bramstein/fontloader">Font Loader</a>は動作が不安定かつ開発が止まっており信用できない。代替技術としてはポリフィルと同じ開発者が積極的にコミットしている<a href="https://github.com/bramstein/fontfaceobserver">Font Face Observer</a>と、広く使われている<a href="https://github.com/typekit/webfontloader">Web Font Loader</a>がある。同じフォントの読み込みを検知する場合、この三者ではどのようにコードが変わってくるのだろうか。</p>

<p>以下のコード例では、自前でホスティングしている<a href="http://en.wikipedia.org/wiki/Open_Sans">Open Sans</a>の読み込みが完了・失敗したら<code>body</code>要素にクラスを振るという単純なケースを書き分ける。</p>

<h2>CSS Font Loading</h2>

<p>CSS Font Loading仕様はPromiseによる実装で、読み込み待ちはPromiseで解決することになる。</p>

<pre><code>new FontFace(
  &#39;Open Sans&#39;,
  &#39;<mark>url(/assets/font/open-sans/r.woff)</mark>&#39;
).load().then(function (fontface) {
  <mark>document.fonts.add(fontface);</mark>
  document.body.className += &#39; loaded&#39;;
}, function (reason) {
  document.body.className += &#39; failed&#39;;
  throw new Error(reason);
});
</code></pre>

<p>気をつけるのはウェブ・フォントのURLを<code>url()</code>でくくる必要があること、そして読み込み成功時に<code>add()</code>することくらいだろう。Promiseなので、読み込み失敗は<code>then()</code>の第二引数に指定した関数で処理すれば良い。</p>

<h2>Font Face Observer</h2>

<p>Font Face Observerはウェブ標準と同じくPromiseによる実装のためウェブ標準と置換えがしやすい……と思いきや、ウェブ・フォントを読み込む機能自体は持っていない。そのためウェブ・フォントCSSを自前で読み込み、そのウェブ・フォントが利用可能になったかどうかをもって読み込み完了が決定される。</p>

<pre><code><mark>var cssFont = document.createElement(&#39;link&#39;);
cssFont.href = &#39;/assets/css/open-sans.css&#39;;
cssFont.rel = &#39;stylesheet&#39;;
document.head.appendChild(cssFont);</mark>
new FontFaceObserver(
  &#39;<mark>Open Sans</mark>&#39;,
  {}
).check().then(function () {
  document.body.className += &#39; loaded&#39;;
}, function (reason) {
  document.body.className += &#39; failed&#39;;
  throw new Error(reason);
});
</code></pre>

<p>気をつけるのは<code>FontFaceObserver</code>コンストラクターへ渡す第一引数の値と読み込むウェブ・フォントCSSでの<code>font-family</code>の値が一致していることだ。こちらもPromiseのため第二引数に指定した関数で読み込み失敗を処理できる。ただし読み込みする機能自体を持っておらずイベント監視(スクロールイベントで監視しているので軽量)のため、デフォルトの3秒、または<code>check()</code>の第二引数で指定したミリ秒数のタイムアウトでも読み込み失敗になる。</p>

<h2>Web Font Loader</h2>

<p>使っている人はおなじみだろうがWeb Font LoaderはPromiseによる実装ではない。ウェブ標準とはコードが大きく異る。</p>

<pre><code>WebFont.load({
  custom: {
    families: [&#39;Open Sans&#39;],
    <mark>urls: [&#39;/assets/css/open-sans.css&#39;]</mark>
  },
  <mark>fontactive</mark>: function () {
    document.body.className += &#39; loaded&#39;;
  },
  <mark>fontinactive</mark>: function (family) {
    document.body.className += &#39; failed&#39;;
    throw new Error(&#39;Web font &quot;&#39; + family + &#39;&quot; not loaded.&#39;);
  }
});
</code></pre>

<p>このようにライブラリーが用意する<code>WebFont</code>オブジェクトの<code>load()</code>メソッドですべて指定することになる。自前で用意したウェブ・フォントを使いたい場合は<code>custom</code>フィールドで<code>families</code>と<code>urls</code>を指定することで読み込みを行う。Font Face Observerとは違うウェブ・フォントの読み込み機能自体は半分(ウェブ・フォントCSSの読み込みだけ)内蔵されているということだ。読み込みエラーは<code>fontinactive</code>フィールドで指定した関数で処理できる。こちらもタイムアウト(デフォルトでは5秒)でもエラーになる。</p>

<hr>

<p>コード量の面でもPromiseで書くことができるという面でもウェブ標準での実装が優秀だが、ほぼChrome以外で使えないないものは使えない上、ポリフィルは本当に信用ができない。Font Face ObserverはPromiseによる実装で良さそうに見えるが、少し前のリリース(v1.4.1)では何度も呼ぶとかなりの確率で読み込みに成功しても(フォント・ファイル自体は正常に読み込まれている)失敗の方の関数が呼ばれることが高確率で起こっていた。</p>

<p>結局のところ、まだまだWeb Font Loaderで安定ということになると思う。Font Face Observerは悪くはないけれども、ポリフィルでないのなら安定のWeb Font Loaderの方がマシだろう。軽量という点はすこし魅力的だが、多くの場合はウェブページごとに一回呼ぶだけだろうと思われるので、それほど魅力的なファクターではない。</p>

<p>僕は今のところはWeb Font Loaderを使いつつ、常にウェブ標準での置換えを意識しておくという書き方をしている。Font Face Observerは使う利点を見出すことができなかった。</p>]]></content:encoded>
    </item>
    <item>
      <title>餃子</title>
      <link>http://hail2u.net/blog/misc/gyouza.html</link>
      <description>無心になって野菜を刻み、無心になって豚ひき肉と混ぜ、無心になって餃子の皮で包むと、あとは焼くか茹でると餃子になる。あんまり考えずに無心に作れるので好き。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/gyouza.html</guid>
      <pubDate>Sat, 04 Apr 2015 18:54:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>無心になって野菜を刻み、無心になって豚ひき肉と混ぜ、無心になって餃子の皮で包むと、あとは焼くか茹でると餃子になる。あんまり考えずに無心に作れるので好き。</p>

<p>ずっと焼き色を付けてから水を入れて蒸し焼きにしてたんだけど、蒸し焼きにしてからあとで油を回し入れて焼き色を付けるみたいなやり方もあるのか。そちらの方が羽根みたいなのを付ける場合は簡単らしい。羽根好きじゃないのでつけようとも考えたことないけど。一旦普通に茹でて、最後に焼き色付けるというやり方は今度やってみよう。</p>

<p>餃子の最大の問題は、無心で作って包むところまで終わると満足してしまって、それほど食べる気起きなくなるところ。</p>]]></content:encoded>
    </item>
    <item>
      <title>Do Note</title>
      <link>http://hail2u.net/blog/software/do-note.html</link>
      <description>Do Noteを使い始めた。IFTTTの出した何か書いたら何かするだけのアプリ。今のところリマインダーへの登録、ツイート、そしてDropboxへメモの保存にしている。3つまでしかレシピを作れないという制限は心地良い不自由さかなと感じる。ひいき目だけど。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/do-note.html</guid>
      <pubDate>Fri, 03 Apr 2015 16:11:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://ifttt.com/products/do/note">Do Note</a>を使い始めた。IFTTTの出した何か書いたら何かするだけのアプリ。今のところリマインダーへの登録、ツイート、そしてDropboxへメモの保存にしている。3つまでしかレシピを作れないという制限は心地良い不自由さかなと感じる。ひいき目だけど。</p>

<p>リマインダーのようなタスク・リストへの登録は意外に手間がかかることがある。アプリの起動、リストの選択、タスクの入力だけだが、大抵は既定のリストにシュッと登録したいだけなのにそうはいかなかったりする。Inbox by Googleのリマインダー登録みたいなのが完成形なのかなという感じはするけど、できる限りメール以外をGoogleに任せないようにしているので、僕は使えない。</p>

<p>Do Noteでは起動すると前回使ったレシピでのメモ画面になる。のでアプリ起動から即既定のリストへのリマインダー登録が行える。他のレシピを使った後に必ずリマインダーのレシピに戻すことを忘れなければ常にこの状態を維持できる。</p>

<p>ツイートはなんといってもタイムラインが目に入らないのが良い。僕はまずURLとかを投げることはないので、これで十分かなと感じる。タイムラインは色々楽しいのだけど、やっぱり楽しいだけじゃない。タイムラインに張り付くのは気が向いた時だけみたいなのが性に合っているみたい。</p>

<p>最後は普通のメモ。主にブログのたたき台やアイディアのメモ、書かなきゃ行けなそうなコードの断片などをとりあえずDropboxに放り込んでおくだけのレシピ。Evernoteをオススメしてくれた人もいたけど、Evernoteの🐘がとにかく好きになれない。ユーザー層もあまり好きではない。そもそもそんなにメモが氾濫しない。通常は紙のメモパッドにペンで書いてる。とかでDo Noteに落ち着いた。でも<a href="http://www.squarespace.com/apps/#note">@ykskのオススメしてくれたSquarespace Note</a>にはちょっとグラついてる。</p>

<p>でも過去のメモの管理は今のところ必要としていないので、Do NoteでDropboxにとりあえず投げておくという形でお手軽にやっている。更新したくなったり、そこそこちゃんと書きたくなったらDropboxと連携できるMarkdownエディターである<a href="http://writeboxapps.com/">Writebox</a>のウェブ版でやるということに。もちろんPCの前に座ってたらVimやFocusWriteを使っているけど。Writeboxは分割プレビューやインライン・プレビューみたいな<del>ゴミみたい</del><ins>便利</ins>な機能がなくて非常に好き。</p>

<hr>

<p>IFTTTに支配されつつあり、ダメな感じがしてきた。所詮定型作業の自動化だと思っているので、無くなったら死ぬとかはないと思うけど、ちょっと良くない傾向だ。</p>]]></content:encoded>
    </item>
    <item>
      <title>不可欠さ</title>
      <link>http://hail2u.net/blog/misc/indispensable.html</link>
      <description>不可欠なことは必要なこととは微妙に違う。不可欠とはつまり無いと死ぬということでもあるけれど、無いとなめらかに作業が進まずストレスが少しづつたまっていくということでもある。必要なことはただ単に必要なだけで、ない場合は力や経験でどうにかすることになる。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/indispensable.html</guid>
      <pubDate>Thu, 02 Apr 2015 13:03:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>不可欠なことは必要なこととは微妙に違う。不可欠とはつまり無いと死ぬということでもあるけれど、無いとなめらかに作業が進まずストレスが少しづつたまっていくということでもある。必要なことはただ単に必要なだけで、ない場合は力や経験でどうにかすることになる。</p>

<p>例えば食洗機というものがある。食器洗いという必要な作業を半自動化するものだが、洗濯機と同じように不可欠なものになりつつあると思う。こと時間というものが貴重な現代において、平行して作業を行うことができるようになる自動化家電は不可欠さを持つと言って良いはずだ。</p>

<p>食洗機には二種類ある。ビルトインのものとそうでないものだ。ビルトインだと設置スペースの極小化やキッチン全体の快適さ、そしてもちろん食器洗いの省力化を実現してくれるが、その設置や管理、仕組みには不透明さが残る。また、トラブルが起きた時や古くなった時にとてもコストが高くなる。ビルトインでないものは様々な点でビルトインのものに劣るが、環境への適応性と将来性という点で大きく優れる。</p>

<p>どちらを選んでも食器洗いという作業を削減することは可能で、要件はそこにある。それ以外は必要なことであって、なくても力や経験でどうにかできる。今まで見ていなかったコストに気づき、ビルトインの大がかりなものに辛さを見出し、それを捨てることは賢明であるかもしれないが、それにより失うものももちろんある。その失ったものが存外大きいものであるかどうかもまたしばらくしないと気づくことはないだろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>帽子</title>
      <link>http://hail2u.net/blog/gadget/headwear.html</link>
      <description>ちょくちょく帽子を買うわりにかぶらないみたいな感じになってきた。帽子好きなんだけど、年取って似合う帽子が変わってきたので、買って失敗するケースが増えた。昨年度は3勝2敗で5つ買った気がする。昨日はHerchelのを買った。3敗目っぽい。リバーシブル良くない。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/headwear.html</guid>
      <pubDate>Wed, 01 Apr 2015 13:03:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ちょくちょく帽子を買うわりにかぶらないみたいな感じになってきた。帽子好きなんだけど、年取って似合う帽子が変わってきたので、買って失敗するケースが増えた。昨年度は3勝2敗で5つ買った気がする。昨日は<a href="http://www.amazon.co.jp/gp/product/B00U9WLW60/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00U9WLW60&amp;linkCode=as2&amp;tag=hail2unet-22">Herchelの</a>を買った。3敗目っぽい。リバーシブル良くない。</p>

<p>あふれる帽子を効率的に収納する手段を考えている。上部に枝の多いコートハンガー的なものが最適解っぽいのだけど、なかなか良いのがない。たまにあっても連結式で不格好だったり。5万円オーバーだったり。軽量過ぎて土台部分が異様に大きかったり。</p>

<p>しばらく使っていたウォール・ハンガーは悪くなかったのだけど、ニットキャップとは相性が悪い。ちょっと高めのやつに穴が開いて以来、バッグ専用にして帽子には使っていない。</p>

<p>物が増えると収納に困るというのは、拡張と整理が比較的簡単なコンピューターの世界ですら解決できていない。人類の歴史とは収納の歴史であるとかテキトーな言葉を思いついた。</p>

<hr>

<p>町田に用があってそのついでに買った。用はすぐに終わったので、たらたら歩いてたら新規オープンもそこそこあるものの閉店のお知らせみたいなばかりで大変そうだった。新規オープンはパチンコ屋ばかりだし。ただルミネに<a href="http://www.garden.co.jp/">ザ・ガーデン</a>がオープンしたのは良さそう。去年リニューアルした小田急の地下と合わせて、ちょっと良さげな食料品等を買う地として大変充実している。</p>]]></content:encoded>
    </item>
    <item>
      <title>金の針と万能薬</title>
      <link>http://hail2u.net/blog/webdesign/gold-needle-or-remedy.html</link>
      <description>Specialise or cross-skillというスライドを見ていた。挟み込まれた写真ではスベっているものの、色々ハチャメチャなのに妙に説得力のあるベン図が出てきて楽しい。ウェブ制作という世界が混沌としてきた……というよりも、人によって様々な見方があって、どれも正しく、どれも間違っているというようなことが見えてくる。残念ながら専門家かジェネラリストかの結論はスライドではほとんど出されていないが、ベン図を眺めて自分で色々考えるのが良さそうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/gold-needle-or-remedy.html</guid>
      <pubDate>Tue, 31 Mar 2015 00:12:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="http://www.slideshare.net/maxdesign/ixda-russweakley20150202v2">Specialise or cross-skill</a>というスライドを見ていた。挟み込まれた写真ではスベっているものの、色々ハチャメチャなのに妙に説得力のあるベン図が出てきて楽しい。ウェブ制作という世界が混沌としてきた……というよりも、人によって様々な見方があって、どれも正しく、どれも間違っているというようなことが見えてくる。残念ながら専門家かジェネラリストかの結論はスライドではほとんど出されていないが、ベン図を眺めて自分で色々考えるのが良さそうだ。</p>

<p>専門家でずっと通用するとすると、HTMLやCSSを中心としたいわゆるウェブ制作にずっと触れつつ定年を迎えることができるんじゃないかと思う。果たしてそういう人が出てくるような未来はあるのかというような話にもつながってくるだろう。それと同時に生存戦略としてではなく自分には果たしてどちらが自然なのか(好ましいのか)ということを考えさせられることにもつながってくるのではないかと思う。</p>

<hr>

<p>このスライドはRuss Weakleyという、懐かしい人には懐かしい<a href="http://css.maxdesign.com.au/listamatic/">Listamatic</a>や<a href="http://css.maxdesign.com.au/floatutorial/">Floatutorial</a>の人によるもの。それを踏まえると、生き残るための学習変歴のみならず、いろいろな葛藤が見えてきてちょっと切ない。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150328.html</link>
      <description>ずっとカレーを食べてる。食べるとモッモッという感じで、皿の下からカレーが生えてくる。食べるのやめると生えてこないので、これ最高じゃないかと思って、皿を置いて飲み物を取りに行く。戻ってくると皿が2つに増えてると思うと4つに増える。手を離すと皿が増えるのかなるほどなと思ったところで目が覚める。その日は肉じゃがにした。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150328.html</guid>
      <pubDate>Mon, 30 Mar 2015 12:09:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ずっとカレーを食べてる。食べるとモッモッという感じで、皿の下からカレーが生えてくる。食べるのやめると生えてこないので、これ最高じゃないかと思って、皿を置いて飲み物を取りに行く。戻ってくると皿が2つに増えてると思うと4つに増える。手を離すと皿が増えるのかなるほどなと思ったところで目が覚める。その日は肉じゃがにした。</p>

<p>鶏モモ(唐揚げ用)とごろごろ野菜の家カレーが好きだけど、外で食べようとするとなかなか見つからない。そういうのはきっと家で食べるからおいしいんであって、外で食べると普通すぎて売れないか。</p>]]></content:encoded>
    </item>
    <item>
      <title>disabledなファビコン</title>
      <link>http://hail2u.net/blog/webdesign/disabled-favicon.html</link>
      <description>ファビコンを状態によって変更する必要があったが、固定の2種類の切り替えに過ぎなかったのでJavaScriptでファビコンを参照しているlink要素のhref属性を書きかえるのは少し面倒くさいかなと思った。そこでdisabled属性を付けることでファビコンの参照が切れれば、操作しやすそうかなと試してみた。しかし現行のブラウザーではdisabled属性を付けても普通にファビコンへの参照と解釈するようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/disabled-favicon.html</guid>
      <pubDate>Sun, 29 Mar 2015 16:46:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ファビコンを状態によって変更する必要があったが、固定の2種類の切り替えに過ぎなかったのでJavaScriptでファビコンを参照している<code>link</code>要素の<code>href</code>属性を書きかえるのは少し面倒くさいかなと思った。そこで<code>disabled</code>属性を付けることでファビコンの参照が切れれば、操作しやすそうかなと試してみた。しかし現行のブラウザーでは<code>disabled</code>属性を付けても普通にファビコンへの参照と解釈するようだ。</p>

<p>View Demo: <a href="/pub/test/617.html">Disabled Favicon</a></p>

<p>デモでは緑の○と赤の✕のファビコンを両方共指定し、後で定義した赤の✕のファビコンを参照している<code>link</code>要素には<code>disabled</code>属性を追加している。もし<code>disabled</code>属性がファビコンの参照に影響を与えるのなら緑の○がファビコンとして表示されることになるが、そうはならず赤の✕がファビコンとして表示される。Chrome 41、Firefox 36、Internet Explorer 11のいずれもダメだった。</p>

<hr>

<p>このアイディアはファビコンのURLをJavaScriptコードから排除したいという欲求に基づく。</p>

<pre><code>&lt;link class=&quot;favicon-ok&quot; href=&quot;617-ok.ico&quot; rel=&quot;icon&quot;&gt;
&lt;link class=&quot;favicon-no&quot; disabled href=&quot;617-no.ico&quot; rel=&quot;icon&quot;&gt;
</code></pre>

<p>あらかじめHTMLにはこのように必要になるファビコンを列記しておき、必要な時に<code>disabled</code>属性を追加・削除してやるだけにするというわけだ。</p>

<pre><code>document.querySelector(&#39;.favicon-ok&#39;).setAttribute(&#39;disabled&#39;, true);
document.querySelector(&#39;.favicon-no&#39;).removeAttribute(&#39;disabled&#39;);
</code></pre>

<p>実際にはうまくいかないので、普通にJavaScriptでリソースURLを管理してやる必要がある。どうしてもリソースの管理をJavaScriptで行いたくないのなら<code>rel</code>属性を書き換えてやるという方法もあるだろう。しかし<code>disabled</code>属性のようなそのものずばりな属性を操作するより非直感的な嫌いがあるので、他人にはわかりづらいコードになるかもしれない。</p>]]></content:encoded>
    </item>
    <item>
      <title>src属性のないimg要素と擬似要素</title>
      <link>http://hail2u.net/blog/webdesign/img-element-without-src-attribute-and-pseudo-element.html</link>
      <description>img要素は置換要素なので、現在の安定仕様では明記されてはいないものの歴史的な事情により::before/::after擬似要素による挿入は行えない。しかしChrome 41で遊んだところ、src属性がない場合は挿入することができるようだ。Internet Explorer 11やFirefox 36、Mobile Safari 8では行えない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/img-element-without-src-attribute-and-pseudo-element.html</guid>
      <pubDate>Sat, 28 Mar 2015 02:10:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><code>img</code>要素は置換要素なので、現在の安定仕様では明記されてはいないものの歴史的な事情により<code>::before</code>/<code>::after</code>擬似要素による挿入は行えない。しかしChrome 41で遊んだところ、<code>src</code>属性がない場合は挿入することができるようだ。Internet Explorer 11やFirefox 36、Mobile Safari 8では行えない。</p>

<p>View Demo: <a href="/pub/test/618.html">img element w/o src attribute and pseudo element</a></p>

<p>Chrome 41では<code>alt</code>属性の値である“img without src”という文字列の前に<code>::before</code>擬似要素で仕込んだ“pseudo element for img!”という文字列が挿入されていることがわかる。Chrome 43でも同様だった。</p>

<p><code>src</code>属性がないと<code>img</code>要素がパース・エラーで不明な要素にでもなるのかなと想像したが、<code>alt</code>属性がちゃんと展開されているのでそうではなさそうだ。<code>alt</code>属性が展開されるようなケースが特別扱いされているということなのだろうか。</p>

<hr>

<p>イシューを立てようかと思ったのだけど、仕様上は挿入してはならないことにはなっておらず、立てづらかったため保留した。CSS 2.1では「<a href="http://www.w3.org/TR/CSS2/generate.html#before-after-content">将来的には決めるつもりだけど、まだ決まってない</a>」となっている。それを決めるはずの<a href="http://www.w3.org/TR/2003/WD-css3-content-20030514/#replacedContent">CSS3 Generated and Replaced Content ModuleのReplaced contentの項</a>では<code>::outside::before</code>等を使えということになっているが2003年のWorking Draftで根拠にはしづらい。</p>

<p>意図的に行わないと再現しそうにないため、誤爆するということもなさそうなので、ここに記録するに留めておこう。</p>]]></content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Mon, 06 Apr 2015 14:19:00 +0900</lastBuildDate>
  </channel>
</rss>
