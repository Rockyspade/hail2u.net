<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <copyright>Copyright © 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>CSSライブラリーはそのままでどうぞ</title>
      <link>http://hail2u.net/blog/webdesign/dont-process-css-libraries.html</link>
      <description>Normalize.cssを始めとして、Twitter BootstrapやPureに至るまでCSSのライブラリーは数多くある。それらはそれなりに気をつけて作られているが、他のライブラリーと混ぜることはもとより、ページ制作者のCSSと混ぜることは想定されていない。単純にlink要素を使って先に読ませるか連結するだけで使わないと、開発者はもちろんそれらが使われているページのユーザーにも意図しない不具合が起きる可能性がある。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/dont-process-css-libraries.html</guid>
      <pubDate>Thu, 30 Oct 2014 08:33:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://necolas.github.io/normalize.css/"&gt;Normalize.css&lt;/a&gt;を始めとして、&lt;a href="http://getbootstrap.com/"&gt;Twitter Bootstrap&lt;/a&gt;や&lt;a href="http://purecss.io/"&gt;Pure&lt;/a&gt;に至るまでCSSのライブラリーは数多くある。それらはそれなりに気をつけて作られているが、他のライブラリーと混ぜることはもとより、ページ制作者のCSSと混ぜることは想定されていない。単純に&lt;code&gt;link&lt;/code&gt;要素を使って先に読ませるか連結するだけで使わないと、開発者はもちろんそれらが使われているページのユーザーにも意図しない不具合が起きる可能性がある。&lt;/p&gt;

&lt;p&gt;そのためNomralize.cssなどではわざわざ以下のように推奨されている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;p&gt;It is recommended that you include the normalize.css file as &lt;mark&gt;untouched library code&lt;/mark&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figcaption&gt;normalize.css v3 - &lt;cite&gt;&lt;a href="https://github.com/necolas/normalize.css#install"&gt;Install&lt;/a&gt;&lt;/cite&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;概ねライブラリーと呼ばれるものには手を付けるべきではないが、フロントエンド界隈では軽視されている傾向があるように思う。特にCSSにおいては何よりもまずルールセットの記述順が重要になるため、不可逆な変更を行う最適化ツールはCSSライブラリーと相性は良くない。公式に配布されている最小化済みのものそのまま何もせず使うのが確実だ。&lt;/p&gt;

&lt;p&gt;ただ最近は様々な最適化・最小化ツールやそれらを効率的に扱えるビルド・ツールがあるため、公式には最小化済みのものが配布されていないこともある。その場合の判断は難しいが、安全第一なら最小化されてないものをそのまま、バランスをとるなら別個に最小化のみ行いそれを使うのが良いだろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Gruntやgulpのようなビルド・ツールを使う場合は以下のような順序で処理するようにするべきだろう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;自身のCSS群を連結&lt;/li&gt;
&lt;li&gt;最適化&lt;/li&gt;
&lt;li&gt;最小化&lt;/li&gt;
&lt;li&gt;&lt;em&gt;配布されている最小化済みのライブラリーのCSS&lt;/em&gt;と手順3で最小化した自身のCSSを連結&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;手順1はSassなどで行っても構わないだろう。手順2の最適化にはCSSスプライトの生成ツールや&lt;a href="https://github.com/giakki/uncss"&gt;UnCSS&lt;/a&gt;のような非可逆なツールでの作業が含まれ、手順3では可逆に近い安全な変換作業を行う。ここで自身で書いたCSSを一旦完成させ、最後にCSSライブラリー群と連結させるという形だ。&lt;/p&gt;

&lt;p&gt;このようなやり方だと開発中(手順1の辺り)ではCSSライブラリーが含まれない状態になるが、開発中にはパフォーマンスに目をつぶって&lt;code&gt;link&lt;/code&gt;要素などでCSSライブラリーを読みこめば良い。パフォーマンスに類する問題は別に計測と解決を行うべきと考えられるので、大きな問題は起こらないはずだ。&lt;/p&gt;

&lt;p&gt;このような形でビルドすることのメリットはCSSライブラリーが配布された状態そのままであることが保証されることが挙げられ、それが全てと言って良い。他にライセンスが書かれたコメントを確実に残すことができるというような副次的なメリットもある。ビルド時間も少し速くなるが、それはプロダクションのファイルが少し大きめになりやすいことと相殺される程度のメリットで、特筆するべきようなことではないだろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕の作っている&lt;a href="https://github.com/hail2u/normalize.scss"&gt;Modularized Normalize.css&lt;/a&gt;はページ制作者のCSSに混ぜ込むことを目的としたものなので、このあたりの主張と対立するものだ。が、これについては少し目的が違う。そのうち書くような気がするかもしれないこともない。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>grunt.verbose.log</title>
      <link>http://hail2u.net/blog/coding/grunt-verbose-log.html</link>
      <description>最近、多くの公式Gruntプラグインでログの出力が変わった(メンテナーによって違う)。正常に動作した時は何も出さず、エラーがあった時にのみエラー・メッセージを出すという形。ただし--verboseオプションを付けた場合には何をやったのかを確認できるようにgrunt.verbose.logを使うようになっている。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/grunt-verbose-log.html</guid>
      <pubDate>Wed, 29 Oct 2014 08:27:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;最近、多くの公式Gruntプラグインでログの出力が変わった(メンテナーによって違う)。正常に動作した時は何も出さず、エラーがあった時にのみエラー・メッセージを出すという形。ただし&lt;code&gt;--verbose&lt;/code&gt;オプションを付けた場合には何をやったのかを確認できるように&lt;code&gt;grunt.verbose.log&lt;/code&gt;を使うようになっている。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grunt.verbose.log&lt;/code&gt;は&lt;code&gt;grunt.log&lt;/code&gt;と同じなので、置換するだけで既存のGruntタスクの書き直しは終わり。書く側としてはログを綺麗に整形して色を付けて……などとしなくてよくなり、メッセージの簡略化(スタック・トレースで出てきそうな部分は省略できる)やcolorsやchalkへの依存の削除が可能になると思う。&lt;/p&gt;

&lt;p&gt;なぜこうなったのか経緯がよくわからないけれど、Gruntの次期バージョンではこの辺りの制御をユーザー側に任せるようにしたいというような議論があって、それを意識して既存の機能で先取りした形になっているみたいだ。&lt;code&gt;grunt.verbose.log&lt;/code&gt;でうまく先取りできているか、は大いに疑問がある。&lt;/p&gt;

&lt;p&gt;ログの表示をユーザーに制御させるのは良いと思うけど、デフォルトでまったく何も表示しないというのは良くないと思う。&lt;code&gt;--quiet&lt;/code&gt;と無指定と&lt;code&gt;--verbose&lt;/code&gt;の3種類の方がわかりやすいはずだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕も自分のGruntタスクやオレオレGruntタスクで消してみたけど、やっぱり正常系のログもあった方が安心すると感じた。戻そう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>GitHub PagesとContent-Typeヘッダー</title>
      <link>http://hail2u.net/blog/internet/github-pages-and-content-type-header.html</link>
      <description>GitHub Pagesでは未知のファイルはapplication/octet-streamで配信される。未知のファイルとは未知の拡張子を持つファイルと拡張子を持たないファイルの二つに分けられる。例えばこのウェブサイトのRSSフィードは拡張子なしのfeedというファイルのため、適切なContent-Type (application/rss+xml)で配信されていない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/github-pages-and-content-type-header.html</guid>
      <pubDate>Tue, 28 Oct 2014 08:58:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;GitHub Pagesでは未知のファイルは&lt;code&gt;application/octet-stream&lt;/code&gt;で配信される。未知のファイルとは未知の拡張子を持つファイルと拡張子を持たないファイルの二つに分けられる。例えばこのウェブサイトのRSSフィードは拡張子なしの&lt;code&gt;feed&lt;/code&gt;というファイルのため、適切なContent-Type (&lt;code&gt;application/rss+xml&lt;/code&gt;)で配信されていない。&lt;/p&gt;

&lt;p&gt;Content-Typeの制御はファイルの拡張子でのみ行うことにGitHub Pagesではなっている。RSSならば&lt;code&gt;.rss&lt;/code&gt;、Atomなら&lt;code&gt;.atom&lt;/code&gt;という拡張子である必要があるということだ。バックエンド(&lt;a href="https://www.fastly.com/"&gt;Fastly&lt;/a&gt;？)でそうなっているためな気がするが、ちょっと不自由なところがある。&lt;/p&gt;

&lt;p&gt;ごく一部のRSSリーダーは適切なContent-Typeが返ってこない場合に購読できなかったり新着が読めなくなったりするようだ。Content-Typeを無視しろとまでは思わないが、せめて&lt;code&gt;application/octet-stream&lt;/code&gt;は解釈を試みて欲しいと思う。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;今のところURLを維持したまま直す方法がないのでこのままにしておく。Content-Type以外にもCache-Controlといったパフォーマンスに直結するヘッダーも変更したいと感じることも多く、ホスティング自体は静的ファイルのみだが、&lt;code&gt;.htaccess&lt;/code&gt;的なものは使えるレンタル・サーバーが欲しいなという気持ちが強まってきた。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>aspect-ratio特性</title>
      <link>http://hail2u.net/blog/webdesign/aspect-ratio-feature.html</link>
      <description>ビューポートが16:9以上かどうかの判定にaspect-ratioを使って行おうとしていた。が、min-aspect-ratio: 16/9でうまく動かず、もしや未実装かとあーでもないこーでもないと色々やってたら、単にmax-aspect-ratioでやるべきなだけだった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/aspect-ratio-feature.html</guid>
      <pubDate>Mon, 27 Oct 2014 05:15:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ビューポートが16:9以上かどうかの判定に&lt;code&gt;aspect-ratio&lt;/code&gt;を使って行おうとしていた。が、&lt;code&gt;min-aspect-ratio: 16/9&lt;/code&gt;でうまく動かず、もしや未実装かとあーでもないこーでもないと色々やってたら、単に&lt;code&gt;max-aspect-ratio&lt;/code&gt;でやるべきなだけだった。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="http://hail2u.net/pub/test/599.html"&gt;Detect viewport ratio is 16:9+ or not&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aspect-ratio&lt;/code&gt;特性では&lt;a href="http://www.w3.org/TR/css3-mediaqueries/#values"&gt;&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;という種類の値&lt;/a&gt;で指定する。この&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;は&lt;code&gt;正の整数/正の整数&lt;/code&gt;でしか書くことができない。しかし、&lt;code&gt;min-&lt;/code&gt;か&lt;code&gt;max-&lt;/code&gt;プリフィックスをつける場合、比率として少数化した値で扱われる。そのため16:9より縦の比率が大きい16:10や16:12にマッチさせたい場合は、&lt;code&gt;max-&lt;/code&gt;プリフィックスを使う必要がある。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aspect-ratio&lt;/code&gt;特性を使ったメディア・クエリーの式は縦幅を分母とした分数で記述し、プリフィックスはそれを少数に変換して考える。こう覚えておくと良さそう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;16:9&lt;em&gt;以上&lt;/em&gt;という考え方自体が間違っているのかもしれない。縦横比は横幅が基準という印象を持っていて、それに従うと&lt;em&gt;以上&lt;/em&gt;で良いと思っていた。けれども縦幅が分母、つまり基準になるこのようなケースもあるようだ。&lt;/p&gt;

&lt;p&gt;またこの調査の過程で&lt;code&gt;min-height: 56.25vw&lt;/code&gt;とかでも良いんじゃないかと考え、試したのもデモに載せておいた。&lt;code&gt;56.25vw&lt;/code&gt;は&lt;code&gt;100vw / 16 * 9&lt;/code&gt;で計算した答えで、ビューポートの横幅が&lt;code&gt;100vw&lt;/code&gt;で参照できることを利用してる。けれどもFirefox 33と35では動いたものの、Chrome 38 (と40)やInternet Explorer 11 (と12)では動かなかった。これら動かないブラウザーでは、どうも&lt;code&gt;vw&lt;/code&gt;単位そのものがメディア・クエリーの式では扱えないみたいだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>靴擦れとキズパワーパッド</title>
      <link>http://hail2u.net/blog/misc/shoe-sore-and-band-aid-active-flex.html</link>
      <description>新しい靴を買っておろしたら、10数年ぶりくらいに靴擦れになった。踵とかではなくて右の薬指の上。指にできたのは記憶になくて、こんなところにもできるんだ……という感じだった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/shoe-sore-and-band-aid-active-flex.html</guid>
      <pubDate>Sun, 26 Oct 2014 03:39:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;新しい靴を買っておろしたら、10数年ぶりくらいに靴擦れになった。踵とかではなくて右の薬指の上。指にできたのは記憶になくて、こんなところにもできるんだ……という感じだった。&lt;/p&gt;

&lt;p&gt;で、数年ぶりに絆創膏的なものを貼ろうとしたら&lt;a href="http://www.amazon.co.jp/gp/product/B000FQNKKQ/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B000FQNKKQ&amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;BAND-AIDのキズパワーパッド&lt;/a&gt;のストックがあったので初めて使った。すごいっていうのは聞いていたんだけど、普通の絆創膏からの進化っぷりが想像以上にすごくて驚いた。密着性がものすごい上に完全防水なので、風呂でも貼りっぱなしで済んだのはすごく良かった。治るまでこのままでよさそう。&lt;/p&gt;

&lt;p&gt;靴擦れ用というものもあるみたいなので、踵とかにできたら買ってみよう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Clean CSSと@importのインライン展開</title>
      <link>http://hail2u.net/blog/webdesign/processing-at-import-directive-with-clean-css.html</link>
      <description>最近のClean CSSには@importで参照しているCSSを読み込んでインライン展開する機能がある。この機能を使うとGitやBowerを使ってNormalize.cssやTwitter Bootstrapをローカルにダウンロードし(、リネームし)ておいて……などとしなくて済むので、CSSライブラリーの管理の手間がだいぶ減る。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/processing-at-import-directive-with-clean-css.html</guid>
      <pubDate>Sat, 25 Oct 2014 08:23:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;最近の&lt;a href="https://github.com/jakubpawlowicz/clean-css"&gt;Clean CSS&lt;/a&gt;には&lt;code&gt;@import&lt;/code&gt;で参照しているCSSを読み込んでインライン展開する機能がある。この機能を使うとGitや&lt;a href="http://bower.io/"&gt;Bower&lt;/a&gt;を使って&lt;a href="http://necolas.github.io/normalize.css/"&gt;Normalize.css&lt;/a&gt;や&lt;a href="http://getbootstrap.com/"&gt;Twitter Bootstrap&lt;/a&gt;をローカルにダウンロードし(、リネームし)ておいて……などとしなくて済むので、CSSライブラリーの管理の手間がだいぶ減る。&lt;/p&gt;

&lt;p&gt;デフォルトで有効になっているので、普通に書くだけで展開される。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import url(&amp;#39;http://necolas.github.io/normalize.css/latest/normalize.css&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*! normalize.css v3.0.2 | MIT License | git.io/normalize */html{...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と展開され、更に圧縮される。Normalize.cssのように最新版を参照するURLが用意されていれば、バージョンの管理も不要になる。&lt;/p&gt;

&lt;p&gt;Clean CSSには他に相対パスを解決する仕組みなども用意されているので、CSSにおける静的リソースのほぼ全てをうまいこと管理できるようになっている。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ただし&lt;code&gt;//&lt;/code&gt;で始まるURLでCSSを参照すると例外を吐いて落ちるバグがあったり、すべての&lt;code&gt;@import&lt;/code&gt;ディレクティブが処理されることには注意が必要かも。前者は致命的っぽいけどWindows限定のような気もする(ドライブレター！)。後者は処理して欲しくない&lt;code&gt;@import&lt;/code&gt;ディレクティブが必要なことは稀なので、あまりハマらない。&lt;/p&gt;

&lt;p&gt;処理して欲しくない&lt;code&gt;@import&lt;/code&gt;ディレクティブというのは、例えばUAで振り分けて返すCSSを変えているようなURLを参照しているケース。具体的には&lt;a href="http://www.google.com/fonts"&gt;Google Fonts&lt;/a&gt;のCSSとか。最近のChromeに対してはたまにWOFF2も参照するCSSを返したり、古いブラウザーに対しては忘れた方が良さそうなフォーマットを参照するCSSを返す。Clean CSSに対してはTTFを参照するCSSを返してしまう。&lt;/p&gt;

&lt;p&gt;このような些細な問題はあるけど、ライブラリー管理にBower等を使ってディレクトリーやファイルのレイアウトに四苦八苦するくらいならClean CSSをうまく使ってやった方が良い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>無意味なアイキャッチ画像</title>
      <link>http://hail2u.net/blog/webdesign/meaningless-eyecatch.html</link>
      <description>ここのところ、このウェブログの記事にアイキャッチ画像があることが多い。そんな中、大きな画像がファースト・ビューにあることについてのツイートを見て、確かに大きな画像のおかげで読みたくなくなることもあるなと考えさせられた。このウェブログでも少なくとも無意味な(昨日の記事のような)アイキャッチ画像は止めようと決めた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/meaningless-eyecatch.html</guid>
      <pubDate>Fri, 24 Oct 2014 02:13:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ここのところ、このウェブログの記事にアイキャッチ画像があることが多い。そんな中、&lt;a href="https://twitter.com/aereal/status/525129759718531072"&gt;大きな画像がファースト・ビューにあることについてのツイート&lt;/a&gt;を見て、確かに大きな画像のおかげで読みたくなくなることもあるなと考えさせられた。このウェブログでも少なくとも無意味な(昨日の記事のような)アイキャッチ画像は止めようと決めた。&lt;/p&gt;

&lt;p&gt;タイトルの繰り返しになるような無意味と言えるアイキャッチ画像をわざわざ作って追加していたのは、CSSでタイトルと画像を摩り替えて表示しようとかいう思惑があったように思う。でも実際には対応していないので、無意味になっていた。&lt;/p&gt;

&lt;p&gt;増やしたきっかけはリンクや引用が主のライトな記事をここにも書くようになったことだ。その時に本文からのみリンクを張るよりも、画像を作成して大きくリンクを張った方がわかりやすいだろうとして画像を作るようになり、それが他の記事にも波及してしまった。そういったライトな記事での画像はアイキャッチではなくリンクのためなので、一定の意味があるように思う。&lt;/p&gt;

&lt;p&gt;もうちょっと考えて画像作るようにしよう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ところで、アイキャッチ画像の狙いはコンテンツを続けて読んでもらうことなので、アイキャッチ画像によりユーザーの滞在時間が長くなっていれば効果があると言えそうだ。このウェブログでの効果を10記事ずつを使って調べてみることにする。&lt;/p&gt;
&lt;figure&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;アイキャッチ画像&lt;/th&gt;
        &lt;th&gt;平均滞在時間&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;あり&lt;/th&gt;
        &lt;td align="right"&gt;&lt;time&gt;02:48.5&lt;/time&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;なし&lt;/th&gt;
        &lt;td align="right"&gt;&lt;time&gt;03:32.2&lt;/time&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;figcaption&gt;Google Analyticsによる10記事ずつの調査&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;画像がない記事の方が26%ほど、秒数にしておよそ43.7秒長く滞在しているようだ。差がないことくらいは覚悟していたけれども、これくらい差が出るとは思っていなかった。技術的な話題によっていることもあり、調査数を増やす(より過去の記事も対象にする)とユーザーに偏りが出るのでもっと差が出そうだ。&lt;/p&gt;

&lt;p&gt;画像のあるなしは記事の内容にも左右されているので一概には言えないが、このウェブログではアイキャッチ画像の効果は高くない、むしろマイナスという結論になりそうだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>コンテンツの責任</title>
      <link>http://hail2u.net/blog/blog/responsibility-of-contents.html</link>
      <description>POSSEのようなやり方は主にコンテンツの所有権を明確に自分に帰属させようという目的を持って選択される。所有権の明確化は、同時にコンテンツの責任が自分にあることも明確にされることでもある。逆に言うとPOSSEのようなやり方が流行らないのは、そういった責任を放棄したいと考えている人が多いからなのかもしれない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Blog</category>
      <guid isPermaLink="true">http://hail2u.net/blog/blog/responsibility-of-contents.html</guid>
      <pubDate>Thu, 23 Oct 2014 04:17:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="Responsibility of Contents" src="http://hail2u.net/images/blog/responsibility-of-contents.png"&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://indiewebcamp.com/POSSE"&gt;POSSE&lt;/a&gt;のようなやり方は主にコンテンツの所有権を明確に自分に帰属させようという目的を持って選択される。所有権の明確化は、同時にコンテンツの責任が自分にあることも明確にされることでもある。逆に言うとPOSSEのようなやり方が流行らないのは、そういった責任を放棄したいと考えている人が多いからなのかもしれない。&lt;/p&gt;

&lt;p&gt;コンテンツに対しての責任はその提供者が持つべきものではある。しかし味方よりも敵の方が圧倒的に多いインターネットでは、責任を持つことを前提にするとかなりの覚悟や諦めが必要になる。揚げ足をとられて終わりくらいならまだ良く、大抵の場合は注目されたらどんな羽目に陥るかわかったものではない。&lt;/p&gt;

&lt;p&gt;投稿したコンテンツがすぐに消えたりそのうち消えるようなサービスが人気を誇る理由もこのあたりにあるのではないかと考えている。利用しているユーザーがコンテンツの責任についてどれくらい意識しているかはわからないが、少なくとも公開され続けることによるリスクを負いたくないと思っていても不思議ではない。&lt;/p&gt;

&lt;p&gt;責任がとれそうもないことを投稿・公開することが間違っていると言えばそれは確かにそういう面もある。しかしそれはリスクをまったく負いたくない年寄りの論理と言えるとも思う。違う世代の新しい媒体での行動に、自分の世代の古い媒体での行動基準で否定するのはナンセンスだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;でも僕が半ばPOSSEのようなやり方を通しているのは責任がどうとかではない。フローで流れてしまう場に自分の意見らしきものを投稿するのは、言いっ放しになりやすく好きではないというような理由に過ぎない。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>POSSE: Publish Own Site, Syndicate Elsewhere</title>
      <link>http://hail2u.net/blog/internet/posse.html</link>
      <description>POSSEは「自分のとこで公開して、他のとこへ配信しよう！」というようなやり方。コンテンツの所有権や、サード・パーティーのサービスへの依存度、安定したURLとそれに伴うオリジナルの発見性の高さ、検索性などの点で利点があるとされている。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/posse.html</guid>
      <pubDate>Wed, 22 Oct 2014 03:32:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://indiewebcamp.com/POSSE"&gt;&lt;img alt="Publish Own Site, Syndicate Elsewhere" src="http://hail2u.net/images/blog/posse.png"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://indiewebcamp.com/POSSE"&gt;POSSE&lt;/a&gt;は「自分のとこで公開して、他のとこへ配信しよう！」というようなやり方。コンテンツの所有権や、サード・パーティーのサービスへの依存度、安定したURLとそれに伴うオリジナルの発見性の高さ、検索性などの点で利点があるとされている。&lt;/p&gt;

&lt;p&gt;大体のことはこのウェブサイトのドメインに集約してるので、一部はPOSSEと言って良さそう。ブックマークやTwitterでだらだら書いてるようなのは&lt;a href="http://indiewebcamp.com/PESOS"&gt;PESOS&lt;/a&gt;でやってることになるので、これもPOSSEにしたい。けどブックマークのタグやTwitterのリプライとかの扱いが面倒そうで、これで良いかという感じで妥協している。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Modularized Normalize.scssのテスト</title>
      <link>http://hail2u.net/blog/coding/testing-normalize-scss.html</link>
      <description>Normalize.cssがv3.0.2に更新されていたので、Modularized Normalize.scssも更新した。変更点はmenu要素の追加とIE10でのa要素の背景削除がbackground-colorプロパティーのみに変わったことで、大きな変化はない。で、追随したv3.0.2をリリース後、テストを少し書き換えた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/testing-normalize-scss.html</guid>
      <pubDate>Tue, 21 Oct 2014 04:10:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://github.com/necolas/normalize.css"&gt;Normalize.css&lt;/a&gt;がv3.0.2に更新されていたので、&lt;a href="https://github.com/hail2u/normalize.scss"&gt;Modularized Normalize.scss&lt;/a&gt;も更新した。変更点は&lt;code&gt;menu&lt;/code&gt;要素の追加とIE10での&lt;code&gt;a&lt;/code&gt;要素の背景削除が&lt;code&gt;background-color&lt;/code&gt;プロパティーのみに変わったことで、大きな変化はない。で、追随したv3.0.2をリリース後、テストを少し書き換えた。&lt;/p&gt;

&lt;p&gt;Modularized Normalize.scssのテストは以下のような単純なものになっている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最新版のNormalize.cssのリリース・ファイルをダウンロード&lt;/li&gt;
  &lt;li&gt;Sassを使ってリポジトリーからビルド&lt;/li&gt;
  &lt;li&gt;両者を圧縮&lt;/li&gt;
  &lt;li&gt;文字列として比較&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これでオリジナルのリリース・ファイルとSassでビルドしたものがCSSとして一致するかを確認している。完全なものではないけど、きちんと動作するものをビルド可能かどうかは確認できる。&lt;/p&gt;

&lt;p&gt;しかし、今までは圧縮する時にいわゆるバナー・コメント(ライセンスなどが書かれている消すべきではないコメント)を残していた。そのためバージョン番号をインクリメントしてからじゃないと、バージョン番号が一致せずテストが通らなかった。リリースを自動化しているのにも関わらず、手作業でバージョン番号を上げてからテストし、また戻すとかいう頭の悪い作業が必要だった。&lt;/p&gt;

&lt;p&gt;よくよく考えたらテストの時だけコメントを全削除すれば良いだけなので、内部で使っている&lt;code&gt;grunt-contrib-cssmin&lt;/code&gt;の&lt;code&gt;options&lt;/code&gt;で&lt;code&gt;keepSpecialComments: 0&lt;/code&gt;にして解決した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cssmin: {
  test: {
    options: {
      keepSpecialComments: 0,
    },

    expand: true,
    filter: &amp;#39;isFile&amp;#39;,
    src: [&amp;#39;tmp/*.css&amp;#39;]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでいつでもちゃんとテストできるようになった。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「rsync-ac (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-rsync-ac</link>
      <pubDate>Mon, 07 Jul 2014 16:30:38 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-rsync-ac</guid>
      <description>&lt;p&gt;rsync-ac (Gruntプラグイン)は&lt;a href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt;を使って他のディレクトリへファイルをコピーするGruntプラグインです。オプション設定を絞ることであまり考えずに使えるようにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「pubsubhubbub_publish (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-pubsubhubbub_publish</link>
      <pubDate>Mon, 07 Jul 2014 00:44:37 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-pubsubhubbub_publish</guid>
      <description>&lt;p&gt;pubsubhubbub_publish (Gruntプラグイン)はGoogleが提供している&lt;a href="https://pubsubhubbub.appspot.com/"&gt;PubSubHubbubハブ&lt;/a&gt;へ指定したURLのフィードを&lt;code&gt;publish&lt;/code&gt;するGruntプラグインです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「Picks」を追加</title>
      <link>http://picks.hail2u.net/</link>
      <pubDate>Sun, 06 Jul 2014 04:48:23 +0900</pubDate>
      <guid isPermaLink="true">http://picks.hail2u.net/</guid>
      <description>&lt;p&gt;Picksは僕が興味をもった様々なURLをアイコンをヒントにざっと眺めることの出来るウェブサイトです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WEB+DB Press Vol.81にて「イマドキHTML/CSS開発」を執筆</title>
      <link>http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</link>
      <pubDate>Thu, 19 Jun 2014 15:31:33 +0900</pubDate>
      <guid isPermaLink="true">http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</guid>
      <description>&lt;p&gt;Web標準技術の進歩やデバイスの多様化といったWebをとりまく環境の急激な変化は、従来のWebサイト開発手法を時代遅れのものとしつつあります。設計から実装・検証、そしてデバイスへの最適化まで、ワークフロー全体の変革が求められているということです。本特集では、現在はもちろん、これからも増大し続ける多様性を見据えてどのような開発手法をとっていくべきかについて、実例を交じえながら詳しく解説していきます。6月24日発売、&lt;a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069"&gt;Amazonにて予約受付中&lt;/a&gt;です！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「UnUTM」を追加</title>
      <link>https://github.com/hail2u/unutm</link>
      <pubDate>Thu, 12 Jun 2014 06:32:16 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/unutm</guid>
      <description>&lt;p&gt;UnUTMはウェブページのURLからGoogle Analyticsなどで利用されているUrchin Traffic Monitor (UTM)用のパラメーターを自動的に削除し、URLの分散を解消するJavaScriptライブラリです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSSWring」を追加</title>
      <link>https://github.com/hail2u/node-csswring</link>
      <pubDate>Fri, 25 Apr 2014 08:19:34 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-csswring</guid>
      <description>&lt;p&gt;CSSWringはCSSを圧縮(minification)するNode.jsパッケージです。Node.jsパッケージとして組み込むだけでなく、コマンドラインからも実行できます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSS MQPacker」を追加</title>
      <link>https://github.com/hail2u/node-css-mqpacker</link>
      <pubDate>Sat, 22 Feb 2014 15:39:04 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-css-mqpacker</guid>
      <description>&lt;p&gt;CSS MQPackerはCSSファイル内に散在するメディアクエリを、クエリごとにまとめCSSファイルを最適化するNode.jsパッケージです。これを利用した&lt;a href="https://github.com/hail2u/grunt-css-mqpacker"&gt;Gruntプラグイン&lt;/a&gt;もあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Thu, 30 Oct 2014 08:33:00 +0900</lastBuildDate>
  </channel>
</rss>