<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <copyright>Copyright © 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>ロボ娘のアーキテクチャ</title>
      <link>http://hail2u.net/blog/media/roboko-no-architecture.html</link>
      <description>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。ロボ娘のアーキテクチャは真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/roboko-no-architecture.html</guid>
      <pubDate>Mon, 15 Dec 2014 08:29:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4812475295&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51VOJEjEU1L.jpg" alt="ロボ娘のアーキテクチャ 　① (バンブーコミックス)"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。&lt;a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4812475295&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;ロボ娘のアーキテクチャ&lt;/a&gt;は真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。&lt;/p&gt;

&lt;p&gt;眼帯が欲しい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;4コマは好きでよく読む。わりと何でも読む。けど二極化して長いので、山東ユカの書くやつみたいなのが増えて三極化して欲しい。いわゆる青年誌とかで連載されてる4コマやショートものみたいなのがこれにあたる。専門誌に連載されてるものと違う、絶妙な暗さみたいなのがあるやつ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Gitで最新のタグをチェックアウト</title>
      <link>http://hail2u.net/blog/software/git-checkout-latest-tag.html</link>
      <description>最新のタグを知りたいことがたまにある。その時はgit describe --tagsで調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、describe --tagsがハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、--abbrev=0を加えると消えることがわかった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/git-checkout-latest-tag.html</guid>
      <pubDate>Sun, 14 Dec 2014 09:21:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;最新のタグを知りたいことがたまにある。その時は&lt;code&gt;git describe --tags&lt;/code&gt;で調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、&lt;code&gt;describe --tags&lt;/code&gt;がハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、&lt;code&gt;--abbrev=0&lt;/code&gt;を加えると消えることがわかった。&lt;/p&gt;

&lt;p&gt;具体的には以下のようなコマンドをターミナルで実行すれば良い。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;git checkout $(git describe --tags &lt;mark&gt;--abbrev=0&lt;/mark&gt;)&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;主に、何かしらをビルドする時のタスクで使っている。事前に最新のタグをチェックアウトさせることによって、常に安定版がデプロイされるように制御することができる。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>MinifyしてからConcat</title>
      <link>http://hail2u.net/blog/webdesign/minify-then-concat.html</link>
      <description>配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は壊れる可能性を否定できないことは意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫をソース・マップを維持することを前提にこのウェブサイトで実験し始めた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/minify-then-concat.html</guid>
      <pubDate>Sat, 13 Dec 2014 07:13:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は&lt;a href="https://github.com/gruntjs/grunt-contrib-copy"&gt;壊れる可能性を否定できないこと&lt;/a&gt;は意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫を&lt;em&gt;ソース・マップを維持すること&lt;/em&gt;を前提にこのウェブサイトで実験し始めた。&lt;/p&gt;

&lt;p&gt;JavaScriptファイルのビルドをGruntでやるとして、最小化についてはソース・マップのサポートは問題ないので、いつも通り&lt;a href="https://github.com/gruntjs/grunt-contrib-copy"&gt;grunt-contrib-copy&lt;/a&gt;と&lt;a href="https://github.com/gruntjs/grunt-contrib-uglify"&gt;grunt-contrib-uglify&lt;/a&gt;を使うことにする。最後に連結する時にソース・マップを維持できるのかというのが最大の問題だったが、7月にソース・マップのサポートが&lt;a href="https://github.com/gruntjs/grunt-contrib-concat"&gt;grunt-contrib-copy&lt;/a&gt;へ入っていたため、結果的にはこれを使うだけで良かった。&lt;/p&gt;

&lt;p&gt;タスクの手順的には以下のようになる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一時ディレクトリーを掃除&lt;/li&gt;
&lt;li&gt;一時ディレクトリーへソースとなるファイルのコピー&lt;ul&gt;
&lt;li&gt;非ライブラリーはそのファイルのみをコピー&lt;/li&gt;
&lt;li&gt;ライブラリーはソース・マップ・ファイルを含めてコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非ライブラリーのファイルのみをソース・マップ付きで最小化&lt;/li&gt;
&lt;li&gt;プロダクションのファイルを連結して作成&lt;/li&gt;
&lt;li&gt;公開ディレクトリーへソース・マップ・ファイルを含めてコピー&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これを踏まえて、Bowerでインストールした&lt;code&gt;lib-a.min.js&lt;/code&gt;と&lt;code&gt;lib-b.min.js&lt;/code&gt;、そして自分で書いた&lt;code&gt;foo.js&lt;/code&gt;と&lt;code&gt;bar.js&lt;/code&gt;を最小化してから連結し、最終的に&lt;code&gt;main.min.js&lt;/code&gt;を作るとする。タスクの設定は以下のようになることだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function (grunt) {
  grunt.initConfig({
    clean: {
      // `tmp/`ディレクトリーを掃除するタスク
      main: {
        src: ['tmp/**/*']
      }
    },

    concat: {
      // 最小化済みのファイルをソース・マップ付きで連結するタスク
      js: {
        options: {
          seperator: &amp;#39;;&amp;#39;,
          sourceMap: true,
          sourceMapStyle: &amp;#39;link&amp;#39;
        },

        files: {
          &amp;#39;tmp/main.min.js&amp;#39;: [
            &amp;#39;tmp/lib-a.min.js&amp;#39;,
            &amp;#39;tmp/lib-b.min.js&amp;#39;,
            &amp;#39;tmp/foo.min.js&amp;#39;,
            &amp;#39;tmp/bar.min.js&amp;#39;
          ]
        }
      }
    },

    copy: {
      // プロダクション向けに公開ディレクトリーへコピーするタスク
      js: {
        cwd: &amp;#39;tmp/&amp;#39;,
        dest: &amp;#39;build/js/&amp;#39;,
        expand: true,
        src: [
          &amp;#39;**/*.js&amp;#39;,
          &amp;#39;**/*.js.map&amp;#39;
        ]
      },

      // 一時ディレクトリーへ必要なファイルをコピーするタスク
      // 最小化済みのライブラリーは元ファイルとソース・マップ・ファイルも
      prejs: {
        files: {
          &amp;#39;tmp/bar.js&amp;#39;: &amp;#39;src/js/bar.js&amp;#39;,
          &amp;#39;tmp/foo.js&amp;#39;: &amp;#39;src/js/foo.js&amp;#39;,
          &amp;#39;tmp/lib-a.js&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-a.js&amp;#39;,
          &amp;#39;tmp/lib-a.min.js&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-a.min.js&amp;#39;,
          &amp;#39;tmp/lib-a.min.js.map&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-a.min.js.map&amp;#39;,
          &amp;#39;tmp/lib-b.js&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-b.js&amp;#39;,
          &amp;#39;tmp/lib-b.min.js&amp;#39;: &amp;#39;bower_component/lib-b/dist/lib-b.min.js&amp;#39;,
          &amp;#39;tmp/lib-b.min.js.map&amp;#39;: &amp;#39;bower_component/lib-b/dist/lib-b.min.js.map&amp;#39;
        }
      }
    },

    uglify: {
      options: {
        preserveComments: &amp;#39;some&amp;#39;,
        sourceMap: true
      },

      // まだ最小化されていないファイルをソース・マップ付きで最小化するタスク
      main: {
        cwd: &amp;#39;tmp/&amp;#39;,
        dest: &amp;#39;tmp/&amp;#39;,
        expand: true,
        ext: &amp;#39;.min.js&amp;#39;,
        src: [
          &amp;#39;**/*.js&amp;#39;,
          &amp;#39;!**/*.min.js&amp;#39;
        ]
      }
    }
  });

  grunt.loadNpmTasks(&amp;#39;grunt-contrib-clean&amp;#39;);
  grunt.loadNpmTasks(&amp;#39;grunt-contrib-copy&amp;#39;);
  grunt.loadNpmTasks(&amp;#39;grunt-contrib-concat&amp;#39;);
  grunt.loadNpmTasks(&amp;#39;grunt-contrib-uglify&amp;#39;);

  grunt.registerTask(&amp;#39;build:js&amp;#39;, [
    &amp;#39;clean&amp;#39;,
    &amp;#39;copy:prejs&amp;#39;,
    &amp;#39;uglify&amp;#39;,
    &amp;#39;concat:js&amp;#39;,
    &amp;#39;copy:js&amp;#39;
  ]);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;concat:js&lt;/code&gt;と&lt;code&gt;copy:prejs&lt;/code&gt;以外はほぼポータブルなタスク設定になっている。これで&lt;code&gt;grunt build:js&lt;/code&gt;と実行すると、最終的に&lt;code&gt;build/js/&lt;/code&gt;ディレクトリーへ以下のようにファイルが作成される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;bar.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;bar.min.js&lt;/li&gt;
&lt;li&gt;bar.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;foo.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;foo.min.js&lt;/li&gt;
&lt;li&gt;foo.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;lib-a.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;lib-a.min.js&lt;/li&gt;
&lt;li&gt;lib-a.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;lib-b.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;lib-b.min.js&lt;/li&gt;
&lt;li&gt;lib-b.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;main.min.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;main.min.js.map&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中間のソース・マップ・ファイルはちゃんとまとめられているので、実際にはマークされているファイルだけあれば良い。しかし設定が汎用性のない複雑なものになってしまうので、全部コピーしておく方が面倒がないだろう。そうでなければソース・マップ・ファイルへ&lt;code&gt;sourcesContent&lt;/code&gt;で元ソースを含めてしまうのが良い。この辺りはもうちょっと運用しないとどうするのが最良なのかは見えてこなさそうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;欠点はあまりない。最小化後に連結するという観点の考察がウェブにはまだないので手探りでやることになるのが一番の壁だろう。取るに足りないとは思うが、最終ファイルが数バイトから数十バイト増えることは挙げておく。&lt;/p&gt;

&lt;p&gt;利点としては、ライブラリーのライセンスや著作権者情報など消すべきでないものが確実に残ることと、ライブラリーが動作が確認されている状態のままで連結されることが挙げられる。消すべきでないものが残るということは、つまりビルド・タスク側でいわゆるバナーなどと呼ばれている先頭のコメントのことを考えなくて良いということでもある。&lt;/p&gt;

&lt;p&gt;欠点と比較する限り、得られるものは大きいと言える。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>InkscapeのCLIを利用してSVGからPNGへ変換</title>
      <link>http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</link>
      <description>InkscapeにはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけどSVG Advent Calendar 2014の12日目の記事ということにしておこう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</guid>
      <pubDate>Fri, 12 Dec 2014 02:52:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt;にはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけど&lt;a href="http://www.adventar.org/calendars/366"&gt;SVG Advent Calendar 2014&lt;/a&gt;の12日目の記事ということにしておこう。&lt;/p&gt;

&lt;p&gt;例えば&lt;code&gt;in.svg&lt;/code&gt;を幅256ピクセルのPNGファイルとして&lt;code&gt;out.png&lt;/code&gt;に変換したいとする。Inkscapeの実行ファイルのディレクトリーへパスが通っているとすると、以下のようなオプションで実行すれば変換される。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;inkscape --without-gui --export-width=256 --file=in.svg --export-png=out.png&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--without-gui&lt;/code&gt;でGUIの起動を無効にし、&lt;code&gt;--export-width&lt;/code&gt;で幅を(高さはアスペクト比を維持してくれる)、&lt;code&gt;--file&lt;/code&gt;で変換元のSVGファイルを、そして&lt;code&gt;--export-png&lt;/code&gt;で変換先のPNGファイル名を指定する。複数ファイルの変換などについては無理なようだが、実用上はあまり問題ないようにも思える。Inkscape v0.91-pre.3できちんと変換できることを確認した。&lt;/p&gt;

&lt;p&gt;Windows版では&lt;code&gt;inkscape.exe&lt;/code&gt;にはCLIがないが、同じ場所にある&lt;code&gt;inkscape.com&lt;/code&gt;がコマンド・プロンプト用の実行ファイルになっているので、パスさえ通せばこのままでちゃんと使える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;自動化目的だったので&lt;a href="http://hail2u.net/pub/grunt-svg2png.js"&gt;svg2pngという名前のGruntタスク&lt;/a&gt;を書いてみたりもした(使い始めた)。もっと雑に一対多で変換できるような設定を書けると良さそう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ららぽーと</title>
      <link>http://hail2u.net/blog/misc/lalaport.html</link>
      <description>来年10月くらいにオープンするらしいららぽーとは順調に工事が進んでいるらしく、ほぼ建物の外観は見えてきた。駅からは私鉄側からも屋根付きのペドウェイでまっすぐいけるようだ。これも半分くらいもうできてる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/lalaport.html</guid>
      <pubDate>Thu, 11 Dec 2014 07:33:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="巨大クレーン3台で建築が進むららぽーとの様子" src="http://hail2u.net/images/blog/lalaport.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;来年10月くらいにオープンするらしい&lt;a href="http://www.mitsuifudosan.co.jp/corporate/news/2014/0605_01/"&gt;ららぽーと&lt;/a&gt;は順調に工事が進んでいるらしく、ほぼ建物の外観は見えてきた。駅からは私鉄側からも屋根付きのペドウェイでまっすぐいけるようだ。これも半分くらいもうできてる。&lt;/p&gt;

&lt;p&gt;この大規模商業施設自体には思うところはあまりない(期待はしてる)のだけど、交通環境が激変しそうなことが不安だ。電車か、圏央道から246へ降り相模川を渡って……というメインのアクセスはともかく、問題は市内南部など246側でない方からのアクセスだ。実は駅周辺には車で線路(3つある)を渡る道路がない。東か西に大きく回りこまないと渡ることができない。&lt;/p&gt;

&lt;p&gt;そして、なかなか開発が進むことのなかった駅なので、周辺の道路はとても幅が狭い。それでも西側はそこそこ広いが、東側は4tトラックがすれ違えるか怪しいような道路ばかりだ。歩道もほとんどなく、もしここの交通量が増えたら恐ろしそうだと強く感じる。&lt;/p&gt;

&lt;p&gt;商業施設の周辺道路も整備されているが、どれもあまり広くなく、かといって歩道が広いとか自転車専用レーンがあるとかでもない。素人考えでは捌けなさそうな気がするがそうでもないのだろうか。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;市立図書館も一時閉館し、TSUTAYAプロデュースのスタバ付きへ退化する作業が始まった。これも来年オープンだそうだ。これら今開発されている地域は耕作放棄されたコスモス畑か田んぼしかなかったので、まったく思い入れはない。にも関わらず急激に変わり始めててちょっとついていけないなどと年寄り臭いことを思った。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>風呂の床</title>
      <link>http://hail2u.net/blog/misc/bathroom-floor.html</link>
      <description>タイルだった風呂の床が、分厚い断熱層にアクリル・コーティングされたFRPが重ねられた床に変わった。うちのは石目ホワイトグレー。暖かい……のは全体的に断熱する仕組みになった(+ 暖房が付いた)からではあるんだけど、やはりタイルは冷たかったと思う。みんなの床 Advent Calendarの10日目。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/bathroom-floor.html</guid>
      <pubDate>Wed, 10 Dec 2014 04:09:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="アクリル・コーティングされた断熱床材" src="http://hail2u.net/images/blog/bathroom-floor.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;タイルだった風呂の床が、&lt;a href="http://www.noritz.co.jp/product/bathroom/riz/color03.html"&gt;分厚い断熱層にアクリル・コーティングされたFRPが重ねられた床&lt;/a&gt;に変わった。うちのは石目ホワイトグレー。暖かい……のは全体的に断熱する仕組みになった(+ 暖房が付いた)からではあるんだけど、やはりタイルは冷たかったと思う。&lt;a href="http://www.adventar.org/calendars/539"&gt;みんなの床 Advent Calendar&lt;/a&gt;の10日目。&lt;/p&gt;

&lt;p&gt;老いさらばえかけたおっさんなのでタイルより滑りにくいのはすごい安心。表面に弾力はないけれど、断熱材の方が柔らかいので万一滑ってもある程度はショックを吸収してくれる模様。&lt;/p&gt;

&lt;p&gt;アクリルのコーティングは硬度8Hと謳われていて、余程のものを落とさない限りは傷つくことはまずないという。8Hとか言われると反射的にスマホの液晶フィルムを思い出してそこそこ割れそうな感じがしたけど、落とす方じゃないから大丈夫みたいだ。&lt;/p&gt;

&lt;p&gt;やはり傷がつかないというのは掃除の点で非常に魅力的。CMで浴室のカビをきれいにとか何十年にも渡って放映されていることからもわかるけど、風呂のカビと戦うのはなかなかの忍耐と根性が必要。そのあたりから解放されることに！石目で汚れが目立たたないところは良し悪し。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;こういう機能性の高いものはハイエンドが存在して一般に降りてくるものと思ってたんだけど、超高級マンションなどの広い風呂場用にはこういった床はおろか、壁もあまり存在しないらしい。そういうところではほぼタイル一択になり、掃除で死ぬという話。狭い風呂で良かった。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>HTMLの属性を書く順序</title>
      <link>http://hail2u.net/blog/webdesign/html-attribute-order.html</link>
      <description>CSSの定義をアルファベット順にした後、HTMLの属性を書く順序についてずっと考えていた。アルファベット順だとわかりやすいが、非常に読み解きづらくなる。そういった点での読みやすさだけでなく、必須属性を書き忘れないようにもできたら良いのかなと色々考えている。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/html-attribute-order.html</guid>
      <pubDate>Tue, 09 Dec 2014 02:49:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://hail2u.net/blog/webdesign/i-changed-my-mind-in-2014.html"&gt;CSSの定義をアルファベット順に&lt;/a&gt;した後、HTMLの属性を書く順序についてずっと考えていた。アルファベット順だとわかりやすいが、非常に読み解きづらくなる。そういった点での読みやすさだけでなく、必須属性を書き忘れないようにもできたら良いのかなと色々考えている。&lt;/p&gt;

&lt;p&gt;今のところ以下のような順序が良さそうだと感じている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;他属性をアルファベット順で&lt;/li&gt;
&lt;li&gt;WAI-ARIA (&lt;code&gt;role&lt;/code&gt;属性と&lt;code&gt;aria-*&lt;/code&gt;属性)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-*&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;Microdata (&lt;code&gt;item*&lt;/code&gt;属性)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;id&lt;/code&gt;属性と&lt;code&gt;class&lt;/code&gt;属性を先頭にするのはCSSとの兼ね合いで、これらだけ知りたいというケースが多いからだ。使われることが多い&lt;code&gt;class&lt;/code&gt;が前の方が効率的だろうと思われるが、一意に確定される&lt;code&gt;id&lt;/code&gt;の強さを先頭にすることで表現したい。&lt;code&gt;style&lt;/code&gt;属性を使うなら&lt;code&gt;class&lt;/code&gt;と離して書くのは良くなさそうなのでこれらに続けて書く。できる限り使わない方が良いのは言うまでもない。&lt;/p&gt;

&lt;p&gt;続けて普通の属性をアルファベット順で書くようにする。必須属性の位置が安定しないため、書き忘れを防げないようだが、必須かどうか自体が安定していない。そこで全体的な順序をアルファベット順に固定することで、必須属性が欠けている時に違和感が生じるように、という考えでこうした。&lt;/p&gt;

&lt;p&gt;さらにHTML要素の振る舞いを変更または最適化することになるWAI-ARIAの属性を書いていき、最後に補完的な意味合いの強い&lt;code&gt;data-*&lt;/code&gt;属性とMicrodataを追加する。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;条件が多すぎるので他の人が受け入れられるようなものではなさそうだ。アルファベット順、ただし&lt;code&gt;class&lt;/code&gt;属性だけ先頭にするという辺りが落とし所として無難に思える。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>TKGを食べた</title>
      <link>http://hail2u.net/blog/misc/tkg-20141208.html</link>
      <description>かき混ぜてからかける派、かけたあとは混ぜない組。醤油は気分。茶碗よりも丼でやりたい。というよりも卵をご飯にかけるという所業を結構大きくなってから吉野家の牛丼で覚えたので、かき混ぜてからかけるし丼でやる。TKG Advent Calendar 2014ももう8日目か。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/tkg-20141208.html</guid>
      <pubDate>Sun, 07 Dec 2014 23:58:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img src="http://hail2u.net/images/blog/tkg-20141208.jpg" alt="内側が赤、外側が黒の塗丼に白いご飯が盛られ、その上へよくかき混ぜられた卵がかけられている"&gt;
&lt;/figure&gt;

&lt;p&gt;かき混ぜてからかける派、かけたあとは混ぜない組。醤油は気分。茶碗よりも丼でやりたい。というよりも卵をご飯にかけるという所業を結構大きくなってから吉野家の牛丼で覚えたので、かき混ぜてからかけるし丼でやる。&lt;a href="http://www.adventar.org/calendars/342"&gt;TKG Advent Calendar 2014&lt;/a&gt;ももう8日目か。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>クラス名の命名規定</title>
      <link>http://hail2u.net/blog/webdesign/css-class-naming-rule.html</link>
      <description>pixivのCSSで使われるクラス名ルールという命名規則の記事を読んでいた。初見では大規模だとBEMの衝突が絶対に起きない書き方の方が優れているように思えた。しかし衝突するであろうことに警報を出すという形にゆるくすることで、開発者たちに自由を与えるというような目的でこうなっているようだ。ちょっと興味深い。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/css-class-naming-rule.html</guid>
      <pubDate>Sun, 07 Dec 2014 02:20:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://less.carbonfairy.org/post/104312752301"&gt;pixivのCSSで使われるクラス名ルール&lt;/a&gt;という命名規則の記事を読んでいた。初見では大規模だとBEMの衝突が絶対に起きない書き方の方が優れているように思えた。しかし衝突するであろうことに警報を出すという形にゆるくすることで、開発者たちに自由を与えるというような目的でこうなっているようだ。ちょっと興味深い。&lt;/p&gt;

&lt;p&gt;規模が大きくなると制約を厳しくして安定性を重視する一辺倒だったが、こういう自由さをうまく提供しようという考え方をすることはあまりなかった。具体的にも、変更されることがあまりない、またはわかっている人だけが行うひとまとまりのルートにのみ特殊な命名(&lt;code&gt;_&lt;/code&gt;で始める)というのはバランスが良さそうに思える。&lt;/p&gt;

&lt;p&gt;コードだけを見てみるとうまくいっているというのは少し驚く。&lt;code&gt;_&lt;/code&gt;で始まるところはあまり触らない人と&lt;code&gt;_&lt;/code&gt;で始まるところを触る人、と人的リソースが能力や職掌に応じてうまく振り分けられているのかなと想像してる。プリプロセッサーありきという印象もあるが、それはもう問題にはならなそうだ。&lt;/p&gt;

&lt;p&gt;CSSにもモジュール化、そしてその先のコンポーネント化の波は来ている。最右翼はBEMのような制約の厳しい命名規則であることは間違いなさそうだが、過渡期の今こそチームにあった命名規則を考えるべきなのかもしれない。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>木曜日のポエム</title>
      <link>http://hail2u.net/blog/misc/thursday-poem.html</link>
      <description>今年は木曜日に内向的な性格の強い記事、ざっくり言うとポエムなどと揶揄されるような記事を書くようにしていた。週で考えるとタイミングとしては良かったような気がする。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/thursday-poem.html</guid>
      <pubDate>Sat, 06 Dec 2014 00:58:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;今年は木曜日に内向的な性格の強い記事、ざっくり言うとポエムなどと揶揄されるような記事を書くようにしていた。週で考えるとタイミングとしては良かったような気がする。&lt;/p&gt;

&lt;p&gt;月～火は情報の収集に偏りやすく、ポエムのようなものは消費されにくい傾向にあると思う。金～日はそもそも文章をじっくり読まれるようなタイミングでないことが多い。水～木あたりが良いのかなというところで、週末よりだとストレスからシリアスに捉えられる可能性が高いのではないかと木曜にした。&lt;/p&gt;

&lt;p&gt;当初は以下のような点を意識して、金曜日にしていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;あまりシリアスに捉えられないように&lt;/li&gt;
&lt;li&gt;そもそも読まれないように&lt;/li&gt;
&lt;li&gt;フィードを購読している人には読まれるように&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;世迷い事のようなものなのでシリアスに捉えられると困る、というような考えだった。ポエムのようなものは素に近いので、シリアスに捉えられて否定されると辛いとかそういうことでもあったように思う。&lt;/p&gt;

&lt;p&gt;しかし春頃から、ポエムのようなものはシリアスに捉えられて初めてその空気感のような曖昧な部分が伝わるのかもしれないと考えるようになった。以降は週末までに拡散し切るであろう木曜に公開するようになっていった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;来年も続けよう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「rsync-ac (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-rsync-ac</link>
      <pubDate>Mon, 07 Jul 2014 16:30:38 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-rsync-ac</guid>
      <description>&lt;p&gt;rsync-ac (Gruntプラグイン)は&lt;a href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt;を使って他のディレクトリへファイルをコピーするGruntプラグインです。オプション設定を絞ることであまり考えずに使えるようにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「pubsubhubbub_publish (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-pubsubhubbub_publish</link>
      <pubDate>Mon, 07 Jul 2014 00:44:37 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-pubsubhubbub_publish</guid>
      <description>&lt;p&gt;pubsubhubbub_publish (Gruntプラグイン)はGoogleが提供している&lt;a href="https://pubsubhubbub.appspot.com/"&gt;PubSubHubbubハブ&lt;/a&gt;へ指定したURLのフィードを&lt;code&gt;publish&lt;/code&gt;するGruntプラグインです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「Picks」を追加</title>
      <link>http://picks.hail2u.net/</link>
      <pubDate>Sun, 06 Jul 2014 04:48:23 +0900</pubDate>
      <guid isPermaLink="true">http://picks.hail2u.net/</guid>
      <description>&lt;p&gt;Picksは僕が興味をもった様々なURLをアイコンをヒントにざっと眺めることの出来るウェブサイトです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WEB+DB Press Vol.81にて「イマドキHTML/CSS開発」を執筆</title>
      <link>http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</link>
      <pubDate>Thu, 19 Jun 2014 15:31:33 +0900</pubDate>
      <guid isPermaLink="true">http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</guid>
      <description>&lt;p&gt;Web標準技術の進歩やデバイスの多様化といったWebをとりまく環境の急激な変化は、従来のWebサイト開発手法を時代遅れのものとしつつあります。設計から実装・検証、そしてデバイスへの最適化まで、ワークフロー全体の変革が求められているということです。本特集では、現在はもちろん、これからも増大し続ける多様性を見据えてどのような開発手法をとっていくべきかについて、実例を交じえながら詳しく解説していきます。6月24日発売、&lt;a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069"&gt;Amazonにて予約受付中&lt;/a&gt;です！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「UnUTM」を追加</title>
      <link>https://github.com/hail2u/unutm</link>
      <pubDate>Thu, 12 Jun 2014 06:32:16 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/unutm</guid>
      <description>&lt;p&gt;UnUTMはウェブページのURLからGoogle Analyticsなどで利用されているUrchin Traffic Monitor (UTM)用のパラメーターを自動的に削除し、URLの分散を解消するJavaScriptライブラリです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSSWring」を追加</title>
      <link>https://github.com/hail2u/node-csswring</link>
      <pubDate>Fri, 25 Apr 2014 08:19:34 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-csswring</guid>
      <description>&lt;p&gt;CSSWringはCSSを圧縮(minification)するNode.jsパッケージです。Node.jsパッケージとして組み込むだけでなく、コマンドラインからも実行できます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSS MQPacker」を追加</title>
      <link>https://github.com/hail2u/node-css-mqpacker</link>
      <pubDate>Sat, 22 Feb 2014 15:39:04 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-css-mqpacker</guid>
      <description>&lt;p&gt;CSS MQPackerはCSSファイル内に散在するメディアクエリを、クエリごとにまとめCSSファイルを最適化するNode.jsパッケージです。これを利用した&lt;a href="https://github.com/hail2u/grunt-css-mqpacker"&gt;Gruntプラグイン&lt;/a&gt;もあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Mon, 15 Dec 2014 08:29:00 +0900</lastBuildDate>
  </channel>
</rss>
