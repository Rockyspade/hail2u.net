<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>ドロップインで動くLightbox</title>
      <link>http://hail2u.net/blog/webdesign/drop-in-lightbox.html</link>
      <description>リンクが張られた画像をLightbox形式で表示するようなJavaScriptを書いていた。vwとvh単位でa要素を引き伸ばして適当に前面に表示し、img要素をなんとなく拡大してから天地左右中央配置する。予めクラス指定が必要だったり、スタイルの追加が必要だったりしない、ドロップインで動作するものだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drop-in-lightbox.html</guid>
      <pubDate>Mon, 16 Feb 2015 14:03:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="/images/blog/drop-in-lightbox.png"&gt;&lt;img alt="描画領域を超える画像はアスペクト比を維持して縮小される(拡大はされない)" src="/images/blog/drop-in-lightbox.png"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;リンクが張られた画像をLightbox形式で表示するようなJavaScriptを書いていた。&lt;code&gt;vw&lt;/code&gt;と&lt;code&gt;vh&lt;/code&gt;単位で&lt;code&gt;a&lt;/code&gt;要素を引き伸ばして適当に前面に表示し、&lt;code&gt;img&lt;/code&gt;要素をなんとなく拡大してから天地左右中央配置する。予めクラス指定が必要だったり、スタイルの追加が必要だったりしない、ドロップインで動作するものだ。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="/pub/test/612.html"&gt;Lightbox with Clean Markup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモでそれぞれの画像をクリック(タッチ)すると、描画領域全体に画像が表示される。&lt;code&gt;a&lt;/code&gt;要素をオーバーレイの背景に変え、&lt;code&gt;img&lt;/code&gt;要素をうまく収まるように調整することになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (this.href !== image.src) {
  image._src = image.src;
  image.src = this.href;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リンク先と画像のURLが違う場合は、画像がサムネイルでリンク先がフルサイズの画像とみなし、一時的に画像のリンク先を書き換えてフルサイズ画像が表示されるようにもなっている。サムネイルのURLは一時的に&lt;code&gt;_src&lt;/code&gt;プロパティーに保存しておき、閉じると元に戻るようにもした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (image._src) {
  image.src = image._src;
  delete image._src;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;data-*&lt;/code&gt;属性を使ってやりたいところだが、スクリプトの規模に比べて大仰なポリフィルが必要になるので、オレオレプロパティーに保存している。&lt;code&gt;setAttribute()&lt;/code&gt;や&lt;code&gt;getAttribute()&lt;/code&gt;を&lt;code&gt;data-*&lt;/code&gt;属性に使ったら負けだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.style.backgroundColor = &amp;#39;#333&amp;#39;;
this.style.cursor = &amp;#39;zoom-out&amp;#39;;
this.style.height = &amp;#39;100vh&amp;#39;;
this.style.left = &amp;#39;0&amp;#39;;
this.style.position = &amp;#39;fixed&amp;#39;;
this.style.top = &amp;#39;0&amp;#39;;
this.style.width = &amp;#39;100vw&amp;#39;;
this.style.zIndex = &amp;#39;1&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテキストに依存するので、&lt;code&gt;left&lt;/code&gt;と&lt;code&gt;top&lt;/code&gt;プロパティーは&lt;code&gt;0&lt;/code&gt;にする必要があるだろう。&lt;code&gt;a&lt;/code&gt;要素はデフォルトで&lt;code&gt;display: inline&lt;/code&gt;のため、&lt;code&gt;position: fixed&lt;/code&gt;を指定すると&lt;code&gt;block&lt;/code&gt;に変わる、と&lt;a href="http://www.w3.org/TR/css3-positioning/#dis-pos-flo"&gt;仕様に規定&lt;/a&gt;がある。そのためわざわざ&lt;code&gt;this.style.display = &amp;#39;block&amp;#39;&lt;/code&gt;を指定しなくても&lt;code&gt;width&lt;/code&gt;プロパティー等はきちんと反映されるようになる。描画領域に合わせるのは&lt;code&gt;100vw&lt;/code&gt;と&lt;code&gt;100vh&lt;/code&gt;で簡単な時代だ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;image.style.bottom = &amp;#39;0&amp;#39;;
image.style.height = &amp;#39;auto&amp;#39;;
image.style.left = &amp;#39;0&amp;#39;;
image.style.margin = &amp;#39;auto&amp;#39;;
image.style.maxHeight = &amp;#39;96%&amp;#39;;
image.style.maxWidth = &amp;#39;96%&amp;#39;;
image.style.position = &amp;#39;absolute&amp;#39;;
image.style.right = &amp;#39;0&amp;#39;;
image.style.top = &amp;#39;0&amp;#39;;
image.style.width = &amp;#39;auto&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画像の天地左右中央配置は&lt;a href="http://unformedbuilding.com/articles/firefox-style-center-middle-aligned-css/"&gt;Firefoxの画像表示スタイルシート&lt;/a&gt;に幅制限を加えたものにした。FirefoxでCSSではなくJavaScriptで&lt;code&gt;height&lt;/code&gt;と&lt;code&gt;width&lt;/code&gt;属性を書き換えてリサイズしているのは何か意味があるんだろうか。最大幅を&lt;code&gt;100%&lt;/code&gt;にしていないのは単に好みだ。&lt;/p&gt;

&lt;p&gt;デモではPlaceIMGの画像でリンク先もそれの場合のみに有効になるようにしている。実際にはURLの判定を&lt;code&gt;[src^=&amp;quot;/img/&amp;quot;]&lt;/code&gt;やウェブサイトのドメイン、またはその両方で判定するようにすると良いだろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;様々な事情があってHTMLファイルはいじることが難しいけれど、それらから固定で参照されているJavaScriptファイルだけは追記することが可能、というようなケースで必要になって考えていた。このように画像のURLなどから類推し、既存のHTML構造を利用してスタイルを当てていくのがコストが低い。&lt;/p&gt;

&lt;p&gt;デモのページにも書いておいたが、実装依存はともかく&lt;code&gt;z-index&lt;/code&gt;プロパティーがコンテキストに依存するという問題がある。ライブラリー化するのは難しそうだ。とは言うもののストレートな実装なので汎用化しなくても良さそうではある。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>グローバル・ヘッダーのマークアップ</title>
      <link>http://hail2u.net/blog/webdesign/marking-global-header-up.html</link>
      <description>ホーム以外ではロゴとサイト・ナビゲーションをまとめてnav要素で括るような形にグローバル・ヘッダーのマークアップを変えた。ホームでは今まで通りnav要素の外でmark要素を使ってロゴは表示される。あわせてタグラインをh1要素にしてしまったが、何か違う気がする。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/marking-global-header-up.html</guid>
      <pubDate>Sun, 15 Feb 2015 03:30:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="/images/blog/marking-global-header-up.png"&gt;&lt;img height="627" alt="ロゴとサイト・ナビゲーションをnav要素の子に" src="/images/blog/marking-global-header-up.png" width="1200"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;ホーム以外ではロゴとサイト・ナビゲーションをまとめて&lt;code&gt;nav&lt;/code&gt;要素で括るような形にグローバル・ヘッダーのマークアップを変えた。ホームでは今まで通り&lt;code&gt;nav&lt;/code&gt;要素の外で&lt;code&gt;mark&lt;/code&gt;要素を使ってロゴは表示される。あわせてタグラインを&lt;code&gt;h1&lt;/code&gt;要素にしてしまったが、何か違う気がする。&lt;/p&gt;

&lt;p&gt;他にはロゴを真四角から縦長で下が斜めにカットされているような形に変更した。SVGを直すのがなんとなく面倒だったので&lt;a href="https://github.com/hail2u/hail2u.net-styles/blob/92a47719e30a143657c033bd29314dfc958b407e/global-header/_logo.scss"&gt;&lt;code&gt;border&lt;/code&gt;プロパティーを利用したCSS&lt;/a&gt;で雑にやったけど、明らかにSVGを直す方が簡単だったのでちゃんと&lt;a href="https://github.com/hail2u/hail2u.net-styles/blob/eeed78cc4161ffc8d2784f1d52df382ad8b6fbd0/assets/images/logo.svg"&gt;SVG画像&lt;/a&gt;を作り直した。縦横比は&lt;code&gt;1:1.618&lt;/code&gt;になっていて、ロゴの幅に&lt;code&gt;1.618&lt;/code&gt;の4乗をかけるとサブカラムの幅に、それにガッターを加えてまた&lt;code&gt;1.618&lt;/code&gt;の2乗をかけるとコンテンツ(メインカラム)の幅になったりする。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;このマークアップの変更は、ロゴは&lt;code&gt;h1&lt;/code&gt;要素か否かみたいなちょくちょく論争になる問題というよりも、ロゴもナビゲーションの一部とみなすべきかなという考えに基づいたもの。そうするとロゴも&lt;code&gt;nav&lt;/code&gt;要素の子になるべきかな、と。この場合、ロゴで&lt;code&gt;h1&lt;/code&gt;要素を使ってしまうとその&lt;code&gt;nav&lt;/code&gt;要素の見出しになってしまう。それはさすがにおかしいので、自然とロゴは&lt;code&gt;h1&lt;/code&gt;要素ではなくなった。&lt;/p&gt;

&lt;p&gt;このままだと&lt;code&gt;body&lt;/code&gt;要素がUntitled BODYになってしまうのが難点で、タグラインを半ば強引に&lt;code&gt;h1&lt;/code&gt;要素にしたりしてみた。&lt;code&gt;title&lt;/code&gt;要素がちゃんとあるならUntitled BODYでもいいかみたいな雑な感覚でお茶を濁しても良さそうだけど……。もうちょっとちゃんと考えよう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150214.html</link>
      <description>歩いてたらいきなり臭い。しばらくすると防護服を着た人に囲まれる。そのままずっとにらみ合いを続けているとどんどん臭くなっていき、慌てて脇の下とか手とかを嗅いだが臭くない。なんでだろうとお尻に手を伸ばしてからその手を嗅いだら臭くてびっくりしたところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150214.html</guid>
      <pubDate>Sat, 14 Feb 2015 16:20:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;歩いてたらいきなり臭い。しばらくすると防護服を着た人に囲まれる。そのままずっとにらみ合いを続けているとどんどん臭くなっていき、慌てて脇の下とか手とかを嗅いだが臭くない。なんでだろうとお尻に手を伸ばしてからその手を嗅いだら臭くてびっくりしたところで目が覚めた。&lt;/p&gt;

&lt;p&gt;自分が寝ながらすごく臭いおならをしただけだった。そのうち大きい方を漏らしそうで怖い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>IE11でのfile:プロトコルに対するHistory APIによる操作</title>
      <link>http://hail2u.net/blog/coding/history-api-for-file-protocol-on-ie11.html</link>
      <description>Internet Explorer 11でfile:///で始まるローカル・ファイルのURLをHistory APIで変更すると、ドライブレターがどんどん増えていく現象が起こることを知った。実行する度に/C:が先頭に追加されていく。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/history-api-for-file-protocol-on-ie11.html</guid>
      <pubDate>Fri, 13 Feb 2015 01:08:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Internet Explorer 11で&lt;code&gt;file:///&lt;/code&gt;で始まるローカル・ファイルのURLをHistory APIで変更すると、ドライブレターがどんどん増えていく現象が起こることを知った。実行する度に&lt;code&gt;/C:&lt;/code&gt;が先頭に追加されていく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;history.replaceState(null, &amp;#39;&amp;#39;, location.pathname);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相対URLで書きかえが起こるはずなので、こうするとクエリー文字列やフラグメント識別子を削除してクリーンなURLに書き換わるはずだ。実際、普通のウェブサイトで試すと問題なくうまくいく。しかし&lt;code&gt;file:///&lt;/code&gt;プロトコルでローカルのファイルを開いている場合、想定通りに動かない。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;&amp;gt; &lt;kbd&gt;location.pathname&lt;/kbd&gt;
&amp;lt; &amp;quot;/C:/Users/Kyo/Desktop/test.html&amp;quot;
&amp;gt; &lt;kbd&gt;history.replaceState(null, &amp;#39;&amp;#39;, location.pathname)&lt;/kbd&gt;
&amp;lt; undefined
&amp;gt; &lt;kbd&gt;location.pathname&lt;/kbd&gt;
&amp;lt; &amp;quot;/C:/C:/Users/Kyo/Desktop/test.html&amp;quot;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;このようにドライブレターが増殖する。URLの書き換え自体はこのおかしなURLにちゃんと(？)書き換わっているので、この状態で再読込すると「このページは表示できません」になる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;明らかにバグと言えそうだが、実際に何か致命的なことが起こるとも思えないバグだ。報告はしておいたけど、悪いこともできなそうな気がするので放置されそうだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>フルスクリーンでオーバーレイの検索ボックス</title>
      <link>http://hail2u.net/blog/webdesign/fullscreen-overlay-searchbox.html</link>
      <description>増えてきたフルスクリーンでオーバーレイの検索ボックスだが、まだこれといった無難な実装方法はないように見える。今だとvw/vh/vmin/vmax単位を使ってレイアウト、:target擬似クラスを使ってトグルという形にすれば、ほぼCSSで実現できそうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/fullscreen-overlay-searchbox.html</guid>
      <pubDate>Thu, 12 Feb 2015 00:55:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="/images/blog/fullscreen-overlay-searchbox.png"&gt;&lt;img alt="虫眼鏡アイコンをクリックすると、フルスクリーンかつオーバーレイで表示されるタイプの検索ボックス" height="627" src="/images/blog/fullscreen-overlay-searchbox.png" width="1200"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;増えてきたフルスクリーンでオーバーレイの検索ボックスだが、まだこれといった無難な実装方法はないように見える。今だと&lt;a href="http://www.w3.org/TR/css3-values/#viewport-relative-lengths"&gt;&lt;code&gt;vw&lt;/code&gt;/&lt;code&gt;vh&lt;/code&gt;/&lt;code&gt;vmin&lt;/code&gt;/&lt;code&gt;vmax&lt;/code&gt;単位&lt;/a&gt;を使ってレイアウト、&lt;a href="http://www.w3.org/TR/css3-selectors/#target-pseudo"&gt;&lt;code&gt;:target&lt;/code&gt;擬似クラス&lt;/a&gt;を使ってトグルという形にすれば、ほぼCSSで実現できそうだ。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="/pub/test/609.html"&gt;Fullscreen Overlay Searchbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモではShow Searchboxというリンクをクリックすると検索ボックスが表示され、検索ボックスの左上にある✖をクリックすると閉じることができる。実際のウェブサイトではリンクの代わりに虫眼鏡のアイコンでも使ってやれば良いだろう。&lt;/p&gt;

&lt;h2&gt;マークアップ&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;aside id=&amp;quot;search&amp;quot; class=&amp;quot;searchbox&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Search this site&amp;lt;/h1&amp;gt;

  &amp;lt;form&amp;gt;
    &amp;lt;input class=&amp;quot;query&amp;quot; placeholder=&amp;quot;Enter search keyword(s)&amp;quot; type=&amp;quot;search&amp;quot;&amp;gt;
  &amp;lt;/form&amp;gt;

  &amp;lt;footer&amp;gt;
    &amp;lt;a class=&amp;quot;close&amp;quot; href=&amp;quot;#top&amp;quot;&amp;gt;Back to Top&amp;lt;/a&amp;gt;
  &amp;lt;/footer&amp;gt;
&amp;lt;/aside&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検索ボックスのマークアップは&lt;code&gt;aside&lt;/code&gt;要素を使って、このような形にした。&lt;code&gt;id&lt;/code&gt;属性は後に&lt;code&gt;:target&lt;/code&gt;擬似クラスで利用するため、必須になる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;h1&lt;/code&gt;要素は冗長な気もするが、通常は隠れたセクションであることを考慮すると、見出しはあった方が良いだろう。&lt;code&gt;label&lt;/code&gt;要素や&lt;code&gt;input type=submit&amp;quot;&lt;/code&gt;を使う必要がないフォームであることも考えると、このような一般的な文言で見出しを付けておくのが無難か。&lt;/p&gt;

&lt;p&gt;閉じるボタンは&lt;code&gt;a&lt;/code&gt;要素で&lt;code&gt;#top&lt;/code&gt;に移動させるようにして実現するが、リンク文字列は「閉じる」や「Close」ではない方が良い。CSS側で✖に変えたりすることになるが、リンクそのものの機能としてはページの最上部に移動するという機能でしかないからだ。CSSが無効の時に「閉じる」というリンクで「ページの最上部に移動する」ことになるのがおかしいからというように考えても良いだろう。&lt;/p&gt;

&lt;h2&gt;フルスクリーン化&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;.searchbox {
  height: 100vh;
  left: 0;
  position: fixed;
  top: 0;
  width: 100vw;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検索ボックスのレイアウトでは&lt;code&gt;vw&lt;/code&gt;と&lt;code&gt;vh&lt;/code&gt;単位を使って描画領域全体と同じサイズになるようにして、フルスクリーンになるようにする。サイズさえ正しければ&lt;code&gt;position: fixed&lt;/code&gt;で配置するだけで、きれいに全体にかぶさるはずだ。&lt;/p&gt;

&lt;h2&gt;閉じるボタン&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;.searchbox .close {
  display: block;
  font-size: 8vmin;
  height: 8vmin;
  left: 1vmin;
  position: absolute;
  top: 1vmin;
  width: 8vmin;
}

.searchbox .close::before {
  content: &amp;#39;✖&amp;#39;;
  display: block;
  height: 100%;
  width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;閉じるボタンでは&lt;code&gt;vmin&lt;/code&gt;単位を使うことで占有する面積を一定以下に維持し、大きすぎる・小さすぎるがあまりないようにしておいた。&lt;code&gt;font-size&lt;/code&gt;でも使えるので、うまく使ってやるときれいに文字(記号)を配置することができる。また、&lt;code&gt;vw&lt;/code&gt;や&lt;code&gt;vh&lt;/code&gt;ではなく&lt;code&gt;vmin&lt;/code&gt;単位を使うことで、縦横のどちらが余っているのかわからない検索フォームの領域とかぶさらないようにもできる。そうすると閉じるボタンがクリックできないというような事故や検索フォームをクリアーするアイコンとかぶったというような事故を避けることができるはずだ。&lt;/p&gt;

&lt;p&gt;もうひとつスクロールバーの有無という問題があるので、左上に配置すると簡単になる。スクロールバーの有無をCSSで判定するのは難しく、かといってそのためだけにJavaScriptを使うのももったいない。&lt;code&gt;calc()&lt;/code&gt;を使うと何とかなるが、直感的ではない。近年のOSのGUIを考えると、閉じるボタンが右上というのももはや暗黙の了解とは言えなくなってきたので、左上でもわかりやすければ大丈夫だろう。&lt;/p&gt;

&lt;p&gt;アイコン化は簡単にユニコードの&lt;a href="http://en.wikipedia.org/wiki/Dingbat#Unicode"&gt;Dingbatsブロック&lt;/a&gt;のHeavy Multiplication Xを利用した。うかつに絵文字で良さそうなものを探すと予期せぬカラー化などが起こるので、こういったUIでおとなしめに使う場合はこの辺りの記号から選択すると良い。&lt;/p&gt;

&lt;h2&gt;検索ボックス&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;.searchbox .query {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  font-size: 7vmin;
  left: 10vw;
  margin-top: -0.675em;
  position: absolute;
  top: 50%;
  width: 80vw;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検索フォームは縦横中央寄せをすることになる。&lt;code&gt;transform: translate()&lt;/code&gt;を使って配置しても良いが、運が悪いと枠線や背景画像がぼやけてしまう。この場合はサイズが明確なので、絶対配置と負のマージンで配置する方が安定する。Flexboxも悪くないが、単純な縦方向のセンタリングには少し牛刀感がある。&lt;/p&gt;

&lt;p&gt;左位置の指定や幅においても&lt;code&gt;vw&lt;/code&gt;単位を使うことで、前述の閉じるボタンとうまくマッチさせることができる。画面サイズに従ってある程度可変して欲しいフォント・サイズは&lt;code&gt;vmin&lt;/code&gt;を使って調節するのが簡単だ。メディア・クエリーを使ってビューポートのサイズで切り替えるのも悪くないがそこそこ手間がかかる。&lt;/p&gt;

&lt;h2&gt;トグルの実装&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#searchbox {
  display: none;
}

#searchbox:target {
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;トグルの機能はフラグメント識別子と&lt;code&gt;:target&lt;/code&gt;擬似クラスの組み合わせで簡単に実装できる。閉じるボタンのリンク先を&lt;code&gt;#top&lt;/code&gt;にしてやると、それをクリック(タッチ)することで&lt;code&gt;#search:target&lt;/code&gt;を無効にできるため、うまいこと検索ボックスを閉じることができるというわけだ。ここでIDセレクターをちゃんと使うことで、フルスクリーンでオーバーレイにするビジュアル・デザインのためのルール群とトグルのためのルールを切り分けることができる。&lt;/p&gt;

&lt;p&gt;デモでは検索ボックスを消した後に残るフラグメント識別子を&lt;code&gt;histroy.replaceState()&lt;/code&gt;を使って消しているが、これをやめればCSSのみでできるだろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;フルスクリーンでオーバーレイの検索ボックスは、独立したコンポーネントとしてデザインしやすいのが大きな利点だ。そうデザインできることで、異なるデバイス間でも似た検索体験を提供でき、また違うプロジェクトでも再利用することも比較的容易になる。ここで作ったデモもほぼどこでも使えるように出来たと思う。&lt;/p&gt;

&lt;p&gt;しかし独立したコンポーネントとしてデザインするためには、構造(HTML)として安定した形(独立したセクション)である必要があり、その上で前後の文脈や周辺の要素に依存しないようにCSSを書いていく必要がある。&lt;code&gt;vw&lt;/code&gt;や&lt;code&gt;vh&lt;/code&gt;、&lt;code&gt;vmin&lt;/code&gt;、&lt;code&gt;vmax&lt;/code&gt;といった描画領域を基準にした単位は、親要素はもちろん&lt;code&gt;body&lt;/code&gt;や&lt;code&gt;html&lt;/code&gt;要素のレンダリング状況を迂回してサイズを決定できるので、そういったCSSの書き方に大いに役に立つ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>バターなし！牛乳なし！のヨーグルトを使ったスコーン</title>
      <link>http://hail2u.net/blog/misc/yogurt-scone.html</link>
      <description>ヨーグルトを水切りしてクリームとホエーに分け、それをバターと牛乳の代わりにして作るスコーンを作った。水切りに時間はかかったものの、バターの時とほぼ同じ感覚で作ることができ、特に難しくなかった。美味しかったけれど、やっぱりスコーンではないかなーというできあがりだ。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/yogurt-scone.html</guid>
      <pubDate>Wed, 11 Feb 2015 00:01:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="/images/blog/yogurt-scone.jpg"&gt;&lt;img alt="水切りしたヨーグルトを使い、バターなし！牛乳なし！で作ったスコーン" src="/images/blog/yogurt-scone.jpg"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;ヨーグルトを水切りしてクリームとホエーに分け、それをバターと牛乳の代わりにして作るスコーンを作った。水切りに時間はかかったものの、バターの時とほぼ同じ感覚で作ることができ、特に難しくなかった。美味しかったけれど、やっぱりスコーンではないかなーというできあがりだ。&lt;/p&gt;

&lt;p&gt;ヨーグルトの水切りはガーゼを二重にして筒状の容器にかぶせてから輪ゴムで止めたものでやった。キッチンペーパーでも可能なようだけれど、ヨーグルトの水分量の多さにも依存するので、ガーゼやふきんの方が無難そうだ。きっちりクリーム状にするには一晩かかる。ヨーグルトは&lt;a href="http://product.koiwaimilk.com/product/yogurt/nama_400.html"&gt;小岩井 生乳100％ヨーグルト&lt;/a&gt;を丸々400g使った。これで大体200g弱のクリームと150ccくらいのホエーに分離するようだ。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;材料&lt;/th&gt;
&lt;th style="text-align:right"&gt;分量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;小麦粉&lt;/td&gt;
&lt;td style="text-align:right"&gt;150g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ベーキングパウダー&lt;/td&gt;
&lt;td style="text-align:right"&gt;10g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;砂糖&lt;/td&gt;
&lt;td style="text-align:right"&gt;大さじ2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;塩&lt;/td&gt;
&lt;td style="text-align:right"&gt;小さじ1/3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ヨーグルトクリーム&lt;/td&gt;
&lt;td style="text-align:right"&gt;50g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ホエー&lt;/td&gt;
&lt;td style="text-align:right"&gt;大さじ1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;サラダ油&lt;/td&gt;
&lt;td style="text-align:right"&gt;大さじ1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;溶き卵&lt;/td&gt;
&lt;td style="text-align:right"&gt;1/2個&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;この分量で7個分として焼いたところ、こぶし大より一回りくらい小さいサイズに焼きあがった。バターなし！牛乳なし！&lt;/p&gt;

&lt;p&gt;小麦粉から塩までを一旦混ぜあわせ、そこにヨーグルトクリームを加えて更に混ぜ、最後にホエーから溶き卵までを混ぜると生地がまとまる。ゴルフボールくらいに丸めただけで焼いたところ、ポワンとパンみたいにふっくらしてしまったので、ちゃんとのばして型抜きした方が良いのかもしれない。&lt;/p&gt;

&lt;p&gt;サクフワで普通のスコーンとは違った美味しさだった。まわりはカリッと焼きあがることもあって、甘食とかの食感に近い。甘みが強めだったので、砂糖はもうちょっと減らしても良いかもしれないけれど、それだと今度はヨーグルトクリームの酸味やベーキングパウダーの苦味が出てしまいそうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;スコーンのサクサクではないサックリ感みたいなのはやはりバターなようだ。ちょくちょくバターをなたね油などで代用したお菓子レシピとか見かけるが、あんまり期待はできない感じがしてきた。でも今度やってみよう。&lt;/p&gt;

&lt;p&gt;余ったホエーは野菜入れてスープにして飲んだが、これは微妙だった(まずくはない)。このホエーと牛乳でリコッタチーズのようなものができあがるらしいので、今度やる時は挑戦してみようと思う。ヨーグルトクリームの方はレーズンパンに塗ったり、コーヒーに浮かべたり、どうやっても美味しかった。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>置換要素の絶対配置</title>
      <link>http://hail2u.net/blog/webdesign/absolute-positioning-on-replaced-element.html</link>
      <description>検索ボックスを更新して検索ボタンを左に動かした……つもりだったが、動いていなかったのを直していた。単純に置換要素を絶対配置する時にautoの扱いが非置換要素と違うことを完全に忘れていたのが原因で直せたが、どうしてこうなるのかがよくわからなくなったので少し調べてみたが更に混乱しただけだった。Chrome 40 (31あたりから変わったらしい？)の挙動が正しそうだが……。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/absolute-positioning-on-replaced-element.html</guid>
      <pubDate>Tue, 10 Feb 2015 11:36:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;検索ボックスを更新して検索ボタンを左に動かした……つもりだったが、動いていなかったのを直していた。単純に置換要素を絶対配置する時に&lt;code&gt;auto&lt;/code&gt;の扱いが非置換要素と違うことを完全に忘れていたのが原因で直せたが、どうしてこうなるのかがよくわからなくなったので少し調べてみたが更に混乱しただけだった。Chrome 40 (31あたりから変わったらしい？)の挙動が正しそうだが……。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="/pub/test/608.html"&gt;position: absolute on Replaced Element&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモでは置換要素を二つ(入力ボックスと送信ボタン)並べ、送信ボタンを絶対配置しようとしている。&lt;/p&gt;

&lt;p&gt;最初の例では入力ボックスの幅が&lt;code&gt;100%&lt;/code&gt;になっており、枠線の分だけはみ出す状態だ。この状態で続く送信ボタンを絶対配置し、&lt;code&gt;left&lt;/code&gt;プロパティーを無指定にすると、なぜかInternet Explorer 11では入力ボックスの隣に配置される。他のブラウザーでは入力ボックスのすぐ下だ。&lt;/p&gt;

&lt;p&gt;二番目の例では入力ボックスに&lt;code&gt;box-sizing&lt;/code&gt;プロパティーを適用して、幅を&lt;code&gt;100%&lt;/code&gt;にしてもはみ出さないようにしている。この状態ではFirefox 35やMobile Safari 8でも送信ボタンが入力ボックスの隣に配置されるようになる。Chrome 40では入力ボックスのすぐ下だ。&lt;/p&gt;

&lt;p&gt;三番目の例では送信ボタンへ&lt;code&gt;left: 0&lt;/code&gt;を指定している。Internet Explorer 11では入力ボックスに重なってしまう。他のブラウザーでは入力ボックスのすぐ下だ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;折り返しが起きるタイミングと&lt;code&gt;left: auto&lt;/code&gt;の解釈の違いが重なっていて、たまたま似たような配置になったりならなかったりするようだ。&lt;a href="http://www.w3.org/TR/CSS2/visudet.html#abs-replaced-width"&gt;仕様&lt;/a&gt;(&lt;a href="http://www.w3.org/TR/2015/WD-css3-positioning-20150203/#abs-replaced-width"&gt;最新の仕様&lt;/a&gt;も含め)がややこしいこともあって、どれがバグでどれが仕様なのかよくわからなくなった。&lt;/p&gt;

&lt;p&gt;ともかく&lt;code&gt;auto&lt;/code&gt;による適当な配置に期待せずにばっちりと値を指定することでこの辺りでハマることはなくなるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Drawic v2.9.0</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.9.0.html</link>
      <description>はてなブックマークでブックマークするリンクを復活させた都合で、はてな系のアイコンを4種類、Drawicに追加してv2.9.0にした。はてなのアイコン平べったい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.9.0.html</guid>
      <pubDate>Mon, 09 Feb 2015 10:44:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://hail2u.github.io/drawic/"&gt;&lt;img alt="はてな・人力検索はてな・はてなブックマーク・はてなブロク" height="627" src="/images/blog/drawic-v2.9.0.png" width="1200"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;はてなブックマークでブックマークするリンクを復活させた都合で、はてな系のアイコンを4種類、&lt;a href="http://hail2u.github.io/drawic/"&gt;Drawic&lt;/a&gt;に追加してv2.9.0にした。はてなのアイコン平べったい。&lt;/p&gt;

&lt;p&gt;ブックマークするリンクを追加する時、はてなブックマークでブックマークするページがユーザーごとにユニークなことをすっかり忘れてた。TwitterやFacebookみたいなURLか、あの大きいブックマーク画面へリダイレクトしてくれるURLみたいなの欲しい気がする……と&lt;code&gt;/my/add.confirm&lt;/code&gt;をエンドポイントにするとリダイレクトしてくれることを思い出したので、これを使うことにした。&lt;/p&gt;

&lt;p&gt;まだブックマークされていない時のページが気になるけど、ブックマークレットの画面を流用するよりは多分マシ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>文字参照と属性セレクター</title>
      <link>http://hail2u.net/blog/webdesign/character-reference-and-attribute-selector.html</link>
      <description>文字参照を含む可能性がある属性の値を使ってセレクターを自動生成するような仕組みで少しハマった。文字参照をそのまま属性セレクターの値として指定してしまったので、うまく動かなかった。style要素に記述するようなケースでも、属性セレクターの値には文字参照は使えない。戻して書き、必要ならバックスラッシュでエスケープする。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/character-reference-and-attribute-selector.html</guid>
      <pubDate>Sun, 08 Feb 2015 10:12:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;文字参照を含む可能性がある属性の値を使ってセレクターを自動生成するような仕組みで少しハマった。文字参照をそのまま属性セレクターの値として指定してしまったので、うまく動かなかった。&lt;code&gt;style&lt;/code&gt;要素に記述するようなケースでも、属性セレクターの値には文字参照は使えない。戻して書き、必要ならバックスラッシュでエスケープする。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="/pub/test/607.html"&gt;Character Reference and Attribute Selector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモの&lt;code&gt;p&lt;/code&gt;要素には&lt;code&gt;title&lt;/code&gt;属性の値に二重引用符が文字参照で入っている。普通に文字参照を使って属性セレクターを書いた場合、要素が選択できない。また属性セレクターでの二重引用符は特別な意味を持つので、引用符なしのつもりで書いても同じように選択できない。文字参照を戻した上で以下のどれかで指定する必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一重引用符で括る&lt;/li&gt;
&lt;li&gt;二重引用符で括り、エスケープする&lt;/li&gt;
&lt;li&gt;二重引用符をエスケープする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;属性セレクターでは引用符で括ることが必須ではないので、エスケープするだけでも大丈夫だった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;やりたかった仕組みではユーザーの入力によって仕込まれた&lt;code&gt;title&lt;/code&gt;属性の値に従ってセレクターを生成して、スタイルを追加するというようなものなので、ユーザーの入力をそのまま&lt;code&gt;style&lt;/code&gt;要素の子に追加する必要があり、かなり危険そうだ。別の方法を考えなければならなくなった……。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>node-git-release v1.1.2</title>
      <link>http://hail2u.net/blog/software/node-git-release-v1.1.2.html</link>
      <description>node-git-releaseをio.js v1.1.0を要件にして、child_process.spawnSync()を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも*Sync()がサポートされ、動くようになったようだ(試してない)。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/node-git-release-v1.1.2.html</guid>
      <pubDate>Sat, 07 Feb 2015 09:38:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://github.com/hail2u/node-git-release"&gt;node-git-release&lt;/a&gt;をio.js v1.1.0を要件にして、&lt;code&gt;child_process.spawnSync()&lt;/code&gt;を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも&lt;code&gt;*Sync()&lt;/code&gt;がサポートされ、動くようになったようだ(試してない)。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;でio.jsの特定バージョンを要件にしたい場合、&lt;code&gt;engines&lt;/code&gt;フィールドでは&lt;code&gt;iojs&lt;/code&gt;というキーで指定するようだ。npmの公式ドキュメントでは特に触れられていないが、Herokuでは既にこれを見て実装されているという話だった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;engines&amp;quot;: {
    &amp;quot;iojs&amp;quot;: &amp;quot;&amp;gt;=v1.1.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら実行をブロックしてくれるわけではないので、気休め程度と言って良い。他、この&lt;code&gt;engines&lt;/code&gt;フィールドでio.js v1.1.0&lt;em&gt;または&lt;/em&gt;Node.js v0.12.0という要件にしたい場合の書き方がわからないという問題もあった。配列で書くしかないような気がするが、解釈できるのだろうか。色々想定されていなさそうなフィールドなので、Herokuで明示的にio.jsを使いたいという場合を除いて指定しない方が良さそうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;WindowsのGitがアレでアレなので、いまだ&lt;code&gt;npm publish&lt;/code&gt;することができない。一生無理そう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description>&lt;p&gt;HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Mon, 16 Feb 2015 14:03:00 +0900</lastBuildDate>
  </channel>
</rss>
