<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>クリティカルCSSの動的なインライン化</title>
      <link>http://hail2u.net/blog/webdesign/inlining-critical-css-dynamically.html</link>
      <description>Inlining critical CSS for first-time visitsという、クリティカルCSSを初回訪問時のみインラインに展開して、その後はインライン化せず予めキャッシュさせておいたフルセットのCSSを使うというアイディアについての記事を読んだ。実装はともかく、アイディアとして成立していないんじゃないかと思う。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/inlining-critical-css-dynamically.html</guid>
      <pubDate>Wed, 18 Mar 2015 06:34:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://adactio.com/journal/8504">Inlining critical CSS for first-time visits</a>という、クリティカルCSSを初回訪問時のみインラインに展開して、その後はインライン化せず予めキャッシュさせておいたフルセットのCSSを使うというアイディアについての記事を読んだ。実装はともかく、アイディアとして成立していないんじゃないかと思う。</p>

<p>クリティカルCSSをインライン化することのメリットは既に多くのウェブサイトでも取り上げられており、もちろんネタ元のGoogle PageSpeedでも<a href="https://developers.google.com/speed/docs/insights/PrioritizeVisibleContent#structure">項</a>が割かれている。ここでは特に触れないが、描画領域の大きさにかかわらず初期描画の高速化には大きなメリットがあるとは言えるだろう。上記リンク先の記事ではそれを動的に行うことで、2度目以降の訪問の時にはキャッシュ済みであるフルセットのCSSを使わせるようにし、効率的なキャッシュ運用と保守性を実現する実装について解説されている。</p>

<p>常にクリティカルCSSをインライン化している場合、1度目の訪問では以下のリソースがリクエストされる。</p>

<ol>
<li>インライン化されたクリティカルCSSを含むHTML (非キャッシュ)</li>
<li>クリティカルCSSを含まないCSS (非キャッシュ)</li>
</ol>

<p>そして2度目の訪問では以下のリソースがリクエストされる。</p>

<ol>
<li>インライン化されたクリティカルCSSを含むHTML (キャッシュ)</li>
<li>クリティカルCSSを含まないCSS (キャッシュ)</li>
</ol>

<p>対して記事の実装においては1度目の訪問の時は以下のリソースがリクエストされる。</p>

<ol>
<li>インライン化されたクリティカルCSSを含むHTML (非キャッシュ)</li>
<li>完全なCSS (非キャッシュ)</li>
</ol>

<p>そして2度目の訪問では以下のリソースがリクエストされる。</p>

<ol>
<li>HTML (<em>非キャッシュ</em>)</li>
<li>完全なCSS (キャッシュ)</li>
</ol>

<p>つまり記事の実装だと、2度目の訪問時にHTMLのキャッシュが効かない。その上、フルセットのCSSを読み込むのでそのパース時間も改善しない。インライン化しない場合と比べると、HTMLのキャッシュが効かないので<em>ページ読み込み時間は遅くなる</em>(3度目以降には追いつく)だろう。静的にインライン化する場合と比べても、CSSのパースに時間がかかるため<em>初期描画までの時間が遅くなる</em>(3度目以降も悪化したまま)。</p>

<p>保守性という点では多少見るべき点はあるが、同じようなアプローチを使ってタスク・ランナー経由で静的にHTMLをビルドした方が効率的だろう。CDNのようなシステムとの相性も考えると静的なHTML生成の方に軍配が上がる。</p>

<hr>

<p>クリティカルCSSのインライン化についてはまだ歴史が浅く、その目的と効果がはっきりと伝わっていないような印象を受ける。この技術の目的はページの読み込み時間の改善ではなく、むしろそれを悪化させてでもとにかく初期描画までの時間を短くすること、これくらいにとらえておくと良いのではないだろうか。そしてその最適化はその目的を崩さずに行われるべきなので、自然とクリティカルCSSを小さくするようなデザインへと帰結することになる。</p>

<p>僕があまりクリティカルCSSのインライン化に興味を持てないのは、ウェブサイトのデザインに大きな影響を与えすぎる点だ。インライン化を効果的に行うためには初期描画領域のビジュアル・デザインをとにかく必要最低限までに絞る必要がある。そのことは他のビジュアル・デザインとの兼ね合いという点でも情報設計という点でもウェブサイトのデザインに大きな影響を与えることだろう。ひとつの指標ではあって良いとは思うが、その性質上プライオリティーが高くなりやすく、他の指標を否定してしまいやすいと感じている。</p>]]></content:encoded>
    </item>
    <item>
      <title>CtrlPとGitのls-filesサブコマンド</title>
      <link>http://hail2u.net/blog/software/ctrlp-and-git-ls-files.html</link>
      <description>CtrlPのヘルプのカスタム・コマンドの項に記載があるように、Gitのls-filesサブコマンドを使ったカスタム・コマンドを定義すると、.gitignoreを考慮してファイルをリストアップすることができる。ただ常にこちらである必要はないので、Git管理下だけでそうなるようにしたい。その場合、ラッパー関数を作成して、その中でb:ctrlp_user_commandを設定してやると良さそうだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/ctrlp-and-git-ls-files.html</guid>
      <pubDate>Tue, 17 Mar 2015 07:29:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/ctrlpvim/ctrlp.vim/blob/51888616a29eeddc933d8ec0596bd13e83231b90/doc/ctrlp.txt#L295-L361">CtrlPのヘルプのカスタム・コマンドの項</a>に記載があるように、Gitの<code>ls-files</code>サブコマンドを使ったカスタム・コマンドを定義すると、<code>.gitignore</code>を考慮してファイルをリストアップすることができる。ただ常にこちらである必要はないので、Git管理下だけでそうなるようにしたい。その場合、ラッパー関数を作成して、その中で<code>b:ctrlp_user_command</code>を設定してやると良さそうだ。</p>

<p><a href="/blog/software/call-ctrlp-vim-based-on-git-status.html">Git配下のファイルかどうかでCtrlPを切り替える</a>で作成した関数を元にして、<code>v:shell_error</code>が<code>0</code>の時も特別視してやるようにすることで実装した。カスタム・コマンドはヘルプのまま、Gitリポジトリーのルートへ移動して<code>ls-files</code>サブコマンドを呼んでいる。</p>

<pre><code>nnoremap &lt;Leader&gt;f :call &lt;SID&gt;CallCtrlPBasedOnGitStatus()&lt;Return&gt;

function! s:CallCtrlPBasedOnGitStatus()
  if exists(&#39;b:ctrlp_user_command&#39;)
    unlet b:ctrlp_user_command
  endif

  let s:git_status = system(&#39;git rev-parse --is-inside-git-dir&#39;)

  if v:shell_error == 0
    let b:ctrlp_user_command = [&#39;.git&#39;, &#39;cd %s &amp;&amp; git ls-files&#39;]
    execute &#39;CtrlP&#39;
  elseif v:shell_error == 128
    execute &#39;CtrlPCurFile&#39;
  else
    execute &#39;CtrlP&#39;
  endif
endfunction
</code></pre>

<p>まずバッファー・ローカルの変数にカスタム・コマンドの設定があったら削除しておく。そうしないと変数の型の問題で、定義を上書き出来なかったりすることがあるからだ。</p>

<p>その後、Gitの<code>rev-parse</code>サブコマンドを<code>--is-inside-git-dir</code>オプションを指定して呼ぶことで、カレント・ディレクトリーがGit管理下かどうかをチェックする。一応標準出力は拾っておくが、判断は終了コードのみで行う。</p>

<p>終了コードが<code>0</code>の場合は<code>ls-files</code>サブコマンドを呼ぶようにバッファー・ローカルの変数を設定してやり、普通にCtrlPを呼ぶ。<code>128</code>は管理下でなかった場合なので、その時は編集中のファイルのディレクトリーを使ってCtrlPを呼ぶように<code>CtrlPCurFile</code>を呼ぶ。変な終了コードが返ってきた場合のフォールバックとして、カスタム・コマンドを設定せずにCtrlPを呼ぶようにもしておいた。</p>

<p>うまく動いている気がする。autocommandを使ってバッファーを読み込んだ時に<code>b:ctrlp_user_command</code>を設定しても良さそうだったが、バッファー開く度にGitが呼ばれるのはちょっとコストが高い。なのでCtrlPを呼ぼうとした時にフックするように作った。CtrlPをつかう頻度によってはautocommandの方が効率的かもしれない。</p>

<hr>

<p>ただし、WindowsのVimで<code>set shell=sh</code>かつ<code>set shellslash</code>している場合、CtrlPが<a href="https://github.com/ctrlpvim/ctrlp.vim/blob/51888616a29eeddc933d8ec0596bd13e83231b90/autoload/ctrlp.vim#L405">カスタム・コマンドを呼ぶ時</a>にカレント・ディレクトリーのパス情報をバックスラッシュに変換してしまうためうまく動かない。CtrlPの修正が必要になるようだ。僕はとりあえず<code>autoload/ctrlp.vim</code>の405行目をコメントアウトして凌いでみている。</p>

<hr>

<p>コマンドの短縮形ばかりで書かれているVimスクリプト読みづらいな。</p>]]></content:encoded>
    </item>
    <item>
      <title>CSS MQPackerの行うソート</title>
      <link>http://hail2u.net/blog/webdesign/sorting-on-csmqpacker.html</link>
      <description>CSS MQPackerに加わったソート機能は完全なものではない。完全なものを実現するのが難しいこともあるが、必要とされていないからでもある。メインはmin-widthクエリーに絞り、それ以上は自前で用意してもらうというのは妥協であると同時に、僕の能力の限界でもある。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/sorting-on-csmqpacker.html</guid>
      <pubDate>Mon, 16 Mar 2015 04:04:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/hail2u/node-css-mqpacker">CSS MQPacker</a>に加わったソート機能は完全なものではない。完全なものを実現するのが難しいこともあるが、必要とされていないからでもある。メインは<code>min-width</code>クエリーに絞り、それ以上は自前で用意してもらうというのは妥協であると同時に、僕の能力の限界でもある。</p>

<p>メディア・クエリーにおいて<code>min-width</code>クエリーは以下のいずれかの書かれ方をする。</p>

<ol>
<li><code>(min-width: 100px)</code></li>
<li><code>(min-width: 100em)</code></li>
<li><code>(min-width: 100px) and (min-width: 200px)</code></li>
<li><code>not (min-width: 100px)</code></li>
<li><code>print and (min-width: 100px)</code></li>
<li><code>print, (min-width: 100px)</code></li>
</ol>

<p>CSS MQPackerのソート機能はこれらすべてを対象にするわけではない。</p>

<h2>シンプルなもの</h2>

<p>もちろん<code>min-width</code>クエリーのみのものは対象になる。この種類のクエリーには<code>screen</code>など主要なメディア・タイプを含むこともある。後述するが特別に無視されるのは<code>print</code>と同時に指定された場合だけだ。</p>

<p>単一の<code>min-width</code>クエリーが<code>px</code>単位を使って書かれている場合には話は単純で、それらの値を取り出して昇順にソートする。世の7割近くのメディア・クエリーはこれでカバーできるのではないかと思われる。</p>

<h2>単位の違い</h2>

<p><code>px</code>単位以外で書かれることももちろんあるし、混ざることもある……かもしれない(このウェブサイトでは混ざっている)。単位の違いは完全に吸収することは出来ない。CSS 2.1の時代からそうだが、CSSのみでは異なる単位間の完全な変換は行えないからだ。<code>v*</code>単位はもちろん、<code>pt</code>や<code>pc</code>も無理がある。それら対応していない単位を使っている場合には、例え<code>min-width</code>クエリーであってもソートの対象には含まれない。</p>

<ol>
<li><code>ch</code></li>
<li><code>em</code></li>
<li><code>ex</code></li>
<li><code>px</code></li>
<li><code>rem</code></li>
</ol>

<p>ソート対象に含まれる単位は以上の5つになる。これらの単位を<code>px</code>単位に変化した上で昇順にソートするというわけだ。<code>em</code>と<code>rem</code>は<code>16px</code>を基準に、<code>ch</code>と<code>ex</code>に関しては初期フォントをArialのNormalと仮定して変換している。</p>

<h2>複数のmin-width</h2>

<p>本当は意味が無いのだが、クエリーには<code>and</code>キーワードを使って複数の<code>min-width</code>クエリーが含まれることもあるかもしれない。<code>min-width</code>クエリーの場合、複数指定されるとその最も<em>大きい</em>値で発動することになる(<code>and</code>は論理積だからだ)。</p>

<p>そのため、複数の<code>min-width</code>クエリーが見つかった場合は、その中で最大の値を取り出し、それのみを使ってソートを行うことになる。</p>

<h2>否定のクエリー</h2>

<p>メディア・クエリーでは<code>not</code>キーワードを使ってそのクエリーを否定することができる。<code>min-width</code>クエリーの場合は<code>max-width</code>クエリーとほぼ同じような扱いになると考えて良いだろう。</p>

<p>これらはソートに含める必要はないので、無視する。</p>

<h2>printメディア・タイプ</h2>

<p>印刷向けスタイルシートはそれなりに需要が増えてきた。今はPDFで印刷するなども手軽に行えるようになったので、そこそこ提供しているウェブサイトも増えてきた印象だ。もちろん<code>min-width</code>クエリーと組み合わさって、用紙の大きさによって調整を行うこともあるだろう。</p>

<p>多くの場合はスクリーン向けと印刷向けのCSSを混ぜて書くことはないと思われるため、これも無視する。本当は<code>print</code>メディア・タイプを含むクエリーを特別扱いしてやると良いのだろうが、まだそこまでの需要はないだろう。</p>

<h2>クエリー・リスト</h2>

<p>メディア・クエリーでは複数のクエリーをリストにして指定することもできる。その場合、カンマ区切りで指定してやることになる。このカンマは論理和になるORと同じ意味を持つので、カンマで区切られたクエリーのいずれかにこれまでのルールに従い対象とするクエリーがあった場合、ソートされる。</p>

<p>例え他に<code>print</code>メディア・タイプを含むクエリーがあったとしても、だ。</p>

<hr>

<p>CSS MQPackerではこのようにしてソートの対象を選び出し、それらのみをソートする。対象ではない他のクエリーは、元のCSSファイルでの出現順を維持してまとめられる。また、ソートされたクエリーは他のクエリーの<em>前に</em>配置されるので、印刷向けCSSが意図せず前に来てしまうなどということは起こらない。</p>

<p>概ねうまく動作していることと思われる。バグはもちろん、対象を広げて欲しいなどといった要望は是非イシューを立てて欲しい。</p>

<hr>

<p>そのうち英語でリポジトリーのWikiにちゃんと書きたい。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150308.html</link>
      <description>寝てたら天井の隅からカエルがずっとピョコピョコ飛び出してくる。アマガエルくらいの大きさで、色は鮮やかな緑とたまにオレンジ。生きてるし鳴くけど、ヌメッとした感じじゃなくてフワッとした感じで、顔にぶつかるとすごく心地良かった。というのを3時間(夢時間)くらいずっと堪能していた。カエルがずっと降ってくるの悪夢っぽいけど、全体的にすごく気持ちの良い夢だった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150308.html</guid>
      <pubDate>Sun, 15 Mar 2015 17:31:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>寝てたら天井の隅からカエルがずっとピョコピョコ飛び出してくる。アマガエルくらいの大きさで、色は鮮やかな緑とたまにオレンジ。生きてるし鳴くけど、ヌメッとした感じじゃなくてフワッとした感じで、顔にぶつかるとすごく心地良かった。というのを3時間(夢時間)くらいずっと堪能していた。カエルがずっと降ってくるの悪夢っぽいけど、全体的にすごく気持ちの良い夢だった。</p>

<p>天気予報の番組で「三月六日は啓蟄で、カエルやヘビ、そして虫が出てくる日とされています」とかいうのを聞いた翌々日くらいの夢。単純すぎる自分がちょっと心配。</p>]]></content:encoded>
    </item>
    <item>
      <title>椅子なし生活</title>
      <link>http://hail2u.net/blog/misc/no-chair.html</link>
      <description>椅子を捨てた(廃棄してはいない)。でも別に流行っぽいスタンディング・デスクではなくて、ベッドを椅子代わりにしてる。まぁまぁ厚いマットレスで、ベッドフレームもそこそこ背が高い(掃除しやすくしたかったから)ものなので、机との差がだいたい20cmくらい。座るにはちょうど良い。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/no-chair.html</guid>
      <pubDate>Sat, 14 Mar 2015 02:57:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>椅子を捨てた(廃棄してはいない)。でも別に流行っぽいスタンディング・デスクではなくて、ベッドを椅子代わりにしてる。まぁまぁ厚いマットレスで、ベッドフレームもそこそこ背が高い(掃除しやすくしたかったから)ものなので、机との差がだいたい20cmくらい。座るにはちょうど良い。</p>

<p>椅子やめて背当てが無くなったら少し姿勢が良くなった。最初はそれまでと同じ姿勢でタイピングしていて腰が痛くなったけど、一週間くらいで姿勢が安定してきて痛くなったりしなくなった。ベッドはすぐに動かせないので、ベッドと机の位置関係はそのままに体できちんと調整しようとするためなのかな。ディスプレイとの距離も心持ち遠目で安定してきたような気がする。</p>

<p>難点はそこがベッドで布団があること。すぐダラっと寝れるのは非常に人をダラっとさせる。気を付けていてもすぐ寝る。</p>

<hr>

<p>背当てはともかく腰当ては欲しい感じするので、<a href="http://www.muji.net/store/cmdty/section/S10305"><del>ダメな人が買う</del>人をダメにするソファ</a>とかが良さそう。ともかく気に入った椅子が見つかるまではこれでいこうかなと思ってる程度には気に入ってる。本当は物置にある<a href="http://www.tendo-mokko.co.jp/">天童木工</a>のダイニングチェアでも再利用したい。塗装剥がして塗り直すの出来なくはなさそうだけど失敗したらショック大きそうなのでずっとためらってる。</p>]]></content:encoded>
    </item>
    <item>
      <title>BAFFALO 耐震ジェル BSTV04J32</title>
      <link>http://hail2u.net/blog/gadget/baffalo-bstv04j32.html</link>
      <description>かっこいい作業環境に影響されてドアに向けて机を置くようにした。ディスプレイ・アームは使っていたけど、机がそれほど重くないので、続けて使うのは無理そうかなーと付属スタンドを引っ張りだして付け直した。このままだと地震に対して不安なので耐震ジェルを980円で買った……けど失敗とまではいかないもののうーんという感じだった。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/baffalo-bstv04j32.html</guid>
      <pubDate>Fri, 13 Mar 2015 14:06:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="http://www.amazon.co.jp/gp/product/B00462PYF4/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00462PYF4&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="iBUFFALO 液晶TＶ専用耐震ジェル32型まで対応 BSTV04J32" src="http://ecx.images-amazon.com/images/I/310Vsb6lbyL.jpg"></a>
</figure>

<p><a href="http://lowreal.net/2015/02/13/1">かっこいい作業環境</a>に影響されてドアに向けて机を置くようにした。ディスプレイ・アームは使っていたけど、机がそれほど重くないので、続けて使うのは無理そうかなーと付属スタンドを引っ張りだして付け直した。このままだと地震に対して不安なので<a href="http://www.amazon.co.jp/gp/product/B00462PYF4/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00462PYF4&amp;linkCode=as2&amp;tag=hail2unet-22">耐震ジェル</a>を980円で買った……けど失敗とまではいかないもののうーんという感じだった。</p>

<p>この耐震ジェルを含めエラストマーのやつはそれなりに重さがあるものに使うことを想定しているみたい。液晶ディスプレイくらいだとそれほど重くもないので、ジェルがきっちり張り付かないっぽい。本当は剥がすのが大変なくらいピタッとつくみたい(盗難防止にもなるとか謳ってるくらいだし)だけど、ちょっと引っ張れば普通に剥がれる。机の表面がタモの突板なのもあるかもしれないので、なんとも言えないけど。</p>

<p>もうひとつ想定してなかったのはスイーベル(横の首振り)機能との相性。液晶ディスプレイのスイーベル機能は固定するところと回転するところが分離してることで実現されるわけだけど、僕の液晶ディスプレイはその固定する部分の幅が1cmもないくらいで、どうやってもそこにだけ耐震ジェルをはりつけるのは無理そうだった。確認不足。</p>

<hr>

<p>それなりには張り付いているようなのでそのまま使っている。なんかもっと良さそうな地震対策グッズがあればそれにしたいけど、机などを傷つけずに固定できるようなものはなさそう。</p>]]></content:encoded>
    </item>
    <item>
      <title>伝言ゲーム化するバグ報告</title>
      <link>http://hail2u.net/blog/coding/bug-reporting-telephone-game.html</link>
      <description>小さく作って組み合わせていくというやり方は、作る方からすると理にかなっている。自分の必要とする機能を実現するコードだけを書けば済むようになるからだ。使う方からしてもパッケージ・マネージャーがそれなりに動作すればさほど問題になることはない。ただバグを見つけた時に伝言ゲームになりやすいという問題がある。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/bug-reporting-telephone-game.html</guid>
      <pubDate>Thu, 12 Mar 2015 14:27:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>小さく作って組み合わせていくというやり方は、作る方からすると理にかなっている。自分の必要とする機能を実現するコードだけを書けば済むようになるからだ。使う方からしてもパッケージ・マネージャーがそれなりに動作すればさほど問題になることはない。ただバグを見つけた時に伝言ゲームになりやすいという問題がある。</p>

<p>小さく作っていく関係上、多くの場合はそういったライブラリー達をうまくラップしたものがエンド・ユーザーには使われる。具体的には以下のような構成になっていることだろう。</p>

<ol>
<li>標準仕様のみを正確に実装したライブラリー</li>
<li>1を限定的に扱うライブラリー</li>
<li>2を利用した単機能ライブラリー</li>
<li>3を複数扱うラッパー・ライブラリー</li>
</ol>

<p>4を使っている人がバグを見つけた場合、当然4に報告する。4の開発者がどうも3に原因があるらしいと判断した場合、3へ報告される。以下、3の開発者が2へ、2の開発者が1へ、と必要ならばバグは伝言ゲームのように伝わっていくことだろう。途中でバグの内容がうまく伝わらなくなり、戻ってきたりすることもある(それで良いことももちろんあるが)。または途中の開発者が忙しかったり、もう開発を投げていたりすると、1などの上流へバグが伝わらないこともある。</p>

<p>つまり、バグ報告に正確さが欠けやすいという問題と、上流のモジュールにバグ報告が到達しづらいという問題がある。これらの問題を避けるためには、なるべく上流にバグ報告をする必要があるが、それをしてしまうとせっかく小さい単位で作っている意味が少なくなってしまう。小さく作ることの目的の一つに、自分で書いたコード以外におけるバグの調査を他に投げられることがあるはずだからだ。</p>

<p>上流に直接報告することが難しいとなると、いかにこのバグ報告という伝言ゲームを途切らせないかが重要になる。すなわち、小さなライブラリーで構成される世界では、ライブラリーを選択する際、その歴史的な評価よりも開発の活発さの方が重要な要素になりうるということだ。上流へ速やかにバグが伝わり、下流へきちんとその修正が流れてくれば、開発者がアドホックな対策に追われる必要はなくなる。この流れが途切れないようにするためには開発の活発さが重要になるというわけだ。</p>

<hr>

<p>単純にコミットのペースだけではなく、週に閉じられたイシューの数やプルリクエストが立ってからの反応の早さなどでも開発の活発さを計ることができるだろう。むしろ後者の方が重要かもしれない。パッケージ・リポジトリーでの人気だけではなく、こういった点もライブラリーを選択する参考にすると良さそうだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>Eau Douce</title>
      <link>http://hail2u.net/blog/webdesign/eau-douce.html</link>
      <description>Source Sans Proに飽きてきたので、あまり使われてなさそうな、はっきり言えばGoogle Fontsには置いていない、あまり主張のないサンセリフのタイプフェイスを物色していた。最終的に前にも使おうかなと考えたことのあるEau Douceにした。おーどぅーす。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/eau-douce.html</guid>
      <pubDate>Wed, 11 Mar 2015 00:11:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="/images/blog/eau-douce.png"><img alt="Eau Douce" height="627" src="/images/blog/eau-douce.png" width="1200"></a>
</figure>

<p>Source Sans Proに飽きてきたので、あまり使われてなさそうな、はっきり言えばGoogle Fontsには置いていない、あまり主張のないサンセリフのタイプフェイスを物色していた。最終的に前にも使おうかなと考えたことのある<a href="http://www.yoworks.com/eau_douce/">Eau Douce</a>にした。おーどぅーす。</p>

<p>字形については無個性という謳い文句の通り、主張は少なくどんな文章にも悪くなさそうな印象だ。ウェイトも6つあり、このタイプフェイスひとつで幅広い要望に答えることができそうだ。残念ながら斜体はないが、日本語のウェブサイトの欧文に使うことを前提にするのなら致命的な欠点ではない。</p>

<hr>

<pre><code>@font-face {
  font-family: &#39;Eau Douce&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;Eau Douce&#39;),
    <mark>url(&#39;assets/fonts/eau-douce/r.woff2&#39;) format(&#39;woff2&#39;),</mark>
    url(&#39;assets/fonts/eau-douce/r.woff&#39;) format(&#39;woff&#39;);
}
</code></pre>

<p>フォントの読み込みは少し前に変えた通り、続けてCSSのみで行うことにした。OpenTypeフォーマットやSVGフォントのファイルを用意してまで幅広い環境サポートするのは馬鹿らしいと考えているが、WOFF2での配信は試してみたかったので、WOFFをメインに据えつつ、WOFF2を優先するようにもした。</p>

<table>
<thead>
<tr>
<th style="text-align:right">オリジナル</th>
<th style="text-align:right">WOFF</th>
<th style="text-align:right">WOFF2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">17,768 バイト</td>
<td style="text-align:right">23,824 バイト</td>
<td style="text-align:right">18,084 バイト</td>
</tr>
</tbody>
</table>

<p>WOFFに比べてWOFF2ではファイルサイズがちゃんと減っているものの、どちらもオリジナルよりも増えてしまった。<a href="http://www.freetype.org/ttfautohint/">ttfautohint</a>を通す以外には特に何も手を入れなかったので、多分そのせいだろう。もうちょっと色々調整してやらないとうまく小さくできなさそうだ。できれば15KB以下にはしたい。</p>

<hr>

<p>よく使われているタイプフェイスは時々嫌になってしまう。Source Sans Proはもちろん、Open SansやRoboto、そして商用のものでもProxima Novaなどは使われ過ぎててちょっと気になる。これらタイプフェイス自体が悪いわけでは決してない、むしろ優れているからこそ多くのウェブサイトで使われているわけだが、見慣れてしまうとそれほど良く見えてこなくなってしまう。</p>

<p>メジャーなだけあって、変なウェブサイトで使われているところを見てしまうこともそれなりにある。一度や二度なら「しょうがないか」と思えるが、四度も五度も見てしまうとやはり「うーん」となってしまう。</p>

<p>こういう感覚はまったく信用してはいけないのだが、どうしても自分だけで客観視して判断するのは難しい。しかし気になることをそのまま放置するのももやもやするだけなので、このウェブサイト程度の規模ならスパッと変えてしまっても良いだろう。継続のためには何よりもまず自分が快適と感じるウェブサイトである必要がある。</p>

<h2>追記</h2>

<p>ISO-8859-1あたりまでサブセット化したり、不要そうなOpenType機能を削除したりすることによって多少サイズを抑えることに成功した。</p>

<table>
<thead>
<tr>
<th>タイプ</th>
<th style="text-align:right">ファイルサイズ</th>
<th style="text-align:right">増減</th>
</tr>
</thead>
<tbody>
<tr>
<th>オリジナル</th>
<td style="text-align:right">17,768 バイト</td>
<td style="text-align:right">-</td>
</tr>
<tr>
<th>WOFF</th>
<td style="text-align:right">23,824 バイト</td>
<td style="text-align:right">+34%</td>
</tr>
<tr>
<th>WOFF (最適化)</th>
<td style="text-align:right">20,272 バイト</td>
<td style="text-align:right">+14%</td>
</tr>
<tr>
<th>WOFF2</th>
<td style="text-align:right">18,084 バイト</td>
<td style="text-align:right">+1%</td>
</tr>
<tr>
<th>WOFF2 (最適化)</th>
<td style="text-align:right">15,848 バイト</td>
<td style="text-align:right">-11%</td>
</tr>
</tbody>
</table>

<p>ヒンティングの調整を行わないと10KB程度までサイズを減らすことが出来た。やはりttfautohintによりかなりファイルサイズが肥大化するようだ。つまりttfautohintをかけた場合、元のOTFファイルよりもサイズが増えなかったら御の字程度に考えるのが良いと言える。</p>]]></content:encoded>
    </item>
    <item>
      <title>CSS MQPacker v3.1.0</title>
      <link>http://hail2u.net/blog/webdesign/node-css-mqpacker-v3.1.0.html</link>
      <description>min-widthを使ったクエリーのみをソートするオプションを追加し、CSS MQPacker v3.1.0をリリースした。sortオプションを有効にすると、まとめられたクエリーのうちmin-widthが使われるクエリーのみソートされる。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-css-mqpacker-v3.1.0.html</guid>
      <pubDate>Tue, 10 Mar 2015 00:29:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><code>min-width</code>を使ったクエリーのみをソートするオプションを追加し、<a href="https://github.com/hail2u/node-css-mqpacker">CSS MQPacker</a> v3.1.0をリリースした。<code>sort</code>オプションを有効にすると、まとめられたクエリーのうち<code>min-width</code>が使われるクエリーのみソートされる。</p>

<p>オプションの切り替えに対応するため、新たに引数を渡してインスタンスを作成できるようになった。今までの使われ方を壊さないように実装したので、今までのコードはそのまま動く。</p>

<pre><code>var mqpacker = require(&#39;css-mqpacker&#39;);

var result = mqpacker({
  sort: true
}).pack(css);
console.log(result.css);
</code></pre>

<p>ソート機能を有効にするには<code>sort</code>オプションを<code>true</code>にしてインスタンスを作成してやる。PostCSSのプロセッサー(プラグイン)として使う場合も同じだ。PostCSSのオプションに混ぜ込むことも可能だが、将来的な安全は保証されていないので推奨しない。なおデフォルトでは無効のため、明示的に有効にしてやる必要がある。</p>

<pre><code>@media (min-width: 2em) {}
@media print {}
@media (min-width: 48px) {}
@media (min-width: 16px) {}
.foo {}
@media (min-width: 48px) {}
@media (max-width: 8px) {}
@media (min-width: 2em) {}
@media (min-width: 16px) {}
</code></pre>

<p>例えばこのように<code>min-width</code>クエリーが散在し、それらが複数の単位を用いている上、他の種類のクエリーも混ざっているようなケースを処理してみよう。ありそうもないように思えるが、CSSプリプロセッサーで<code>@media</code>ルールをネストして書いていると似たような構成にはなりうるはずだ。</p>

<pre><code>.foo {}                     /* .foo {} */
@media (min-width: 16px) {} /* @media (min-width: 2em) {} */
@media (min-width: 2em) {}  /* @media print {} */
@media (min-width: 48px) {} /* @media (min-width: 48px) {} */
@media print {}             /* @media (min-width: 16px) {} */
@media (max-width: 8px) {}  /* @media (max-width: 8px) {} */
</code></pre>

<p><code>sort</code>オプションを有効にして処理すると、このように同じメディア・クエリーがまとめられ、後ろに回された上で、<code>min-width</code>クエリーのみがソートされる。わかりやすいように<code>sort</code>オプションを指定しない場合の順序もコメントで併記しておいた。</p>

<p><code>px</code>以外の単位はなんとなく<code>px</code>単位に変換(フォントの初期設定が16pxでArialとみなして変換を行う)されてソートされるので、複数の単位が混ざっていてもそれなりに機能する。<code>in</code>や<code>pt</code>など環境に強く依存する単位はサポートしていないので、無視されソートされることはない。<code>min-width</code>以外に<code>print</code>メディア・タイプなども含め特別視することはないので、それらは今まで通り出現順のまままとめられるというわけだ。</p>

<p>現状では<code>min-width</code>のみ、せいぜいそれに加えて<code>print</code>のみを使って書くのが主流と考えられるので、大抵は問題なく適切な状態に処理されることと思う。なにかおかしいところが見つけたら是非報告して欲しい</p>

<hr>

<p><code>sort</code>オプションには直接関数も指定することができる。こちらを使うと自由にソートすることができる。</p>

<pre><code>var result = mqpacker({
  sort: function (a, b) {
    return a.localeCompare(b);
  }
}).pack(css);
</code></pre>

<p>例えば<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare"><code>String#localeCompare</code></a>を使うと、雑に文字コード順でソートすることができる。</p>

<p>作成した関数は、<em>完全な</em>クエリーの配列に対する<code>Array#sort</code>へと渡される。例えばテストにある<a href="https://github.com/hail2u/node-css-mqpacker/blob/9c40f0a3bc613a86153a2ce719929c46cc4898ec/test/fixtures/sort_ignore-print-queries.css"><code>sort_ignore-print-queries.css</code></a>だと以下のような配列になる。</p>

<pre><code>[
  &quot;(min-width: 2em)&quot;,
  &quot;print and (min-width: 1em)&quot;,
  &quot;print, (min-width: 3em)&quot;,
  &quot;(min-width: 1em)&quot;
]
</code></pre>

<p>これをちゃんと処理しなければならないので、カンマ区切りの処理や<code>and</code>区切りの処理も自前で用意する必要がある。<code>min-width</code>だけでもかなり大変だったので、かなり苦労することと思う。そこそこちゃんとパースした結果を渡すというのも悪くはないと考えていたが、どちらかというとPostCSSというかAST側でやって欲しい機能なので、ツール側で持ってしまうのはやめておいた。</p>

<p>このソート関数の作成は汎用化しようとするとかなり大変な労力を必要とする。特化型で作るのなら簡単だが、その場合はCSS側でソート順を定義してやる方が更に手軽だったりもする。そのためまず出番はないことと思うがどうしても<code>max-width</code>で書きたいという場合などには役に立つかもしれない。</p>

<hr>

<p>ソートする機能の実装はとにかく面倒臭かった。<code>print and (min-width: 1px)</code>は無視して良さそうだが、<code>print, (min-width: 1px)</code>は無視するべきではなさそうだ、など、普段まともにCSSを書いている場合にはまったく考える必要のないエッジ・ケースで時間を浪費したので、ストレスが溜まった。既にいくつか見つけてしまったマイナーな解決できそうもない問題や<a href="http://www.w3.org/TR/mediaqueries-4/">Media Queries Level 4</a>の範囲指定クエリーのこととかで更に気が重い。それらが表面化する頃には、多数のファイルでメディア・クエリーを分散させつつ投げつけても怒られないHTTPS + HTTP/2時代になっていることに期待したい。</p>

<p>このウェブサイトでも同梱しているGruntプラグインのテストがてら稼働させ始めた。メディア・クエリーを抜き出すと以下のような順序で最後に追加されている。</p>

<pre><code>@media (min-width: 352px) {}
@media (min-width: 39.118rem) {}
@media (min-width: 53.487rem) {}
@media not screen {}
@media print {}
</code></pre>

<p>ちゃんと動いていそうだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>Istanbulとnodeunit</title>
      <link>http://hail2u.net/blog/software/istanbul-and-nodeunit.html</link>
      <description>Istanbulはよく使っていたのだけど、直接叩くことはなかった。初めてこれ単体でnodeunitと組み合わせて使おうかと、node_modules/.bin/nodeunitを引数に指定して実行してもうまく動かなかった。どうやらnodeunitパッケージ内のbin/nodeunitを指定しないとダメらしい。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/istanbul-and-nodeunit.html</guid>
      <pubDate>Mon, 09 Mar 2015 12:21:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/gotwarlost/istanbul">Istanbul</a>はよく使っていたのだけど、直接叩くことはなかった。初めてこれ単体で<a href="https://github.com/caolan/nodeunit">nodeunit</a>と組み合わせて使おうかと、<code>node_modules/.bin/nodeunit</code>を引数に指定して実行してもうまく動かなかった。どうやらnodeunitパッケージ内の<code>bin/nodeunit</code>を指定しないとダメらしい。</p>

<p>プロジェクト・ローカルにインストールしたnodeunitを使う場合、<code>node_modules/.bin/nodeunit</code>を叩いて実行する。</p>

<pre><samp>$ <kbd>./node_modules/.bin/nodeunit test</kbd>
</samp></pre>

<p>これをIstanbulでラップしてコード・カバレッジを調べたい場合、</p>

<pre><samp>$ <kbd>istanbul cover node_modules/nodeunit/bin/nodeunit -- test</kbd>
</samp></pre>

<p>というようにnpmが作成するラッパーではなく、nodeunitパッケージに含まれるスクリプトを直接叩くようにしてやらないと上手く動かないようだ。</p>

<hr>

<figure>
  <a href="/images/blog/istanbul-and-nodeunit.png"><img alt="Istanbulでnodeunitを使ってCSS MQPackerのコード・カバレッジを調査した結果" height="156" src="/images/blog/istanbul-and-nodeunit.png" width="672"></a>

  <figcaption>100% Code Coverage</figcaption>
</figure>

<p>ということでCSSWringとCSS MQPackerはめでたくカバレッジ100%に到達した。CSSWringでは再現できないバグのところを一つ無視させてるけど。</p>]]></content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Wed, 18 Mar 2015 06:34:00 +0900</lastBuildDate>
  </channel>
</rss>
