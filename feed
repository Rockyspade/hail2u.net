<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <copyright>Copyright © 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <atom:link rel="self" type="application/rss+xml" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>Digg Deeper</title>
      <link>http://hail2u.net/blog/internet/digg-deeper.html</link>
      <description>DiggにはDigg Deeperという機能がある。連携したソーシャル・ネットワークで複数回シェアされたURLをメールで送ってくれるというもの。メールの他にiOSアプリでの通知やDigg Readerでも読むことができる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/digg-deeper.html</guid>
      <pubDate>Sat, 18 Oct 2014 02:29:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://digg.com/"&gt;Digg&lt;/a&gt;には&lt;a href="http://blog.digg.com/post/91454524841/digg-deeper"&gt;Digg Deeper&lt;/a&gt;という機能がある。連携したソーシャル・ネットワークで複数回シェアされたURLをメールで送ってくれるというもの。メールの他にiOSアプリでの通知や&lt;a href="https://digg.com/reader"&gt;Digg Reader&lt;/a&gt;でも読むことができる。&lt;/p&gt;

&lt;p&gt;フォローしている人をそれなりに厳選しているほど、教えられるURLは興味と合致する確率が高くなる。しかしトリガーは所詮複数回シェアされたというだけに過ぎないので、そもそも見逃しにくかったりする。加えて上澄みの上澄みといった類いのURLなので、それほど発見のあるURLではない可能性が高い。&lt;/p&gt;

&lt;p&gt;そのためプッシュかそれに準じるような形で読んでもあまり面白くない。&lt;/p&gt;

&lt;p&gt;ただDigg Readerで見る場合はちょっと良いのかなとも思う。RSSリーダーを見る過程で前日や今週といったスパンで話題になったことを思い出せることになる。メールだと見て終わりだが、RSSリーダーの一部だとストックされるので振り返りに使いやすいんではないかなと感じた。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕は&lt;a href="https://feedly.com/"&gt;Feedly&lt;/a&gt;を使っているので、どうにかしてDigg Deeperを低コストでFeedlyのSaved for laterに流したい。Gmailのフィルターで転送やIFTTTでGmail読むのが良さそうかなと思ったけど、URLが簡単に拾えるような形でないので、どちらもちょっと無理そう。GmailからTumblrに流して、そのRSS経由でFeedlyというのは可能そうだけど、専用のTumblrアカウントが必要で微妙。API待ちか。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>定義ごとにまとめたルールセット</title>
      <link>http://hail2u.net/blog/webdesign/declaration-just-once.html</link>
      <description>CSS, DRY, and Code Optimizationという記事を読んだ。この記事ではメンテナンス性を重視したCSSの最適化について書かれている。いわゆる自然な書き方、つまりHTMLの構造をストレートに反映させたルールセットごとに定義(プロパティーと値のセット)を書いていくよりも、定義ごとにルールセットを作成してそれにセレクターを複数割り当てていく方が優れているという。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/declaration-just-once.html</guid>
      <pubDate>Fri, 17 Oct 2014 03:54:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://meiert.com/en/blog/20141009/css-dry-and-optimization/"&gt;&lt;img alt="Declaration Just Once" src="http://hail2u.net/images/blog/declaration-just-once.png"&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://meiert.com/en/blog/20141009/css-dry-and-optimization/"&gt;CSS, DRY, and Code Optimization&lt;/a&gt;という記事を読んだ。この記事ではメンテナンス性を重視したCSSの最適化について書かれている。いわゆる自然な書き方、つまりHTMLの構造をストレートに反映させたルールセットごとに定義(プロパティーと値のセット)を書いていくよりも、定義ごとにルールセットを作成してそれにセレクターを複数割り当てていく方が優れているという。&lt;/p&gt;

&lt;p&gt;具体的なまとめ方は&lt;a href="https://developers.google.com/speed/articles/optimizing-css"&gt;CSS: Using every declaration just once&lt;/a&gt;というGoogleのドキュメントに詳しい。タイトルの通り、同じ定義が二度と出てこないように書いていくようだ。&lt;/p&gt;

&lt;p&gt;サイズ的なメリットはともかくとして、メンテナンス性という面では確かに良さそうではある。CSSにおける保守は、定義の修正と追加が大半を占めるので、定義がユニークであるとどこをどう直せば良いのかすぐにわかるだろう。&lt;/p&gt;

&lt;p&gt;デメリットとしては自然でない書き方であることもそうだが、メンテナンス性においても若干の不安はある。クラス名のリネームはぎりぎり何とかなるだろうが、既存のルールセットと多くを共有するような新たな要素を追加した場合、その要素を表現するセレクターを各ルールセットに追加していく必要がある。これはかなりの注意を必要とする作業な上、機械化もしづらい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;印象としては、修正や更新には強いものの、追加や削除に弱く、スケールしないんじゃないかなというものだ。この記事の著者であるJens Meiertは&lt;a href="http://meiert.com/en/blog/20091118/useful-universal-usable-unobtrusive/"&gt;コンパクトなCSSを好むような人&lt;/a&gt;だと思うので、そういう視点でのものでもありそうだ。小規模のウェブサイトには向いた書き方なのかもしれない。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>静的ファイルのみのホスティング</title>
      <link>http://hail2u.net/blog/internet/static-file-only-hosting.html</link>
      <description>ここしばらく使わせやすい静的ファイルのみをホスティングしてくれるサービスを探している。理想としては特定のローカル・ディレクトリーがそのまま公開されるようなサービスだ。FTPフォルダー的なものを実現するクライアントまで用意されているサービスだと言っても良い。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/static-file-only-hosting.html</guid>
      <pubDate>Thu, 16 Oct 2014 02:13:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ここしばらく使わせやすい静的ファイルのみをホスティングしてくれるサービスを探している。理想としては特定のローカル・ディレクトリーがそのまま公開されるようなサービスだ。FTPフォルダー的なものを実現するクライアントまで用意されているサービスだと言っても良い。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;は僕の中では理想に近く、自分で使う分にはまったく問題ないが、誰かに使わせようとすると途端に敷居が高くなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gitのインストールとその利用の仕方&lt;/li&gt;
&lt;li&gt;GitHubのアカウントの取得と設定&lt;/li&gt;
&lt;li&gt;GitHub Pagesの作成と更新&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このあたりの仕組みを教えないとならない。これらは一部を自動化するような仕組みを作って提供することも可能だが、そういうものは当初は良くても後々自分か赤の他人の首を絞めることになることはまず間違いないだろう。&lt;/p&gt;

&lt;p&gt;世の中には例えば&lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt;の一部ディレクトリーをそのまま公開してくれるようなサービスはある。これは説明のしやすさや導入の敷居という点では及第点であると言えそうだ。そういったサービスとの連携を設定済みのDropboxアカウントを作成し、そのアカウントでログインしてもらうようにすれば良いだけだからだ。&lt;/p&gt;

&lt;p&gt;ただDropboxをそれ専用にしてしまうことになるのはなかなか厳しい。GitHubと違いかなりの確率で個人的に使っている人はいることだろう。それぞれのアカウントでホスティングを行ってくれるサービスとの連携を設定してもらうというのは、日本のサービスではないことから説明の時点でかなり面倒であるし、理解してもらうのは至難だろう。別に専用のアカウントで作業してくれというのは不可能ではないが、その妥当性を説明するのもまた難しい。&lt;/p&gt;

&lt;p&gt;サービスの継続性などに目を瞑っても、こういったイマドキのホスティング環境はまだまだ&lt;em&gt;使わせる&lt;/em&gt;というレベルに至ったものではないんじゃないかと思う。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;そんなわけでいわゆるCGIやPHPなどが動かない静的ファイルのみの普通のホスティング・サービスをそこそこ使わせていたりしている。古き良きFTPフォルダーなどを使ってシームレスに連携する方法を教えるのはあまり難しくなく、そうでないその他の方法も枯れたシステムなので安心して使わせることができる。ミラーリングなど複雑なことをさせることは無理があるが、ファイルの追加や削除、編集などに関してはまず問題は起きない。&lt;/p&gt;

&lt;p&gt;けれどもやはり様々な不安は残る。特に古いシステムなので、動くことは動く程度の解でしかないことは安心からは程遠い。何か良いソリューションを探し求める日々は当分続くことになるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>GitHubのwebhooks経由でのPubSubHubbubによるフィードの更新通知</title>
      <link>http://hail2u.net/blog/internet/publishing-feed-via-pubsubhubbbub-using-github-webhooks.html</link>
      <description>PubSubHubbubでフィードの更新通知を行う場合、当然RSSやらが更新された後に行う必要がある。GitHub Pagesにウェブサイトをホスティングさせている場合、ビルドにどれくらい時間がかかるかは不定なので、ローカルで行うことは難しい。しかし、当該リポジトリでwebhookをうまく作成してやると、ビルド完了後に自動で更新通知を行わせることが出来るようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/publishing-feed-via-pubsubhubbbub-using-github-webhooks.html</guid>
      <pubDate>Wed, 15 Oct 2014 00:55:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/PubSubHubbub"&gt;PubSubHubbub&lt;/a&gt;でフィードの更新通知を行う場合、当然RSSやらが更新された後に行う必要がある。&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;にウェブサイトをホスティングさせている場合、ビルドにどれくらい時間がかかるかは不定なので、ローカルで行うことは難しい。しかし、当該リポジトリでwebhookをうまく作成してやると、ビルド完了後に自動で更新通知を行わせることが出来るようだ。&lt;/p&gt;

&lt;p&gt;GitHubリポジトリへの&lt;code&gt;push&lt;/code&gt;とGitHub Pagesのビルドには一定でないラグがどうしてもある。&lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;を使っているかどうかが一番大きいが、それだけでもないので、何分経てばビルドが終わり、RSSが更新されているかは確実には言えない。かといってその確認をポーリングで行うのはコストが高い。&lt;/p&gt;

&lt;p&gt;そこで確実にビルド後に更新通知を行えるように、リポジトリで設定できるwebhook (Settings→Webhooks &amp;amp; Services)のトリガーのひとつである&lt;em&gt;Page build&lt;/em&gt;を利用する。ただし、リファレンス実装のPubSubHubbubハブはGitHubのwebhooksが送るデータは解釈できないし、またwebhook側の設定でも通知するデータをカスタマイズすることはできないので、真っ当に利用しようとする場合はプロクシーを作る必要があることになる。&lt;/p&gt;

&lt;p&gt;しかし、運が良いことに&lt;a href="https://pubsubhubbub.appspot.com/"&gt;GoogleのPubSubHubbubハブ&lt;/a&gt;や&lt;a href="https://superfeedr.com/"&gt;Superfeedrで作成したハブ&lt;/a&gt;は&lt;code&gt;POST&lt;/code&gt;だけでなく&lt;em&gt;&lt;code&gt;GET&lt;/code&gt;でもpublishできる&lt;/em&gt;ので、作成するwebhookのPayload URLで&lt;code&gt;hub.url&lt;/code&gt;パラメーターの値としてRSS等のURLを指定してやればちゃんと更新を通知することができる。&lt;/p&gt;

&lt;pre&gt;https://pubsubhubbub.appspot.com/publish?&lt;mark&gt;hub.mode=publish&lt;/mark&gt;&amp;amp;&lt;mark&gt;hub.url=http://example.com/feed&lt;/mark&gt;&lt;/pre&gt;

&lt;p&gt;GoogleのPubSubHubbubハブへ通知する場合はこのようなURLを指定すれば良い。Content-Typeは&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;に、Secretは空のまま、トリガーの設定はLet me select individual events.を選択してPage buildのみにチェックを入れれば良いだろう。&lt;/p&gt;

&lt;p&gt;正常に動いているかは当該webhookのログでは確認できないが、最低限&lt;code&gt;204&lt;/code&gt;が返ってきていることだけは確認しておくと良い。実際に通知がうまく言っているかどうかはPubSubHubbubへ対応している&lt;a href="https://feedly.com/"&gt;Feedly&lt;/a&gt;などのクライアントで確認するしかないと思う。&lt;/p&gt;

&lt;p&gt;このウェブサイトのRSSとFeedlyで確認した限りではきちんと動いてるようだ。少なくとも直近3つの記事を公開した時は1分以内にFeedlyで読めるようになっていた。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>GitHub Pagesへ移行した</title>
      <link>http://hail2u.net/blog/internet/hello-github-pages.html</link>
      <description>好みの問題でJekyllはどうしても使う気になれないのでビルド・システムはそのままに、ホスティング先をGitHub Pagesに移動した。DNS設定もTTL通り5分で反映され、www付きのリダイレクトもうまくいっているようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/hello-github-pages.html</guid>
      <pubDate>Tue, 14 Oct 2014 10:12:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="GitHub Pages" src="http://hail2u.net/images/blog/hello-github-pages.png"&gt;
&lt;/figure&gt;

&lt;p&gt;好みの問題で&lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;はどうしても使う気になれないのでビルド・システムはそのままに、ホスティング先を&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;に移動した。DNS設定もTTL通り5分で反映され、www付きのリダイレクトもうまくいっているようだ。&lt;/p&gt;

&lt;p&gt;ビルド・システムは変えないと決めたので、今まではrsyncでリモート・サーバーにミラーしていたのを、そのまま&lt;code&gt;build&lt;/code&gt;という名前のサブディレクトリーにミラーするように変える方法にした。その後常に&lt;code&gt;gh-pages&lt;/code&gt;ブランチをチェックアウトしている&lt;code&gt;build&lt;/code&gt;ディレクトリーで全追加(&lt;code&gt;add --all&lt;/code&gt;)してからコミット、そして&lt;code&gt;push&lt;/code&gt;するという形で公開する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;記事ファイルの作成&lt;/li&gt;
&lt;li&gt;ウェブサイト管理用リポジトリー(プライベート)にコミット&lt;/li&gt;
&lt;li&gt;HTMLとRSS、およびサイトマップの生成&lt;/li&gt;
&lt;li&gt;rsyncで必要なファイルだけサブディレクトリーにミラー&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hail2u/hail2u.net"&gt;ウェブサイト公開用リポジトリー&lt;/a&gt;にコミット&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このようなフローがGruntで自動実行され、ウェブログの記事はさっくりと公開される。&lt;/p&gt;

&lt;h2&gt;ドメインの設定&lt;/h2&gt;

&lt;p&gt;wwwの無いいわゆるエイペックス・ドメインはAレコードで設定した。&lt;a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/"&gt;Tips for configuring an A record with your DNS provider&lt;/a&gt;によると、昔と違って今は複数のIPアドレスを割り当ててやる必要があるようで、それだけには注意した。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;C:&amp;gt; &lt;kbd&gt;nslookup hail2u.net&lt;/kbd&gt;
権限のない回答:
名前:    hail2u.net
Addresses:  192.30.252.153
          192.30.252.154
&lt;/samp&gt;&lt;/pre&gt;


&lt;p&gt;www付きでのアクセスをwww無しへリダイレクトさせたい場合は、更にwwwサブドメインをCNAMEを使って&lt;code&gt;hail2u.github.io.&lt;/code&gt;に割り当ててやるだけで良いようだ。そうすると対象リポジトリに置かれた&lt;code&gt;CNAME&lt;/code&gt;ファイルの中身に従ってGitHub側が良きに計らってくれるようになっている。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;色々あーでもないこーでもないと考えたりしてる中で、デプロイに使っているオレオレGruntタスクが総入れ替えみたいな感じになった。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>git grepをVimで使う</title>
      <link>http://hail2u.net/blog/software/using-git-grep-with-vim.html</link>
      <description>Gitのgrepサブコマンドは通常Gitリポジトリーでしか使えない。しかし--no-indexオプションを付けると、Gitリポジトリーではないディレクトリーでも検索できる(もちろんGitリポジトリーでも)。Vimからももちろん使えるので、ackちょっと遅い、ag入れるのが面倒くさい、MSYS上で使ってるとjvgrepの出力が稀におかしい、などの理由でgrepに戻ったりしてる人はgit grepを使うのも良さそう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/using-git-grep-with-vim.html</guid>
      <pubDate>Mon, 13 Oct 2014 00:59:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Gitの&lt;code&gt;grep&lt;/code&gt;サブコマンドは通常Gitリポジトリーでしか使えない。しかし&lt;code&gt;--no-index&lt;/code&gt;オプションを付けると、Gitリポジトリーではないディレクトリーでも検索できる(もちろんGitリポジトリーでも)。Vimからももちろん使えるので、&lt;a href="http://beyondgrep.com/"&gt;ack&lt;/a&gt;ちょっと遅い、&lt;a href="http://geoff.greer.fm/ag/"&gt;ag&lt;/a&gt;入れるのが面倒くさい、MSYS上で使ってると&lt;a href="https://github.com/mattn/jvgrep"&gt;jvgrep&lt;/a&gt;の出力が稀におかしい、などの理由でgrepに戻ったりしてる人は&lt;code&gt;git grep&lt;/code&gt;を使うのも良さそう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set grepprg=git\ grep\ --no-index\ -I\ --line-number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;grepformat&lt;/code&gt;を編集しないで済ませるためには&lt;code&gt;--line-number&lt;/code&gt;オプションを追加して、行番号を表示させる必要がある。僕はバイナリ・ファイルを無視する&lt;code&gt;-I&lt;/code&gt;オプションも合わせて追加しておいた。パフォーマンスをあげるために&lt;code&gt;--no-color&lt;/code&gt;オプションを付けるのも良さそう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Gitの&lt;code&gt;grep&lt;/code&gt;サブコマンドだと、グロブの指定をせずにデフォルトで再帰的に下層ディレクトリーを検索してくれるのも楽。検索対象を絞りたい場合はglob(7)に従った形で指定したり、&lt;code&gt;--max-depth&lt;/code&gt;オプションを追加して制限したりするだけなので、わかりにくいということはなさそう。agのオプションは覚えられる気しないけど、これなら大丈夫っぽい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>白の無地Tシャツ</title>
      <link>http://hail2u.net/blog/gadget/white-plain-t-shirt.html</link>
      <description>GAPのClassic.Tがついに終息したらしく、店頭から消えた。新しいEssential crewneckは薄くなってる上にちょっと肌触りが違う感じがする。生地の厚さや着丈、首の開き具合、丈夫さ、タグ無し、そして値段などさまざまな点でGAPのClassic.Tは気に入っていたので、これと同じくらい気に入る白の無地Tシャツを探すのは大変そう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/white-plain-t-shirt.html</guid>
      <pubDate>Sun, 12 Oct 2014 00:07:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://www.gap.co.jp/"&gt;GAP&lt;/a&gt;のClassic.Tがついに終息したらしく、店頭から消えた。新しいEssential crewneckは薄くなってる上にちょっと肌触りが違う感じがする。生地の厚さや着丈、首の開き具合、丈夫さ、タグ無し、そして値段などさまざまな点でGAPのClassic.Tは気に入っていたので、これと同じくらい気に入る白の無地Tシャツを探すのは大変そう。&lt;/p&gt;

&lt;p&gt;商品の性格的にも値段的にも試着しづらいので、勘で買うしかないのが精神衛生上良くない。少し前に公開されていた&lt;a href="http://www.houyhnhnm.jp/series/008356.html"&gt;Houyhnhnmの無地Tシャツ特集&lt;/a&gt;を見たりしてみたけど、まったくピンと来ない。そのうちHanesのJapan Fitとかを騙されて買ってしまいそう。&lt;/p&gt;

&lt;p&gt;一生買い続けるつもりだったくらい気に入ってたものが消えると言葉にならないくらい辛い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Mobile Safari 8でposition: fixedした擬似要素が完全に位置が固定されない</title>
      <link>http://hail2u.net/blog/webdesign/fixed-pseudo-element-on-mobile-safari-8.html</link>
      <description>Style GuideをMobile Safari 8で確認していて気づいたのだけど、擬似要素をposition: fixedした場合、スクロールしている最中は位置が変化しないようだ。つまりスクロールを止めた後で位置がアップデートされるので、他のブラウザーのように完全に位置が固定されない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/fixed-pseudo-element-on-mobile-safari-8.html</guid>
      <pubDate>Sat, 11 Oct 2014 01:01:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt=".elm::before { position: fixed }" src="http://hail2u.net/images/blog/fixed-pseudo-element-on-mobile-safari-8.png"&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://hail2u.net/about/style-guide/"&gt;Style Guide&lt;/a&gt;をMobile Safari 8で確認していて気づいたのだけど、擬似要素を&lt;code&gt;position: fixed&lt;/code&gt;した場合、スクロールしている最中は位置が変化しないようだ。つまりスクロールを止めた後で位置がアップデートされるので、他のブラウザーのように完全に位置が固定されない。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="http://hail2u.net/pub/test/598.html"&gt;Fixed Pseudo Element on Mobile Safari 8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモでは見出しと概要に続く「Lorem Ipsum」という文字列が擬似要素として仕込んである。これを同時に&lt;code&gt;position: fixed&lt;/code&gt;で位置固定しているが、Mobile Safari 8ではスクロール中は位置が変化しないので、画面外にスクロールアウトしてしまう。スクロールを止めると位置固定で期待される位置に改めて描画される。&lt;/p&gt;

&lt;p&gt;擬似要素ではない場合は今まで通り完全に位置が固定される。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;パフォーマンスの向上を受けてか&lt;a href="http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal/"&gt;Mobile Safari 8でJavaScriptでのスクロール・イベントの扱いが少し変わったこと&lt;/a&gt;は注目されているが、CSSでは場合によっては似たようなことがまだ起こるようだ。&lt;/p&gt;

&lt;p&gt;回避方法はまったく思いつかない。ただバグだとは思うので、そのうち直りそうではある。それまでは擬似要素と位置固定の組み合わせは鬼門と覚えておいた方が良さそうだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>pre要素での折り返し</title>
      <link>http://hail2u.net/blog/webdesign/wrapping-in-pre-element.html</link>
      <description>長らくpre要素で折り返されるようにしていたが、少し前に折り返さずにスクロールバーを表示するように変更した。主な理由は狭い画面では折り返されると読めたものではないということがはっきりとわかったからだ。しかしそこそこ広い画面では折り返された方が読みやすいし、見た目の収まりも良い。つまりメディアクエリでうまいこと分岐すると良いようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/wrapping-in-pre-element.html</guid>
      <pubDate>Thu, 09 Oct 2014 22:44:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;長らく&lt;code&gt;pre&lt;/code&gt;要素で折り返されるようにしていたが、少し前に折り返さずにスクロールバーを表示するように変更した。主な理由は狭い画面では折り返されると読めたものではないということがはっきりとわかったからだ。しかしそこそこ広い画面では折り返された方が読みやすいし、見た目の収まりも良い。つまりメディアクエリでうまいこと分岐すると良いようだ。&lt;/p&gt;

&lt;p&gt;このウェブサイトではコンテンツが収まるような幅という基準でレイアウトを切り替えているので、&lt;code&gt;pre&lt;/code&gt;要素への折り返しの適用もそこで分岐することにした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pre {
  overflow-x: auto;
}

@media (min-width: 39.118rem) {
  pre {
    overflow-x: visible;
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにするとデフォルトでは&lt;code&gt;overflow-x: scroll&lt;/code&gt;によって横スクロールで表示させるようになる(ブラウザーとOSによってはスクロールバーが表示される)。&lt;code&gt;39.118rem&lt;/code&gt; (色々な計算に基づくものなので中途半端な数字になっている)を超えると、&lt;code&gt;overflow-x&lt;/code&gt;プロパティーが規定値の&lt;code&gt;visible&lt;/code&gt;に戻り、&lt;code&gt;white-space&lt;/code&gt;と&lt;code&gt;overflow-wrap&lt;/code&gt;プロパティーによりURLのような折り返されにくい文字列も含め折り返されるように変化する。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;モバイル機器では横スクロールは自然に行える作業なので、横にはみ出していたら横にスワイプするというのはもはやユーザーも学習しえたのではないかと思う。&lt;a href="http://hail2u.net/blog/webdesign/horizontal-overflowed-navigation.html"&gt;Appleのウェブサイトでグローバル・ナビゲーションに採用されたこと&lt;/a&gt;も後押ししてくれる。と、思う。&lt;/p&gt;

&lt;p&gt;そう考えて横スクロールを強制する形にした(戻した)のだけど、&lt;code&gt;overflow-x&lt;/code&gt;により横スクロールバーが表示されると非常にうっとうしいことも思い出した。特にWindowsではいまだ自動非表示スクロールバーに確実にする方法が無いので、読み進める方向と直交する方向にUIウィジェットがどっかと居座るのはかなり厳しい。&lt;/p&gt;

&lt;p&gt;それぞれに向いた表示を両立するためには、メディアクエリで適切に分岐するのが良いのではないかと考えてこうしてみた。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>反論</title>
      <link>http://hail2u.net/blog/misc/refutation.html</link>
      <description>好きなものや気に入っているものについて否定された時に、そうじゃないだろと反論したい気になるのはわかる。しかし、往々にして反論のための論理で食ってかかることが多く、それでは溝を広げる結果にしかならない。溝を埋めることは難しいが、食ってかかってわざわざ溝を広げる必要もない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/refutation.html</guid>
      <pubDate>Thu, 09 Oct 2014 12:32:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="Face with No Good Gesture" src="http://hail2u.net/images/blog/refutation.png"&gt;
&lt;/figure&gt;

&lt;p&gt;好きなものや気に入っているものについて否定された時に、そうじゃないだろと反論したい気になるのはわかる。しかし、往々にして反論のための論理で食ってかかることが多く、それでは溝を広げる結果にしかならない。溝を埋めることは難しいが、食ってかかってわざわざ溝を広げる必要もない。&lt;/p&gt;

&lt;p&gt;反論のための論理で展開される記事でありがちなのは、否定された点についてすべて反論するような形のものだ。対象のトピックについて気に入ってはいてもパーフェクトであることはまずないので、それらのいくつかは自分が今までまったく気にしていなかった点や我慢していた点が必ず含まれるはずだ。そういった点に対しても反論しようとすると、反論のポイントがずれやすい。&lt;/p&gt;

&lt;p&gt;そういった反論は埋めたい溝とは見当違いのところを埋めようとする作業に他ならない。そのため溝を埋めるどころか、周辺の味方に迷惑をかけることになる。&lt;/p&gt;

&lt;p&gt;そのような記事は、最終的に反論することそのものが主眼に置かれた記事という印象になりやすい。そういう印象の記事は、たとえ書かれた反論のいくつかに見るべきところがあっても、読者が適切に消化することは難しくなる。下手をするとトピックについて好意的に考えていた読者を混乱させて、ネガティブな印象を与えてしまうことになる。&lt;/p&gt;

&lt;p&gt;近頃は溝を埋めるのではなく溝を飛び越えてもらおうと、魅力的に演出するような形で記事が書かれることが多くなった。反論のための記事よりは形としてはまだ良いが、こちらは飛び越えてもらった後に幻滅される危険性があり、結果としてはもっと厳しいものになる。狙いとしては5人飛び越えてもらって2人残ればいいというようなものなのだろうけれども、見方を変えると3人の相容れない人々を作り出すことになる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;反論や誘導といった自分の都合に近いものを主眼に置いて記事を書くと、それに振り回される人々や振り回された人々の周囲にいる人々をただただ疲弊させる結果になる。と言うと近いだろうと思う。&lt;/p&gt;

&lt;p&gt;とにかく何かを否定するのはすごく難しいので、よほどの事情が無い限りはしないことにしている。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「rsync-ac (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-rsync-ac</link>
      <pubDate>Mon, 07 Jul 2014 16:30:38 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-rsync-ac</guid>
      <description>&lt;p&gt;rsync-ac (Gruntプラグイン)は&lt;a href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt;を使って他のディレクトリへファイルをコピーするGruntプラグインです。オプション設定を絞ることであまり考えずに使えるようにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「pubsubhubbub_publish (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-pubsubhubbub_publish</link>
      <pubDate>Mon, 07 Jul 2014 00:44:37 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-pubsubhubbub_publish</guid>
      <description>&lt;p&gt;pubsubhubbub_publish (Gruntプラグイン)はGoogleが提供している&lt;a href="https://pubsubhubbub.appspot.com/"&gt;PubSubHubbubハブ&lt;/a&gt;へ指定したURLのフィードを&lt;code&gt;publish&lt;/code&gt;するGruntプラグインです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「Picks」を追加</title>
      <link>http://picks.hail2u.net/</link>
      <pubDate>Sun, 06 Jul 2014 04:48:23 +0900</pubDate>
      <guid isPermaLink="true">http://picks.hail2u.net/</guid>
      <description>&lt;p&gt;Picksは僕が興味をもった様々なURLをアイコンをヒントにざっと眺めることの出来るウェブサイトです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WEB+DB Press Vol.81にて「イマドキHTML/CSS開発」を執筆</title>
      <link>http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</link>
      <pubDate>Thu, 19 Jun 2014 15:31:33 +0900</pubDate>
      <guid isPermaLink="true">http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</guid>
      <description>&lt;p&gt;Web標準技術の進歩やデバイスの多様化といったWebをとりまく環境の急激な変化は、従来のWebサイト開発手法を時代遅れのものとしつつあります。設計から実装・検証、そしてデバイスへの最適化まで、ワークフロー全体の変革が求められているということです。本特集では、現在はもちろん、これからも増大し続ける多様性を見据えてどのような開発手法をとっていくべきかについて、実例を交じえながら詳しく解説していきます。6月24日発売、&lt;a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069"&gt;Amazonにて予約受付中&lt;/a&gt;です！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「UnUTM」を追加</title>
      <link>https://github.com/hail2u/unutm</link>
      <pubDate>Thu, 12 Jun 2014 06:32:16 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/unutm</guid>
      <description>&lt;p&gt;UnUTMはウェブページのURLからGoogle Analyticsなどで利用されているUrchin Traffic Monitor (UTM)用のパラメーターを自動的に削除し、URLの分散を解消するJavaScriptライブラリです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSSWring」を追加</title>
      <link>https://github.com/hail2u/node-csswring</link>
      <pubDate>Fri, 25 Apr 2014 08:19:34 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-csswring</guid>
      <description>&lt;p&gt;CSSWringはCSSを圧縮(minification)するNode.jsパッケージです。Node.jsパッケージとして組み込むだけでなく、コマンドラインからも実行できます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSS MQPacker」を追加</title>
      <link>https://github.com/hail2u/node-css-mqpacker</link>
      <pubDate>Sat, 22 Feb 2014 15:39:04 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-css-mqpacker</guid>
      <description>&lt;p&gt;CSS MQPackerはCSSファイル内に散在するメディアクエリを、クエリごとにまとめCSSファイルを最適化するNode.jsパッケージです。これを利用した&lt;a href="https://github.com/hail2u/grunt-css-mqpacker"&gt;Gruntプラグイン&lt;/a&gt;もあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Sat, 18 Oct 2014 02:29:00 +0900</lastBuildDate>
  </channel>
</rss>