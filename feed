<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>厚いレイヤー</title>
      <link>http://hail2u.net/blog/webdesign/thick-layer.html</link>
      <description>Sitepointに書かれたBEMやSMACSSを使っている開発者たちからのアドバイスを読んでいた。僕は今いかにして命名規則をなくすかといったことを考えている最中のため否定的に読んだが、それでもここに書かれたアドバイスは正しいとは感じた。BEMやSMACSSが概ね想定以上に機能することは確かだし、スケールするし、指揮もとりやすい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/thick-layer.html</guid>
      <pubDate>Sun, 18 Jan 2015 01:44:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Sitepointに書かれた&lt;a href="http://www.sitepoint.com/bem-smacss-advice-from-developers/"&gt;BEMやSMACSSを使っている開発者たちからのアドバイス&lt;/a&gt;を読んでいた。僕は今いかにして命名規則をなくすかといったことを考えている最中のため否定的に読んだが、それでもここに書かれたアドバイスは正しいとは感じた。BEMやSMACSSが概ね想定以上に機能することは確かだし、スケールするし、指揮もとりやすい。&lt;/p&gt;

&lt;p&gt;僕が避けたいのは&lt;em&gt;何かしらへの強い依存&lt;/em&gt;だ。薄いレイヤーならともかく、厚いレイヤーの場合は重度の依存をもたらす。その依存はこれからもそのまま通用するのかというと、不安が大きい。厚いレイヤーとは心中する覚悟が必要というのは正しいが、多くの場合心中する羽目になるのは導入した人ではなかったりもする。もっと薄いレイヤーでウェブ標準(など)に寄せた形の解があれば安心できるはずだ。&lt;/p&gt;

&lt;p&gt;HTML 4.01に対するHTML5を始めとして、CSS 2.1に対するCSS 3、いわゆるJavaScriptに対するECMAScript 6は比較的薄い(技術的な点ではなく、アプローチとして)レイヤーと言える。こういったものなら移行もスムーズだし、受け入れられやすいし、学びやすいし、将来への不安も少ない。ウェブ標準外でそのようなものを実現できた・実現しているものを挙げるとすると、HTMLに対するMarkdownやMustache、CSSに対するSassのSCSS記法、JavaScriptに対するTypeScriptや6to5だろうか。&lt;/p&gt;

&lt;p&gt;厚いレイヤーとして作られているものは多い。例えばHTMLに対するTextileやHAML、Jade、Slimであったり、CSSに対するSassのインデント記法やStylusの省略記法であったり、JavaScriptに対するCoffeeScriptであったり、だ。筋が悪いわけでもなく、現在の選択肢としては適当で、むしろ現時点では厚いレイヤーのこれらの方が評価されることも多い。これらはウェブ標準のしがらみから飛び出してその枝を延ばし、開発者に生産性を始めとした多くの果実を与えるからだ。&lt;/p&gt;

&lt;p&gt;BEMやSMACSSがどちらに属すかというと、それは微妙なところだ。ウェブ標準とは特に干渉するわけではないのでそういう点では薄いが、命名規則なるものがウェブ標準にはないことを考えると、分厚く新たなレイヤーを追加してしまうものとも言える。その習得難易度や複雑化しつづける規則に鑑みると、厚いレイヤーになりつつあるのかなと感じる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;と言いつつ&lt;a href="https://github.com/hail2u/hail2u.net-styles"&gt;このウェブサイトのCSS&lt;/a&gt;は&lt;a href="http://hail2u.net/blog/webdesign/sass-and-bem.html"&gt;BEMをベースにしたアプローチ&lt;/a&gt;でプレースホルダー・セレクターとネストに意味を持たせて制作していたりする。この方法はかなり複雑なので汎用的ではないが、BEMのブロック・エレメント・モディファイアーという概念を継承したCSSの構造化というのは悪い解ではない。しかしそこに本来構造化されている(はず)のHTMLがあるのにも関わらず、その更に上に命名規則による構造化を行うレイヤーを設けることに疑問を持ち始めた。&lt;/p&gt;

&lt;p&gt;そんなわけでOOCSSを絶対として生まれたBEMやSMACSSといった命名規則に基づくCSSアーキテクチャーという代物を廃棄するため、&lt;a href="http://hail2u.net/blog/webdesign/oocss-drawbacks-and-gifts-of-every-declaration-just-once.html"&gt;同じ定義を二度書かないアプローチ&lt;/a&gt;を試行錯誤しているわけだ。BEMが嫌いになったとかそういうわけではなく、CSSアーキテクチャーなる代物が本当に必要なのかという疑問に対する答えを探すためだ。しっかりと構造化されたHTMLへ完全に従属させる形でCSSを書いても、昨今の高機能ないわゆる開発者ツールの助けがあればうまく機能するのではないか、というような思いつきを証明できるかというような話でもある。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>CSSWring v3.0.0とCSS MQPacker v3.0.0のリリース</title>
      <link>http://hail2u.net/blog/webdesign/csswring-and-css-mqpacker-v3.0.0.html</link>
      <description>CSSWringとCSS MQPackerのメジャー・バージョンをそれぞれ更新した。中身としてはPostCSSをv4.0.0に更新しただけと言って良い。PostCSS v3でしか動作しないツールやプラグインと組み合わせたい場合は引き続き古いバージョンを利用する必要がある。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/csswring-and-css-mqpacker-v3.0.0.html</guid>
      <pubDate>Sat, 17 Jan 2015 01:13:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://www.npmjs.org/package/csswring"&gt;CSSWring&lt;/a&gt;と&lt;a href="https://www.npmjs.com/package/css-mqpacker"&gt;CSS MQPacker&lt;/a&gt;のメジャー・バージョンをそれぞれ更新した。中身としてはPostCSSをv4.0.0に更新しただけと言って良い。PostCSS v3でしか動作しないツールやプラグインと組み合わせたい場合は引き続き古いバージョンを利用する必要がある。&lt;/p&gt;

&lt;p&gt;実際には結構簡単に対応はできたのだけど、CSS MQPackerでの空白の取り扱いでどうしようかなという感じだった。具体的に言うと&lt;code&gt;@charset&lt;/code&gt;ルールだけのような&lt;code&gt;between&lt;/code&gt;プロパティー(&lt;code&gt;@charset&lt;/code&gt;ルールの場合はその値と&lt;code&gt;;&lt;/code&gt;の間の空白)のないCSSに普通のルールセットを突っ込むとその&lt;code&gt;between&lt;/code&gt;プロパティー(ルールセットの場合はセレクターと定義群を括る&lt;code&gt;{&lt;/code&gt;の間の空白)が消えてしまう問題についてだ。&lt;/p&gt;

&lt;p&gt;例えばこのようなCSSをCSS MQPackerで処理すると、想定外の結果になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@charset &amp;#39;UTF-8&amp;#39;;

@media (min-width: 1px) {
  .foo {
    display: block;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@media&lt;/code&gt;ルールをまとめながら退避させていくと、このCSSは&lt;code&gt;@charset&lt;/code&gt;ルールのみになる。そのため改めてまとめた&lt;code&gt;@media&lt;/code&gt;ルールを追加しなおすと、以下のように改行とインデント、セミコロンがPostCSSのデフォルトへと修正された上で、クエリーや&lt;code&gt;.foo&lt;/code&gt;と&lt;code&gt;{&lt;/code&gt;の間の空白が消えてしまう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@charset &amp;#39;UTF-8&amp;#39;;
@media &lt;mark&gt;(min-width: 1px){&lt;/mark&gt;
    &lt;mark&gt;.foo{&lt;/mark&gt;
        display: block
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内部の細かい挙動を理解すれば納得できる結果ではあるが、直感的ではない。&lt;code&gt;between&lt;/code&gt;プロパティーだけ&lt;a href="https://github.com/postcss/postcss/blob/5b86e6a94de9309cb354fcadd23f23249c174854/lib/node.js#L404-L417"&gt;デフォルトのスタイル&lt;/a&gt;が定められておらず、ところどころで&lt;a href="https://github.com/postcss/postcss/blob/5b86e6a94de9309cb354fcadd23f23249c174854/lib/node.js#L379-L390"&gt;特別視&lt;/a&gt;されていることから、うまくコピーできてしまってこうなるようだ。同じ&lt;code&gt;between&lt;/code&gt;という名前で違うものを扱おうとしていることが原因なのではないかと想像している。&lt;/p&gt;

&lt;p&gt;ちょっと実装として気になるので、このあたりは今後変わりそうではある。もしこの&lt;code&gt;between&lt;/code&gt;プロパティーをいじるようなツールやプラグインを作っている場合は注意した方が良さそうだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>node-edjo</title>
      <link>http://hail2u.net/blog/webdesign/node-edjo.html</link>
      <description>Every Declaration Just Onceのスタイルに既存のCSSを変換し、どのような感じになるのかを確認するためのツールを書いてた。node-edjoとしてGitHubに公開しておいたので、Node.js互換の何かがあればnpmでインストールして誰でも使える。ただしnpmリポジトリーには公開されることはないので、READMEに書いてあるようにユーザー名とリポジトリー名を使ってインストールする。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-edjo.html</guid>
      <pubDate>Fri, 16 Jan 2015 00:03:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Every Declaration Just Onceのスタイルに既存のCSSを変換し、どのような感じになるのかを確認するためのツールを書いてた。&lt;a href="https://github.com/hail2u/node-edjo"&gt;node-edjo&lt;/a&gt;としてGitHubに公開しておいたので、Node.js互換の何かがあればnpmでインストールして誰でも使える。ただしnpmリポジトリーには公開されることはないので、READMEに書いてあるようにユーザー名とリポジトリー名を使ってインストールする。&lt;/p&gt;

&lt;p&gt;完全な変換ツールではないので、これを使って移行とかは無理。ルールセットの順序が入れ替わっているので、CSSとしてちゃんと機能するかも未知数なものに変換されちゃう。あくまでもCSSがどのような感じになるのかがわかるだけのツールで、どれくらいのセレクターが集まってくるのかとか、定義はDRYだけどセレクターがDRYじゃないのはどの程度わかりづらそうなのかとかそういうものを感じるとっかかりという程度のツール。&lt;/p&gt;

&lt;p&gt;実際にこのウェブサイトのCSSを変換すると、&lt;a href="https://github.com/hail2u/node-edjo/blob/4f38d140b7080bd0e55a53d9beb8fad0035c20ff/test.edjo.css"&gt;まぁまぁ想定通りの形&lt;/a&gt;に変換され(てホッとし)た。もっとアバンギャルドな感じになるかもしれないとヒヤヒヤしていたので、これくらいなら「とんでもない！」という程でもない気がする。ひいき目だけど。ところどころ変なところに改行が入っているのはSassのせいで、PostCSSでもこのツールのせいでもない。&lt;/p&gt;

&lt;p&gt;EDJOのダメそうなところは改めてちゃんと書きたい。このツールを使いつつ色々考える。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>OOCSSの欠点とEvery Declaration Just Onceのもたらすもの</title>
      <link>http://hail2u.net/blog/webdesign/oocss-drawbacks-and-gifts-of-every-declaration-just-once.html</link>
      <description>昨日も少し書いたEvery Declaration Just Onceアプローチ(以下EDJOと略す)について、皆が目を瞑っているOOCSSの欠点、CSSが持つ特徴、HTMLとの兼ね合いという点からもう少し書いてみたい。これについては未だ誰ともちゃんと議論していない。機会があったらこの記事をベースにでも誰かと話してみたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/oocss-drawbacks-and-gifts-of-every-declaration-just-once.html</guid>
      <pubDate>Thu, 15 Jan 2015 11:29:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;昨日も少し書いた&lt;a href="https://developers.google.com/speed/articles/optimizing-css"&gt;Every Declaration Just Onceアプローチ&lt;/a&gt;(以下EDJOと略す)について、皆が目を瞑っているOOCSSの欠点、CSSが持つ特徴、HTMLとの兼ね合いという点からもう少し書いてみたい。これについては未だ誰ともちゃんと議論していない。機会があったらこの記事をベースにでも誰かと話してみたい。&lt;/p&gt;

&lt;p&gt;上記Googleの文書は、主にパフォーマンスの観点で書かれている。どうしても長くなりがちな定義を分散して書くよりも、能動的に短くすることができるセレクターを分散して書いた方が、プロダクションにおいてリリースされるCSSファイルのサイズを小さくすることが可能だろうというものだ。同時にこの文書の筆者は自身のブログで、&lt;a href="http://meiert.com/en/blog/20141009/css-dry-and-optimization/"&gt;より自然にCSSを書くための手法(原文: &lt;q&gt;The Natural Way of Writing CSS&lt;/q&gt;)&lt;/a&gt;としてこのEDJOという手法について述べている。&lt;/p&gt;

&lt;p&gt;僕は主にそういったCSSの書き方という観点からEDJOに注目した。この記事もそれに従って書かれている上、パフォーマンスについてはGoogleの文書で十分に書かれているので、以下では特に触れない。&lt;/p&gt;

&lt;h2&gt;OOCSSとは&lt;/h2&gt;

&lt;p&gt;まずはOOCSSについてざっと触れておく。OOCSSではいくつかの&lt;a href="http://www.w3.org/TR/CSS2/syndata.html#rule-sets"&gt;定義&lt;/a&gt;(プロパティーとその値のセット)を組み合わせることにより再現できる見た目をオブジェクトとみなし、それを継承・拡張していく。オブジェクトは一定の意味を持つ単位で作成され、それを組み合わせることで振る舞いベースで、ウェブサイトのビジュアル・デザインを完成させていくことができるというわけだ。&lt;/p&gt;

&lt;p&gt;実際に継承と拡張を行う手段は、オブジェクトとして定義されたクラスを複数組み合わせていく手法、いわゆる&lt;em&gt;マルチ・クラス&lt;/em&gt;による。今ではCSSプリプロセッサーなどもあるが、例えばSassの&lt;code&gt;@extend&lt;/code&gt;を使ったロジカルな継承は開発者間での濃いコミュニケーションによる意識の摺り合わせが必須とも言えるので、まだまだマルチ・クラスで行われている、行われるだろうと言って良い。&lt;/p&gt;

&lt;p&gt;もし仮に後で書かれたセレクターの方が必ず強いというようなシンプルな仕組みであったら、マルチ・クラスはその想定通りうまく機能しただろう。しかしそうはいかない。&lt;/p&gt;

&lt;h2&gt;セレクターの詳細度&lt;/h2&gt;

&lt;p&gt;CSSでは&lt;a href="http://www.w3.org/TR/CSS2/cascade.html#specificity"&gt;セレクターの詳細度&lt;/a&gt;というものがある。例えば&lt;code&gt;.foo&lt;/code&gt;より&lt;code&gt;.bar .foo&lt;/code&gt;が強いというような、セレクターの書かれた順序を越えて定義が適用される仕組みだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body h1 {
  font-family: serif;
}

h1 {
  font-family: sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このCSSの場合&lt;a href="http://hail2u.net/pub/test/606.html"&gt;&lt;code&gt;h1&lt;/code&gt;は&lt;code&gt;serif&lt;/code&gt;で表示されること&lt;/a&gt;だろう。OOCSSにおいてマルチ・クラスを利用する場合、このセレクターの詳細度というものと格闘する必要が出てくる。なぜかと言えばオブジェクトとして定義された&lt;a href="http://www.w3.org/TR/CSS2/syndata.html#rule-sets"&gt;ルールセット&lt;/a&gt;の順序通りにビジュアル・デザインが適用されていくとは限らないからだ。&lt;/p&gt;

&lt;p&gt;詳細度の仕組みは仕様を読むと簡単に書かれているが、実際にはそこそこ複雑だ。自然、その理解度が人によりまちまちであることも頭に入れておく必要がある(僕も正直8割強くらいしか理解している自信はない)。そうなるといかにしてこのような仕組みが発動しないようにCSSを書くか、ということになる。&lt;/p&gt;

&lt;h2&gt;クラスの命名規則&lt;/h2&gt;

&lt;p&gt;つまりセレクターでクラス名を二つ以上使わないようにし、すべてのセレクターの詳細度を等しくするわけだ。もちろん要素名やIDなどはこの世に存在しないものとみなして忘れ去ってしまえば良い。そうすることですべてのオブジェクト(=ルールセットに書かれた定義たち)はひとつのクラス名で表現されたセレクターにより割り当てられていくため、その書かれた順番に従ってその定義が上書きされていくようになる。&lt;/p&gt;

&lt;p&gt;問題はクラス名の付け方だ。詳細度の仕組みの都合上、クラス名を複数組み合わせることはできない。つまり以下のようなセレクターは書くことが出来ない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.global-header .nav .item .icon {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;従ってこのようなクラス名を付けることになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.global-header-nav-item-icon {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTMLは当然のようにこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&amp;quot;global-header&amp;quot;&amp;gt;
  ...
  &amp;lt;nav class=&amp;quot;global-header-nav&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;global-header-nav-item&amp;quot;&amp;gt;
      &amp;lt;span class=&amp;quot;global-header-nav-item-icon&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;span class=&amp;quot;global-header-nav-item-title&amp;quot;&amp;gt;Blog&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
    ...
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおっと。&lt;/p&gt;

&lt;p&gt;マルチ・クラスによる割り当てになるので、実際にはもう少しシンプルな値にはなる。が、それと同時に短いとはいえ別のクラス名が追加されていくので、&lt;code&gt;class&lt;/code&gt;属性の値は概ねこのような複雑なものになっていく。更にこういった単純に連結したり組み合わせたりするだけの命名規則では表現できない概念を補足するように鍛えていくと、&lt;a href="https://smacss.com/"&gt;SMACSS&lt;/a&gt;や&lt;a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/"&gt;MindBEMding&lt;/a&gt;、そして今最も注目度が高い&lt;a href="https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md"&gt;SUIT CSSの命名規則&lt;/a&gt;へと進化することになる。&lt;/p&gt;

&lt;p&gt;かくしてHTMLでは各要素に&lt;code&gt;class&lt;/code&gt;属性として20–50文字くらいの値がちょくちょく割り当てられていくようになった。CMSやビルド・ツールを前提にしないと保守できない状態だといえるだろう。&lt;/p&gt;

&lt;h2&gt;Every Declaration Just Once&lt;/h2&gt;

&lt;p&gt;すべての定義を一度だけしか書かないこのアプローチ、EDJOではOOCSSとはCSSを書く手順が逆になる。&lt;/p&gt;

&lt;p&gt;OOCSSではオブジェクトといういくつかの定義の組み合わせであるルールセットをまず書き、それにクラス名を使って名付ける。そしてHTMLに戻り、そのオブジェクトを割り当てたい要素に対し、クラス名を振っていく。&lt;/p&gt;

&lt;p&gt;EDJOではまずHTMLで適切なクラス名(IDでも良いだろう)を振っておく。誤解を恐れずに言うのならば、セマンティックなクラス名とかそのようなもので、ウェブページにおいてその要素がどのようなものかを表現するクラス名だ。IDでも良いだろうし、HTML5の強い意味付けを持つ要素をきちんと使い分けているならクラス名やIDを付けなくても良いこともあるかもしれない。またクラス名は再利用しないので、抽象化した名称(例えば&lt;code&gt;.clearfix&lt;/code&gt;であったり&lt;code&gt;.column-wrapper&lt;/code&gt;など)である必要もない。&lt;/p&gt;

&lt;p&gt;そしてCSSではビジュアル・デザインを決定する定義をまず書き、それを適用するセレクターを割り当て、ひとつの定義ごとにルールセットを作っていく。例えばこのような形だ。わかりやすいように様々なパターンでセレクターを書いてみたが、実際には開発者やプロジェクトごとにパターン化されてくるだろう。とりあえず一意に確定する形で書いておけば、後で置換をかけることでそのフォーマットを統一することも容易いはずだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body &amp;gt; header,
main,
.searchbox,
[role=&amp;quot;contentinfo&amp;quot;] {
  margin: 0 auto;
}

body &amp;gt; header,
[role=&amp;quot;contentinfo&amp;quot;] {
  background-color: #333;
}

main {
  background-color: #fff;
}

.searchbox {
  background-color: #999;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EDJOではセレクターの詳細度はほとんど無視することができる。なぜならある要素を表現するセレクターは常に同じで良いからだ。つまりある要素に複数のクラス名が割り当てられることはないし、同じ要素を違うセレクターで参照することもないということで、それゆえに値の上書きがそもそも起こらないということになる。状態を表すようなクラスは別途追加する必要が出てくるが、例外はそれくらいだろう。&lt;/p&gt;

&lt;p&gt;このようにEDJOでは、セレクターの詳細度という&lt;em&gt;あまり理解されていない仕組み&lt;/em&gt;とクラスの命名規則という&lt;em&gt;守らせることはおろかまず作ることからして難しい仕組み&lt;/em&gt;を共に意識せずにCSSとHTMLを書いていくことができるということだ。それはつまりHTMLはHTMLで書くことができ、CSSはCSSで書くことができ、更にその両者の結びつけを同じ定義を二度書かないという単純明快なルールのみで行うことができるということでもある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;OOCSSの欠点はその思想や哲学、ベースとなった技術の問題ではない。ツリー構造を持つHTMLやカスケーディングという独自の継承の仕組みを持つCSSとは根本的に相性が悪く、命名規則というような運用におけるルール付けでカバーしなくてはならないところだ。もしHTMLやCSSがもう少し違うものだったら、OOCSSは間違いなく論理的で明確な方向性をウェブデザインに与える唯一無二の手法であった、そしてありつづけるものだったろう。しかし現実は違うし、未来もそうなりそうもない(セレクターのネストが可能になるとわからないけれども)。&lt;/p&gt;

&lt;p&gt;そこでCSSにおいてその力不足を補い、OOCSSのような論理的なアプローチを可能にしようとするために生まれたのがCSSプリプロセッサーだった。しかしこれもOOCSSの欠点を完全にはカバーすることは出来てはいない。そのため既に名前だけは何回か出したSUIT CSSの命名規則のようなものが、ここに至っても生まれた(生まれてしまった)というわけだ。&lt;/p&gt;

&lt;p&gt;EDJOがCSSを本来あるような形に戻したものだと捉えると、もはやCSSプリプロセッサーはCSSを無闇に複雑にしてしまっただけにも感じられてしまう。EDJOならCSS Variableのみのプリプロセッサーで十分機能しそうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ひとつ、声を大きくして謝りたいのは、フロントエンド側じゃない人たちのCSSの書き方にダメ出しをしていたことだ。過去の僕はOOCSSをいかにして再現するかを重要視しており、OOCSSへの理解に欠ける人たちによるEDJO的な書き方(定義があるところに雑にセレクターを追加していく書き方)に対してかなり厳しく反論していたように思う。OOCSSを採用している以上、そういったEDJO的な書き方を否定することは間違っていたわけではないのだけど、その時の論理は「OOCSSだから～」というような、今思うと曖昧な、当時も理由としては弱いと薄々気付いていた言葉で押し通していた。&lt;/p&gt;

&lt;p&gt;その頃にもう少しOOCSSの欠点について掘り下げていればそういった書き方にも一理以上の何かがあったことに気づけたはずだ。広く受け入れられているアプローチだからというような理由で盲信するのは良くないが、それを実践するのはなかなか難しい。もちろんこのEDJOというアプローチにも言えることだ。気をつけながらEDJOの世界をもうちょっと掘り起こしていこうと思う。&lt;/p&gt;

&lt;p&gt;もしMindBEMdingのようなBEMライクな命名規則から、よりわかりやすく強力なSUIT CSSの命名規則に移行しようかなと考えている人がいたら、ちょっとだけEvery Declaration Just Onceというアプローチを試してみて欲しい。僕はこのアプローチを試した結果、OOCSSの実装の難しさにより嫌いになりかけたCSS(Sassでかろうじて理性を保ってやり過ごしてきていたが)を本気でもう一度好きになれそうな気がしてきている。HTMLとCSSが疎結合する未来を夢見ていた人達なら、OOCSSが唯一無二の解ではないという前提だと、このアプローチに未来を見出すことができるのではないだろうか。&lt;/p&gt;

&lt;h2&gt;追記&lt;/h2&gt;

&lt;p&gt;参照したGoogleのEDJOに関する文書とこの記事の内容が乖離していたことに気づいていなかったので、本来的に参照するべきJens Oliver Meiertのブログ記事へのリンクを追加した。両文書は同じ筆者による記事ではあるが、違う観点によって書かれているので、両方参照するべきだった。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Every Declaration Just Onceの例</title>
      <link>http://hail2u.net/blog/webdesign/every-declaration-just-once-example.html</link>
      <description>同じ定義は書かないCSSの簡単な例とその書き方に対する覚え書きを残しておく。同じ定義を書かないようにしていくと、CSSプリプロセッサーはおろか、セレクターのネストもなくて良いのかと感じてくる。もしかするとCSSの着地点はここなのかと洗脳されつつある。もはや第三者の目で見ることができなくなったので、他の人の意見も聞いてみたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/every-declaration-just-once-example.html</guid>
      <pubDate>Wed, 14 Jan 2015 10:02:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://developers.google.com/speed/articles/optimizing-css"&gt;同じ定義は書かないCSS&lt;/a&gt;の簡単な例とその書き方に対する覚え書きを残しておく。同じ定義を書かないようにしていくと、CSSプリプロセッサーはおろか、セレクターのネストもなくて良いのかと感じてくる。もしかするとCSSの着地点はここなのかと洗脳されつつある。もはや第三者の目で見ることができなくなったので、他の人の意見も聞いてみたい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.foo {
  border: 1px solid red;
  margin: 0 auto;
  width: 40rem;
}

.bar {
  border: 1px solid green;
  margin: 0 auto;
  width: 40rem;
}

.baz {
  border: 1px solid blue;
  margin: 0 auto;
  width: 40rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このような共通する定義を持つセレクターは以下のように書かれる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.foo,
.bar,
.baz {
  margin: 0 auto;
}

.foo,
.bar,
.baz {
  width: 40rem;
}

.foo {
  border: 1px solid red;
}

.bar {
  border: 1px solid green;
}

.baz {
  border: 1px solid blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まずは定義ごとというのがポイントだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.foo,
.bar,
.baz {
  margin: 0 auto;
}

.foo,
.bar,
.baz {
  width: 40rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにまとめられそうなブロックでもあえて分割する。そうしておくことによって、後に&lt;code&gt;margin: 0 auto&lt;/code&gt;だけ使うクラスを追加したい時に分割し直す手間が省ける。こういった後のメンテナンス性を考えた場合、先頭に定義をわかりやすくしたクラスを追加するのも悪くなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.centering,
.foo,
.bar,
.baz {
  margin: 0 auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしておくと&lt;code&gt;,\n\.foo&lt;/code&gt;で置換を行えるようになる。しかし使いもしないセレクターが書かれているのは無駄が多い気がしたのでやめてしまった。ただし、そのブロックがどういう定義のためのブロックなのかをわかりやすくできるので、すこし規模が大きくなると助かるかもしれない。その場合は後にツールで削除してやると良さそうだ。&lt;/p&gt;

&lt;p&gt;またどこまで定義を分けるかというのもちょっと悩む。例えば&lt;code&gt;border&lt;/code&gt;ショートカット・プロパティーなどだ。上記例だと以下のようにも書くことができ、定義をなるべく重複しないようにとするとこのように書くべきようにも思える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.foo,
.bar,
.baz {
  border-style: solid;
}

.foo,
.bar,
.baz {
  border-width: 1px;
}

.foo {
  border-color: red;
}

.bar {
  border-color: green;
}

.baz {
  border-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さすがに冗長すぎる印象だ。どこまで分割するかの線引きはもうちょっと考える必要があるだろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;この書き方は、今まで良い解とされていたOOCSSのようなアプローチとは真逆で、悪いアプローチとされていた物理的な装飾を基準としたアプローチに近い。そのためOOCSSどっぷりだった人達には違和感しかない。&lt;/p&gt;

&lt;p&gt;作業としては、どのような装飾を加えるか決まったら、そのプロパティー等で検索し、既にあったらそこにセレクターを追加、なかったらブロックを追加と、非常に単純化されたものだけで済む。ルールそのものが単純なこと、書き方の説明としても簡単で済むこと、&lt;em&gt;間違えて重複する定義を追加しても致命的ではないこと&lt;/em&gt;、差分がわかりやすいことなど開発中の利点は多い。&lt;/p&gt;

&lt;p&gt;一方でコンポーネント単位での確認というような地道な作業、つまりテストとは相性が悪い。逆に言うと定義ごとに分けることによってコード上で確認できるようにしたとも言えるかもしれない。ブラウザーの実装の不行き届きやバグへの対処に確認が必要な現状だと絵空事に近いので、ワークフローが大幅に省力化するわけではなさそうだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>白Tシャツ</title>
      <link>http://hail2u.net/blog/misc/white-t-shirt.html</link>
      <description>良さそうな白いTシャツがなかなか見つからず、結局HanesのJapan FitなるもののBEAMSのロゴ入りのバージョンを買った。着丈がもうちょっと短めのを探すとなると大変なようなので、もうインナーでしか着ないと決め、これにした。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/white-t-shirt.html</guid>
      <pubDate>Tue, 13 Jan 2015 13:22:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://www.amazon.co.jp/gp/product/B00KQ4CAWG/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00KQ4CAWG&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/31FHI7XxhAL.jpg" alt="(ビームス) BEAMS HANES / T-SHIRTS Japan Fit"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;良さそうな白いTシャツがなかなか見つからず、結局&lt;a href="http://www.amazon.co.jp/gp/product/B00KQ4CAWG/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00KQ4CAWG&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;HanesのJapan FitなるもののBEAMSのロゴ入りのバージョン&lt;/a&gt;を買った。着丈がもうちょっと短めのを探すとなると大変なようなので、もうインナーでしか着ないと決め、これにした。&lt;/p&gt;

&lt;p&gt;最初はちょっとへなへなすぎて頼りなかったけど、数回洗うとちょっとしまってきた。若干ゆるめな襟もびろんびろんにヘタったりはしなそうだ。一枚で着るのは無理があるけど、肌触りは良くインナーとしては優秀。難点は裾にあるタグ。肌に当たらないようにとあの位置なのはわかるんだけど、どうせなら外しやすく別に縫い付けてくれるか、ロゴと同じ位置に印刷だと良かった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;この秋冬は&lt;a href="http://www.pinterest.com/hail2u/bought/"&gt;ブーツ買ったりジーンズ買ったりセーター買ったり帽子買ったり財布買ったりコート買ったり&lt;/a&gt;してた。あと袖を破いてしまったジャケットの代替と、場つなぎで買ったら1ヶ月で壊れ始めたスニーカーを諦めてちゃんとしたのも買いたい。こうしてどんどん新しいパソコン買うのが先延ばしになっていく……。Broadwell出たらとかWindows 10出たらとか理由を付けて誤魔化している。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Gruntプラグインの同梱</title>
      <link>http://hail2u.net/blog/coding/with-grunt-plugin.html</link>
      <description>遂に別々に管理するのが面倒になったので、PostCSSを使ったツールにGruntプラグインも同梱するようにした。grunt-postcssなどから使う方が効率的なので、もはや単体のGruntプラグインはメンテナンスが放棄されがちだ。CSSWring v2.1.0とCSS MQPacker v2.1.0には既に同梱されている(まだPostCSS v4.0.0にはなっていない)。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/with-grunt-plugin.html</guid>
      <pubDate>Mon, 12 Jan 2015 01:36:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;遂に別々に管理するのが面倒になったので、PostCSSを使ったツールにGruntプラグインも同梱するようにした。&lt;a href="https://github.com/nDmitry/grunt-postcss"&gt;grunt-postcss&lt;/a&gt;などから使う方が効率的なので、もはや単体のGruntプラグインはメンテナンスが放棄されがちだ。&lt;a href="https://github.com/hail2u/node-csswring/tree/ba3642d9d94149e3519de5db2993ca5232752d2b"&gt;CSSWring v2.1.0&lt;/a&gt;と&lt;a href="https://github.com/hail2u/node-css-mqpacker/tree/e234fdb3d7565740f68450b5f33b81c9d777dddf"&gt;CSS MQPacker v2.1.0&lt;/a&gt;には既に同梱されている(まだPostCSS v4.0.0にはなっていない)。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sindresorhus/load-grunt-tasks"&gt;load-grunt-tasks&lt;/a&gt;などのGruntプラグイン読み込み自動化パッケージの恩恵には預かれないため、&lt;code&gt;Gruntfile.js&lt;/code&gt;で自前で読み込んでやる必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function (grunt) {
  grunt.loadNpmTasks(&amp;#39;css-mqpacker&amp;#39;);
  grunt.loadNpmTasks(&amp;#39;csswring&amp;#39;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;両者とも設定はないが、PostCSSの&lt;code&gt;process()&lt;/code&gt;の第二引数にしていするオプションを&lt;code&gt;options&lt;/code&gt;を使って指定できるようにはなっている。のでSource Mapsも自在に吐ける。継承したい場合は&lt;code&gt;map: true&lt;/code&gt;を指定してやるだけで、PostCSSが賢いのでだいたい動く。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;PostCSSを利用する単体のGruntプラグインのgrunt-postcssに対する優位性は、&lt;code&gt;peerDependencies&lt;/code&gt;によるPostCSSのバージョンの束縛を無視できることだ。&lt;/p&gt;

&lt;p&gt;grunt-postcssを使う場合、要求するPostCSSのバージョンが食い違っているもの同士を組み合わせることができなくなる。&lt;code&gt;peerDependencies&lt;/code&gt;でそれぞれバージョンを束縛できるが、そうなると食い違うものがそもそもインストール出来なくなる。解決のためにはパッケージ側のアップデートが必須になる。&lt;/p&gt;

&lt;p&gt;単体のGruntプラグインの場合はそれぞれが独自にPostCSSをインストールして使うので、ほとんどのケースで組み合わせることが可能になる。その分、無駄が多くなるということでもあるけれども。&lt;/p&gt;

&lt;p&gt;この辺りはGruntもPostCSSもプラグイン・システムとして失敗した感がある部分で、もうちょっとなんとかしないとメンテナンスが放棄されているけどまだ動くものが最新版の環境ではうまく動かせなくなってしまう。その点、gulpでは&lt;a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md"&gt;gulpパッケージが&lt;code&gt;dependencies&lt;/code&gt;にも&lt;code&gt;peerDependencies&lt;/code&gt;にも現れないように書くべき&lt;/a&gt;としており、柔軟性と将来性で優っている。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>PostCSS v4と空白</title>
      <link>http://hail2u.net/blog/coding/postcss-v4-and-white-spaces.html</link>
      <description>PostCSSのv4.0.0が年明け早々に出た。互換性のない変更の中では、v3.0.0でchildsと妙なスペルで名付けられたものがnodesに修正されたことが一番大きそうだ。他、便利メソッドの追加に加え、空白の最適化機能が大幅に変更になった。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/postcss-v4-and-white-spaces.html</guid>
      <pubDate>Sun, 11 Jan 2015 14:00:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://github.com/postcss/postcss/releases/tag/4.0.0"&gt;PostCSSのv4.0.0&lt;/a&gt;が年明け早々に出た。互換性のない変更の中では、v3.0.0で&lt;code&gt;childs&lt;/code&gt;と妙なスペルで名付けられたものが&lt;code&gt;nodes&lt;/code&gt;に修正されたことが一番大きそうだ。他、便利メソッドの追加に加え、空白の最適化機能が大幅に変更になった。&lt;/p&gt;

&lt;p&gt;ソースを読んでもよくわからなかったので&lt;a href="https://github.com/postcss/postcss/issues/165"&gt;イシューを立てて聞いたところ&lt;/a&gt;、思ったよりもかなり複雑そうだった。しかしよく練られてはいる印象は持ったので、これに任せてしまうのが賢そうだ。つまりノードを動かす時には&lt;code&gt;clone()&lt;/code&gt;を通すか、新メソッドの&lt;code&gt;moveTo()&lt;/code&gt;などを使ってやることで、まずノードの空白関連のプロパティーをリセットする。後はPostCSSに前後のノードを参照するかデフォルトのフォーマットを採用するかを選択させるという形だ。&lt;/p&gt;

&lt;p&gt;PostCSS側の変更でテストの期待される結果は書き直さなければならなそうだが、ライブラリー側で余計なことをするよりかはコストが低いと思われる。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>postcss-single-charset</title>
      <link>http://hail2u.net/blog/webdesign/postcss-single-charset.html</link>
      <description>minifyしてからconcatという手順でCSSをビルドしているため、連結するそれぞれのCSSファイルにある@charsetルールが無意味になる。そこで最初の@charsetを先頭に持ってくるだけのPostCSSプラグインを書き、それをconcatした後に使うことにした。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/postcss-single-charset.html</guid>
      <pubDate>Sat, 10 Jan 2015 01:52:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://hail2u.net/blog/webdesign/minify-then-concat.html"&gt;minifyしてからconcat&lt;/a&gt;という手順でCSSをビルドしているため、連結するそれぞれのCSSファイルにある&lt;code&gt;@charset&lt;/code&gt;ルールが無意味になる。そこで最初の&lt;code&gt;@charset&lt;/code&gt;を先頭に持ってくるだけのPostCSSプラグインを書き、それをconcatした後に使うことにした。&lt;/p&gt;

&lt;p&gt;PostCSSプラグインとして作ったのでパブリックなAPIはない。つまり必ずPostCSSの&lt;code&gt;use()&lt;/code&gt;でプロセッサーとして読み込んでやる必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&amp;#39;fs&amp;#39;);
var postcss = require(&amp;#39;postcss&amp;#39;);

var input = fs.readFileSync(&amp;#39;input.css&amp;#39;, &amp;#39;utf8&amp;#39;);
var output = postcss().use(
  require(&amp;#39;postcss-single-charset&amp;#39;)()
).process(input).css;
fs.writeFileSync(&amp;#39;output.css&amp;#39;, output);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PostCSSを知らないとよくわからないと思うけど、PostCSS界隈ではこれで普通な感じということになっている。実際には&lt;a href="https://github.com/nDmitry/grunt-postcss"&gt;grunt-postcss&lt;/a&gt;や&lt;a href="https://github.com/w0rm/gulp-postcss"&gt;gulp-postcss&lt;/a&gt;経由で使うことになるだろう。&lt;/p&gt;

&lt;p&gt;利用サンプルを兼ねてGruntプラグインも同梱しておいた。&lt;code&gt;grunt-&lt;/code&gt;プリフィックスが付いていないため、&lt;a href="https://github.com/sindresorhus/load-grunt-tasks"&gt;load-grunt-tasks&lt;/a&gt;では読み込んでくれない(と思う)ので、READMEにあるように書いてちゃんと読み込む必要がある。他は特に変なことはないが、あまり行儀良くはなさそうなので利用は非推奨ということにしておく。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;あんまりパッケージ化するつもりはなかったけど、PostCSSプラグインというような形で書いたことがなかったので試しに書いてみた。特に何ということもなかった。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ウェブ・フォントの読み込み</title>
      <link>http://hail2u.net/blog/webdesign/loading-web-fonts.html</link>
      <description>ウェブ・フォントも完全に行き渡り、今はどう効率的に配信するかについて多くの時間を割くようになった。Google Fontsの低め安定路線を見限り、TypeKitやFonts.comへ鞍替えする人々も増えた。それと同時に自前でホスティングする人々も徐々にその数を増やしており、どれが最適解なのか一応の結論が出るにはもう少しかかるだろう。まず、ウェブ・フォントの読み込みにおいてどのようなアプローチがあり、どのようなメリット、そしてデメリットがあるのだろうか。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/loading-web-fonts.html</guid>
      <pubDate>Fri, 09 Jan 2015 13:10:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ウェブ・フォントも完全に行き渡り、今はどう効率的に配信するかについて多くの時間を割くようになった。Google Fontsの低め安定路線を見限り、TypeKitやFonts.comへ鞍替えする人々も増えた。それと同時に自前でホスティングする人々も徐々にその数を増やしており、どれが最適解なのか一応の結論が出るにはもう少しかかるだろう。まず、ウェブ・フォントの読み込みにおいてどのようなアプローチがあり、どのようなメリット、そしてデメリットがあるのだろうか。&lt;/p&gt;

&lt;p&gt;TypeKit等に頼るにしろ、自前でホスティングするにしろ、もちろん最終的にはウェブ・フォントをブラウザーに送りつける必要がある。読み込みとはまさにその部分の話だ。話がややこしくなるので、&lt;a href="http://hail2u.net/documents/bulletproof-at-font-face-syntax.html"&gt;多様な実装を意識した安全な書き方&lt;/a&gt;などについては触れない。&lt;/p&gt;

&lt;h2&gt;普通に@font-face定義を利用&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@font-face&lt;/code&gt;定義をただ普通に書く場合のメリットは、基本的な知識さえあれば書けることと動かなくなる可能性が最小限に抑えられることだ。CSSが単純であることから、書きやすく、組み込みやすく、修正もしやすい。将来的に仕様が大きく変化した場合でも、実装がそれなりにフォローしてくれることも期待できるだろう。&lt;/p&gt;

&lt;p&gt;デメリットは読み込みコストの増加と初期描画の遅延だ。&lt;/p&gt;

&lt;p&gt;読み込みコストの増加は単純に大きめの画像へのリクエストが常に行われるということでもあるし、メモリーの圧迫ということでもある。機器の進化と環境の発展が解消してくれるであろう問題であるとも言えるが、歴史を振り返ると常に汲々として対策を練らなくてはいけない類いの問題であったので、そうはたやすく解決されないだろう。&lt;/p&gt;

&lt;p&gt;初期描画の遅延は、古くからFOUTと呼ばれ問題視されていた現象についてがまず挙げられる。だいたいはFOUTが起こらないように実装が変化した。ウェブ・フォントのリクエストに失敗していそうな時も3秒でフォールバック・フォントで表示されるように統一されつつあるので、あまり問題ではなくなりそうだ。&lt;/p&gt;

&lt;p&gt;しかし、3秒間文字がまったく表示されない状態が続く、と考えると致命的な遅延とも言える。実際にはCSSファイルの肥大化による遅延も重なり、空白の状態からやっと表示されたら今度は文字が見えないという状態に変化するため、ユーザーへはなかなかの違和感を与えることになる。&lt;/p&gt;

&lt;h2&gt;DataURIを使ったsrc記述子の指定&lt;/h2&gt;

&lt;p&gt;メリットはウェブ・フォントが必要な場合には必ず既に読み込み済みになっていることだ。つまりCSSファイルが読み込まれたならウェブ・フォントが適用されるだろうし、何らかの理由でCSSファイルの読み込みに失敗した場合でも文字だけ見えないというような状態には決してならない。またCSSだけで完結するのも大きいだろう。残念ながらツールの助けは必要になるだろうが、特にHTMLやJavaScriptの助けは必要としない。&lt;/p&gt;

&lt;p&gt;デメリットはCSSファイルの肥大化だ。英数記号のみの欧文タイプフェイスのウェブ・フォントであったとしてもウェイトごとに30KBほど、和文のそれになると少なくともウェイトごとに300–1000KB前後がCSSファイルに追加されることになる。これは単にCSSファイルの読み込み自体に時間がかかるということだけではなく、そのパースに時間がかかるということでもある。つまりウェブページの描画され始めるまでに時間がかかってしまうということだ。&lt;/p&gt;

&lt;p&gt;ウェブ・フォントに限らず巨大なData URIをCSSファイルに混ぜ込むのは悪手と言って良い。せいぜい2KB前後までのSVGファイルくらいなものだろう。&lt;/p&gt;

&lt;h2&gt;ウェブ・フォントのCSSの遅延読み込み&lt;/h2&gt;

&lt;p&gt;初期描画を遅延させないためには、JavaScriptファイルの非同期読み込みと同じように、ウェブ・フォントの読み込みとウェブページの描画を同時に行わせれば良い。CSSファイルに&lt;code&gt;@font-face&lt;/code&gt;定義を書かず、&lt;code&gt;head&lt;/code&gt;要素の子としても書かないことによって、遅延読み込みさせることに成功すれば、ウェブ・フォント由来の初期描画の遅延は限りなく少なくなる。&lt;/p&gt;

&lt;p&gt;このデメリットはFOUTと呼ばれ、問題視されていた古いFirefoxの挙動と同じになることだ。まずフォールバックとして指定されたローカルのフォントで表示され、ウェブ・フォントの読み込みが完了した後にフォントが変更になるため、その切り変わる時に画面がフラッシュする。読み込みが終わるまで文字がまったく表示されないよりはフラッシュすることの方がまだ良いだろうというネガティブな選択の結果の手段ということになる。&lt;/p&gt;

&lt;p&gt;また残念ながらCSSだけでは完結しない。JavaScriptを使うか、文法違反であることに目をつぶって&lt;code&gt;body&lt;/code&gt;要素の最後にウェブ・フォントを読み込むための&lt;code&gt;link&lt;/code&gt;要素を突っ込む必要がある。&lt;/p&gt;

&lt;h2&gt;Web Font Loader&lt;/h2&gt;

&lt;p&gt;遅延読み込みを一歩進め、フォントの読み込みを監視することにより、FOUTを制御できるようにしたのが&lt;a href="https://github.com/typekit/webfontloader"&gt;Web Font Loader&lt;/a&gt;だ。ウェブページの描画をブロックする・しないを選択できるので、好みで柔軟に描画のされ方を調節できる。CSSだけで完結とまではいかないが、制御ロジックそのものはクラス名を通してCSSで行えるので、保守性は高い。&lt;/p&gt;

&lt;p&gt;標準化されている&lt;a href="http://www.w3.org/TR/css-font-loading/"&gt;CSS Font Loading Module Level 3&lt;/a&gt;を利用することになる将来も、これと同じようなアプローチになることが予想される。Polyfillとは言えないが、ウェブ標準と親和性が高いものとは言えるだろう。&lt;/p&gt;

&lt;p&gt;デメリットはこれまでに上げた手法の高度なラッパーに過ぎないということだ。柔軟でカスタマイズしやすいことは確かだが、このライブラリーに強く依存することを強いられる。名前を挙げることも憚られる某ライブラリーと似たような立ち位置のものと言うと近い。&lt;/p&gt;

&lt;h2&gt;Web Storageを使ったキャッシング&lt;/h2&gt;

&lt;p&gt;読み込みをインターネット経由で行うことがウェブ・フォントにおける多くの問題の原因である以上、高速に取り出せるローカルにキャッシュがあれば良いというのが骨子となる。&lt;a href="http://www.w3.org/TR/webstorage/"&gt;Web Storage (いわゆる&lt;code&gt;localStorage&lt;/code&gt;)&lt;/a&gt;を使いウェブ・フォントをキャッシングさせれば、インターネットを経由せずに済む。想定通りうまく動けば初期描画の遅延とFOUTという二つの大きな問題は解決される。&lt;/p&gt;

&lt;p&gt;Web Storageの実装を見るに、保守性は非常に悪いといえるだろう。キャッシュのリフレッシュまでも視野に入れると更に厳しい。利用を単純化したライブラリーがあれば一瞬光ることはありそうだが、環境の変化(SPDY)により無に帰してしまいそうな技術とも思える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;このウェブサイトでもFOUT強制をやめることにした過程で調べたり考えたりしたことを、読み込みの部分だけに特化してざっとまとめてきた。一長一短であるが、それでもあえて選択するとしたらWeb Font Loaderではないかと僕は考える。現状で最も柔軟であることは、軌道修正をする際に非常に助かる。依存しすぎないこととその挙動をしっかりと知ることを念頭に置いてWeb Font Loaderを使うのが良いだろう。&lt;/p&gt;

&lt;p&gt;ウェブ・フォントの利用にあたってはその読み込みが最も重要な部分であることは確かだが、他にも考慮すべき点は色々ある。例えばブランド・ロゴに専用のウェブ・フォントを利用する場合は別のタイプフェイスで表示されるということは許されない。その場合はフォールバックさせず、画像を代わりに表示する必要があることだろう。そういう場合は読み込みについては特に凝ったことをしない方がやりやすい可能性も高い。&lt;/p&gt;

&lt;p&gt;ともあれ、ウェブ・フォントの利用はウェブサイトへ大きな変化をもたらす。それは見た目だけではなくパフォーマンスについても、だ。そのことの重要な一柱である読み込みについてはしっかりと考えて実装してやる必要があるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description>&lt;p&gt;HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Sun, 18 Jan 2015 01:44:00 +0900</lastBuildDate>
  </channel>
</rss>
