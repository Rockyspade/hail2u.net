<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>node-git-release v1.1.2</title>
      <link>http://hail2u.net/blog/software/node-git-release-v1.1.2.html</link>
      <description>node-git-releaseをio.js v1.1.0を要件にして、child_process.spawnSync()を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも*Sync()がサポートされ、動くようになったようだ(試してない)。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/node-git-release-v1.1.2.html</guid>
      <pubDate>Sat, 07 Feb 2015 09:38:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://github.com/hail2u/node-git-release"&gt;node-git-release&lt;/a&gt;をio.js v1.1.0を要件にして、&lt;code&gt;child_process.spawnSync()&lt;/code&gt;を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも&lt;code&gt;*Sync()&lt;/code&gt;がサポートされ、動くようになったようだ(試してない)。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;でio.jsの特定バージョンを要件にしたい場合、&lt;code&gt;engines&lt;/code&gt;フィールドでは&lt;code&gt;iojs&lt;/code&gt;というキーで指定するようだ。npmの公式ドキュメントでは特に触れられていないが、Herokuでは既にこれを見て実装されているという話だった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;engines&amp;quot;: {
    &amp;quot;iojs&amp;quot;: &amp;quot;&amp;gt;=v1.1.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら実行をブロックしてくれるわけではないので、気休め程度と言って良い。他、この&lt;code&gt;engines&lt;/code&gt;フィールドでio.js v1.1.0&lt;em&gt;または&lt;/em&gt;Node.js v0.12.0という要件にしたい場合の書き方がわからないという問題もあった。配列で書くしかないような気がするが、解釈できるのだろうか。色々想定されていなさそうなフィールドなので、Herokuで明示的にio.jsを使いたいという場合を除いて指定しない方が良さそうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;WindowsのGitがアレでアレなので、いまだ&lt;code&gt;npm publish&lt;/code&gt;することができない。一生無理そう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>銀ぶら</title>
      <link>http://hail2u.net/blog/misc/ginbura.html</link>
      <description>Patrickの直営店へは銀座駅から有楽町ルミネ、松屋銀座を経由しながら歩いた。この辺りは昔(10年以上前)とあんまり変わっていない気もしたけど、楽しそうな店や変な建物があって、やはり銀座は楽しい。Cole HaanやArc’terixの店舗などをのぞいていたら、電車で下がったテンションもすぐに上がった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/ginbura.html</guid>
      <pubDate>Fri, 06 Feb 2015 07:56:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="/images/blog/ginbura.jpg"&gt;&lt;img alt="銀座三越の隣にあるピアス銀座ビル" height="2760" src="/images/blog/ginbura.jpg" width="2448"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="https://www.google.com/maps/place/PATRICK+LABO+GINZA/@35.672537,139.770912,17z/data=!4m6!1m3!3m2!1s0x60188be1a52511d7:0x95a40c38fe1238b8!2sPATRICK+LABO+GINZA!3m1!1s0x60188be1a52511d7:0x95a40c38fe1238b8"&gt;Patrickの直営店&lt;/a&gt;へは銀座駅から有楽町ルミネ、松屋銀座を経由しながら歩いた。この辺りは昔(10年以上前)とあんまり変わっていない気もしたけど、楽しそうな店や変な建物があって、やはり銀座は楽しい。&lt;a href="https://www.colehaan.co.jp/"&gt;Cole Haan&lt;/a&gt;や&lt;a href="http://arcteryx.com/Home.aspx?language=JP"&gt;Arc’terix&lt;/a&gt;の店舗などをのぞいていたら、電車で下がったテンションもすぐに上がった。&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="/images/blog/patrick-labo-ginza.jpg"&gt;&lt;img alt="こじんまりとしたPatrick直営店、Patrick LABO GINZA" height="2400" src="/images/blog/patrick-labo-ginza.jpg" width="2400"&gt;&lt;/a&gt;

  &lt;figcaption&gt;Patrick LABO GINZA&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;帰りは京橋の方をぶらぶらしてから、東京駅をくぐり、新丸ビル、三菱一号館美術館、皇居の堀沿いと歩いて、東京駅に戻って帰った。&lt;a href="http://www.kataoka.com/echire-shop.html"&gt;エシレ&lt;/a&gt;で何かパンを買えばよかったけど、フラフラするの楽しすぎてまったく思い出せなかった。&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="/images/blog/tokyo-marunouchi-chuo-guchi-to-koukyo.jpg"&gt;&lt;img alt="東京駅丸の内中央口から皇居へは何にもない歩道になっている" height="2448" src="/images/blog/tokyo-marunouchi-chuo-guchi-to-koukyo.jpg" width="3264"&gt;&lt;/a&gt;

  &lt;figcaption&gt;丸の内中央口から皇居&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;疲れたけど足に馴染み始めた&lt;a href="/blog/gadget/camper-mil-chelsea-boots.html"&gt;Camperのブーツ&lt;/a&gt;がいい仕事してくれた。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>EDJOの(デ)メリット</title>
      <link>http://hail2u.net/blog/webdesign/on-every-declaration-just-once.html</link>
      <description>Every Declaration Just Once (以下EDJO)アプローチの最大のメリットはなんだろうかということについて考えていた。情報設計と重なるところがまるでないため、設計思想としては完全に成立しない。つまりCSSを設計することを放棄し、設計されたHTMLに対してスタイルを割り当てていく手法としてのみ存在しうる。このことがすなわちメリットなのではないだろうか。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/on-every-declaration-just-once.html</guid>
      <pubDate>Thu, 05 Feb 2015 11:54:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Every Declaration Just Once (以下EDJO)アプローチの最大のメリットはなんだろうかということについて考えていた。情報設計と重なるところがまるでないため、設計思想としては完全に成立しない。つまりCSSを設計することを放棄し、設計されたHTMLに対してスタイルを割り当てていく手法としてのみ存在しうる。このことがすなわちメリットなのではないだろうか。&lt;/p&gt;

&lt;p&gt;CSSの限られた文法が情報設計に基づく複雑な構造の表現に適さないことは明白だ。OOCSSではHTMLとCSSを設計のもとに平等に扱っていたが、どうしてもCSSにおいては限界があり、複雑な命名規則やCSSプリプロセッサーの登場となったのではないかと思う。CSSプリプロセッサーの高機能化により実現可能になりつつあるが、それと同時に高度に抽象化された複雑さも氾濫しつつある。&lt;/p&gt;

&lt;p&gt;EDJOにおいては&lt;a href="https://github.com/hail2u/node-edjo/blob/master/test.edjo.css"&gt;その書かれ方&lt;/a&gt;を見ればわかる通り、設計というものを放棄することになる。設計されたHTMLに対してスタイルを割り当てていくという作業にすべては集約されることになるだろう。CSSは単にHTMLへスタルを割り当てていくのみでそれ以上の意味は持たない。OOCSSにおいてはともすれば「貧弱さ」と表現されるCSS文法の単純さに似合った割り切りであると言えよう。&lt;/p&gt;

&lt;p&gt;CSSでの設計の放棄とEDJOの採用には、いくつかの派生的なデメリットとメリットが含まれる。&lt;/p&gt;

&lt;h2&gt;CSSのわかりやすさ&lt;/h2&gt;

&lt;p&gt;論理的な単位で定義がまとまっていないため、定義そのものはわかっても、他と組み合わせた結果どうなるかまでは不透明で、わかりやすさに欠けるCSSになる。定義が上書きされることがまずないという点ではOOCSSのような論理的な単位で管理するよりも&lt;em&gt;誤解&lt;/em&gt;をする可能性は減るが、全般的にはデメリットと言えるだろう。&lt;/p&gt;

&lt;p&gt;このわかりやすさの欠如はデバッガビリティーというようなものにはあまり影響をあたえることはない。なぜならこのわかりにくさの欠如はCSSファイルを相手にして格闘することが不可能なことを意味するので、ブラウザーに内蔵されている開発者ツールという武器を必ず使うことになるからだ。そういう意味では開発者ツールとは相性が良いとも言えるだろう。&lt;/p&gt;

&lt;h2&gt;セレクター数&lt;/h2&gt;

&lt;p&gt;IE9以下にはよく忘れてよくハマるCSSファイルごとのセレクター数に限界があるという仕様がある。定義ごとにセレクターを割り当てていくという手法の都合上、その限界はかなり簡単に突破してしまう。普通にCSSを書く場合と比べると、おおまかに3–5倍程度にセレクター数が増えると見積もる必要がある。&lt;/p&gt;

&lt;p&gt;OOCSS+CSSプリプロセッサーで書く場合と比べるならば遭遇しやすいというだけに過ぎないとも言えるが、現実的な問題ではある。運用でカバーすることは難しいので、必ず&lt;a href="https://www.npmjs.com/package/grunt-selector4096"&gt;チェックすること&lt;/a&gt;と、&lt;a href="http://blesscss.com/"&gt;機械的に処理すること&lt;/a&gt;を徹底する必要はあるだろう。&lt;/p&gt;

&lt;h2&gt;オブジェクトの再構築&lt;/h2&gt;

&lt;p&gt;OOCSSで書いている時に避けて通れないのがオブジェクトの再構築だ。&lt;a href="http://dskd.jp/archives/57.html"&gt;EDJOなオブジェクトの妄想という記事&lt;/a&gt;でも触れられているが、僕もこれは非常に大きいと考える。OOCSSのオブジェクトを再構築するのは非常にコストが高い。単にオブジェクトのスタイルの編集だけに留まらず、そのリネーム、新たなオブジェクトの設計、参照の書きかえ、と必要になる作業が非常に多い。&lt;/p&gt;

&lt;p&gt;EDJOにおいてはセレクターの書き足し、必要ならルールセットの追加という2つのパターンで常に完了する。OOCSSにおけるオブジェクトのような参照の対象を、CSSの仕様(または実装)にまで遡るため、書きかえたくてもできないという方が適切かもしれない。&lt;/p&gt;

&lt;p&gt;このことはオブジェクトの再構築を避けるためによく行うプロパティーの上書きをなくせるということでもある。それに伴ってほぼ上書きが不要になることからセレクターの詳細度への配慮が不要になることでもあり、CSSにおける制約からHTMLのクラス名に強い命名規則を強制しなくても良いということでもある。&lt;/p&gt;

&lt;h2&gt;差分&lt;/h2&gt;

&lt;p&gt;近年の開発において差分への意識は不可欠であるとも言える。確実なマージのためにはレビューが不可欠であり、適切なレビューのためには差分が明確であることがある程度要求される。&lt;/p&gt;

&lt;p&gt;通常のCSSの書き方では、CSSへのルールセットのブロック単位での追加とHTMLへのクラスの追加が差分として表示されることになる。対してEDJOではCSSへの編集のみに集約されることだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@@ -1,4 +1,5 @@
 .foo,
+.bar,
 .black-text {
   color: black;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSSにおける差分もこのような単純な行の追加の組み合わせだけになる。他の差分ブロックと混ざることもない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;設計の放棄と言っても、実際には情報設計が最初にあり、それを反映させたHTMLがある。EDJOでは情報設計を元にするのではなく、それを元にしたHTMLに対してアピアランスとしてスタイルを割り当てていくというわけだ。情報設計の元でHTMLとCSSを並列させる場合、両者をきれいに連携させるためには強力な命名規則か高機能なCSSプリプロセッサー、またはその両者が必要になってしまう。それをHTMLに完全にCSSを従属させることでシンプルでストレートで逆転することのない序列を強いることができるのがEDJOの良いところだろう。&lt;/p&gt;

&lt;p&gt;反面、論理的な構造を持たないため、CSSファイル単体で完結しないという問題がある。機械的な生成ではない形でスタイル・ガイド(のようなもの)を作成し、それを基準にブラウザーの開発者ツールでデバッグするという形での開発でないと苦しいだろう。書き方の違いに慣れることも含め、ドラスティックに開発フローを変更する手法であると言える。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Patrick Marathon-LE</title>
      <link>http://hail2u.net/blog/gadget/patrick-marathon-le-black.html</link>
      <description>スタンスミスの黒(白ソール・白ヒールパッチ)が出そうな気配がないのであきらめて、いつか買おうと思っていたPatrickのMarathonのレザー版を買った。暇だったので銀座にある直営店まで足をのばしたものの、まさかのサイズ切れで、在庫確認をしない詰めの甘さをちょっと後悔した。それでも色違いでサイズを合わせ、サイズ違いで色を合わせてすごく気に入ったので、在庫のあった神戸の直営店から自宅に配送してもらい、無事届いた。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/patrick-marathon-le-black.html</guid>
      <pubDate>Wed, 04 Feb 2015 06:56:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://www.amazon.co.jp/gp/product/B00KPLL2BK/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00KPLL2BK&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;&lt;img alt="[パトリック] PATRICK MARATHON-L" height="292" src="http://ecx.images-amazon.com/images/I/81N31b1DlwL.jpg" width="500"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;スタンスミスの黒(白ソール・白ヒールパッチ)が出そうな気配がないのであきらめて、いつか買おうと思っていた&lt;a href="http://www.amazon.co.jp/gp/product/B00KPLL2BK/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00KPLL2BK&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;PatrickのMarathonのレザー版&lt;/a&gt;を買った。暇だったので&lt;a href="https://www.google.com/maps/place/PATRICK+LABO+GINZA/@35.672537,139.770912,17z/data=!4m6!1m3!3m2!1s0x60188be1a52511d7:0x95a40c38fe1238b8!2sPATRICK+LABO+GINZA!3m1!1s0x60188be1a52511d7:0x95a40c38fe1238b8"&gt;銀座にある直営店&lt;/a&gt;まで足をのばしたものの、まさかのサイズ切れで、在庫確認をしない詰めの甘さをちょっと後悔した。それでも色違いでサイズを合わせ、サイズ違いで色を合わせてすごく気に入ったので、在庫のあった神戸の直営店から自宅に配送してもらい、無事届いた。&lt;/p&gt;

&lt;p&gt;スタンスミスが欲しいのだから&lt;a href="https://www.patrick-onlineshop.jp/products/detail.php?product_id=42"&gt;Punch&lt;/a&gt;を買うという手もあったが、それはそれで何か負けたような気がしていて嫌だった。そこでPunchを避けた上で、ソール交換できるモデルということで&lt;a href="https://www.patrick-onlineshop.jp/products/detail.php?product_id=21"&gt;Nevada II&lt;/a&gt;や&lt;a href="https://www.patrick-onlineshop.jp/products/detail.php?product_id=57"&gt;Pamir&lt;/a&gt;とMarathonに絞り込んだが、そこからもかなり悩んだ。でも若い頃欲しかったけど全然扱いがなくてあきらめたことを思い出してMarathonのレザー版にした。&lt;/p&gt;

&lt;p&gt;ロングノーズっぽい靴が苦手なのもあって、直営店でも色々眺めたもののやはりMarathonかと感じた。MarathonはPatrickのモデルの中ではコロンと丸みをおびた形で、シャープすぎず一番好きだ。直営店にはざっと数えても50種類以上は揃っていて、小さい(20畳もなかった気がする)とはいえさすがだった。&lt;/p&gt;

&lt;p&gt;色はブラックにした。ウェブの画像ではちょっとわかりづらいが、Patrickの二本線とシューレースは生成りと、落ち着いた色で良かった。ネイビーもロゴのタブが赤だったりとかなり良かったけど、歴史的な事情により靴は黒系しか買わないことにしているのでやめておいた。&lt;/p&gt;

&lt;p&gt;Marathonはアウトソールが厚めで柔らかく、クッション性が高い。Patrick共通のインソールの良さもあって、足への負担はかなり少なそうな柔らかさがある。ただ反発力が強いので、しっかりと地面をつかんで歩くというような感覚からはほど遠く、機能的な靴という印象だ。このあたりはカンペールやビルケンシュトックとは系統が違う良さなのかなと思う。ナイキのフリーと系統はいっしょで、それよりは機能で大きく劣るものの、重量バランスや奇をてらわないたたずまいで優ると思う。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;8000円でソールの張替えができるようなので、長く愛用してやりたい。2ヶ月後くらいきれいにする時には&lt;a href="http://jasonmarkk.com/collections/products/products/3691-4-oz-premium-kit-1"&gt;Jason Markkの汚れ落とし&lt;/a&gt;でも買おう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ソーシャル・ボタンの再設置</title>
      <link>http://hail2u.net/blog/internet/social-buttons-20150203.html</link>
      <description>SNSをやめる人がいる一方で、僕はソーシャル・ボタンを再設置した。各記事の最後にTwitterとFacebook、はてなブックマークに流すリンクが、狭い画面ではコンテンツに続いて、広い画面では左にぶら下がる形で配置される。カウントは蛇足っぽい気がしたので、単なるリンクにしておいた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/social-buttons-20150203.html</guid>
      <pubDate>Tue, 03 Feb 2015 09:39:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="/images/blog/social-buttons-20150203.png"&gt;&lt;img alt="Tweet, Share &amp;amp; Bookmark!" height="627" src="/images/blog/social-buttons-20150203.png" width="1200"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://blog.kyanny.me/entry/2015/02/01/003412"&gt;SNSをやめる人&lt;/a&gt;がいる一方で、僕はソーシャル・ボタンを再設置した。各記事の最後にTwitterとFacebook、はてなブックマークに流すリンクが、狭い画面ではコンテンツに続いて、広い画面では左にぶら下がる形で配置される。カウントは蛇足っぽい気がしたので、単なるリンクにしておいた。&lt;/p&gt;

&lt;p&gt;僕はSNSは雑多でうっとうしいことが多くて正常だと考えている。でも雑多なことはともかく、うっとうしさを許容する必要はあまり感じていなくて、すぐにミュートしたりアンフォローしたり再フォローするように軽くやってれば良いのかなというスタンスをとっている。なのでFacebookのようなやたらとアンフォローするとダメージが大きそうなSNSは近寄りたくはないなと思っていて、運用が難しそうではあるがサークルの再構成という形でアンフォローを代替できるGoogle+はもっと流行っても良さそうだと思ってる。&lt;/p&gt;

&lt;p&gt;情報のノイズ率のような方向から見ると、SNSというシステムでコミュニケーションをすることそのものが根本的に壊れていることに気づいてしまうので、考えないことにしている。ノイズの多さは自分の世界がまともである証、とかそんな感じでポジティブにとらえられると良さそうだ。&lt;/p&gt;

&lt;h2&gt;追記&lt;/h2&gt;

&lt;p&gt;はてなブックマークでブックマークするリンクがおかしかったのを直した。報告をくれた&lt;a href="https://twitter.com/shimabukuro"&gt;@shimabukuro&lt;/a&gt;とおかしいところを指摘してくれた&lt;a href="https://twitter.com/motemen"&gt;@motemen&lt;/a&gt;の二人のおかげ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>動的なサブセット化と動的なコンテンツ</title>
      <link>http://hail2u.net/blog/webdesign/dynamic-subsetting-and-dynamic-contents.html</link>
      <description>日本語を含むウェブ・フォントを使う場合、その転送量の多さとライセンスの問題により、動的にサブセット化されることがある。手段として間違ってはいないが、利用する側はそれなりに気をつける必要がある。それは動的に追加されるコンテンツに対しては指定しない、ということだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/dynamic-subsetting-and-dynamic-contents.html</guid>
      <pubDate>Mon, 02 Feb 2015 06:40:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;日本語を含むウェブ・フォントを使う場合、その転送量の多さとライセンスの問題により、動的にサブセット化されることがある。手段として間違ってはいないが、利用する側はそれなりに気をつける必要がある。それは動的に追加されるコンテンツに対しては指定しない、ということだ。&lt;/p&gt;

&lt;p&gt;動的なサブセット化はHTMLに書かれた文字列を利用して行われる。多くの場合、その仕組みとパフォーマンスの観点から静的なHTMLのソースそのものを利用することになる。つまりJavaScriptを利用してクライアント側で動的に追加されるコンテンツの文字列がサブセットに反映されることはまずない。&lt;/p&gt;

&lt;p&gt;例えば&lt;a href="http://www.iwatafont.co.jp/ud/"&gt;イワタUDゴシック&lt;/a&gt;を&lt;a href="http://webfont.fontplus.jp/"&gt;Fontplus&lt;/a&gt;経由で採用している&lt;a href="http://vps.sakura.ad.jp/"&gt;さくらのVPSのトップページ&lt;/a&gt;では、以下のようにクライアント側で動的に生成されるお知らせの一覧はイワタUDゴシックと他のフォント(ここでは游ゴシック)が混ざって表示される。&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="/images/blog/dynamic-subsetting-and-dynamic-contens.png"&gt;&lt;img alt="同じページで使われていない文字だけ他のフォントで表示されている" height="360" src="/images/blog/dynamic-subsetting-and-dynamic-contens.png" width="640"&gt;&lt;/a&gt;

  &lt;figcaption&gt;さくらのVPSのWindowsでのスクリーンショット&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ウェブ・フォントを使うべきところだけ指定するのが確実だが、それはあまりにも煩雑だろう。ブラックリスト方式で、動的にコンテンツを挿入する要素に&lt;code&gt;.disable-webfonts&lt;/code&gt;などといったウェブ・フォントを無効化するような&lt;code&gt;font-family&lt;/code&gt;プロパティーを指定したクラス名も振っておくのが良いだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>画像の縦横サイズの追加</title>
      <link>http://hail2u.net/blog/webdesign/adding-image-width-and-height.html</link>
      <description>自前の画像を参照する時にwidthとheight属性を追加すると激しい腹痛におそわれる病を長く患っていたけど、どうやら完治したようなのでバッチ処理で追加してた。ついでにimg要素の各属性の記述順序なども書きかえたりして、楽しく時間を浪費した。大いなる無駄だが、他人には迷惑をかけないし、途中から段々トランスしてきた。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/adding-image-width-and-height.html</guid>
      <pubDate>Sun, 01 Feb 2015 03:29:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;自前の画像を参照する時に&lt;code&gt;width&lt;/code&gt;と&lt;code&gt;height&lt;/code&gt;属性を追加すると激しい腹痛におそわれる病を長く患っていたけど、どうやら完治したようなのでバッチ処理で追加してた。ついでに&lt;code&gt;img&lt;/code&gt;要素の各属性の記述順序なども書きかえたりして、楽しく時間を浪費した。大いなる無駄だが、他人には迷惑をかけないし、途中から段々トランスしてきた。&lt;/p&gt;

&lt;p&gt;サイズを明示した画像がはみ出すことへの対策にはCSSで&lt;code&gt;max-width&lt;/code&gt;プロパティーを使う。それだけだと縦横比が狂ってリサイズされるので、以下のように&lt;code&gt;height&lt;/code&gt;プロパティーも併用するのが良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;img {
  height: auto;
  max-width: 100%;
}

@supports (object-fit: scale-down) {
  img {
    height: auto;
    max-width: none;
    object-fit: scale-down;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こういう時は&lt;a href="http://www.w3.org/TR/css3-images/#the-object-fit"&gt;&lt;code&gt;object-fit&lt;/code&gt;プロパティー&lt;/a&gt;の出番のはずなので、このように更に&lt;a href="http://www.w3.org/TR/css3-conditional/#at-supports"&gt;&lt;code&gt;@supports&lt;/code&gt;ルール&lt;/a&gt;を使ってやるとChrome 31以降とFirefox 36 (まだ安定版ではない)以降で&lt;code&gt;scale-down&lt;/code&gt;を使うようにできる。しかし&lt;code&gt;object-fit&lt;/code&gt;プロパティーをサポートしているSafari 7以降で&lt;code&gt;@supports&lt;/code&gt;ルールがサポートされていないという問題があるので、もうちょっと工夫した方が良さそう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;バッチ処理には&lt;a href="https://www.npmjs.com/package/imagesize"&gt;imagesize&lt;/a&gt;パッケージを使って、オレオレGruntタスクとして書いてやった。Grunt使うとファイルのリストアップと非同期処理がラップされるので、こういう一括処理のツールを書き捨てる時にもすでに導入されているプロジェクトならちょっと使ってやると楽できる。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>node-dns-prefetch</title>
      <link>http://hail2u.net/blog/webdesign/node-dns-prefetch.html</link>
      <description>毎回dns-prefetch Online Code Generatorからコピペはさすがに面倒そうなので、URLを指定するとそのページに含まれる外部リソースのドメインから&lt;link rel="dns-prefetch"&gt;を生成するCLIツール、dns-prefetchを作成した。Node.jsからPhantomJSを使って書いたので、ドメイン抽出とかも簡単でよかった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-dns-prefetch.html</guid>
      <pubDate>Sat, 31 Jan 2015 01:28:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;毎回&lt;a href="http://dnsprefetch.com/"&gt;dns-prefetch Online Code Generator&lt;/a&gt;からコピペはさすがに面倒そうなので、URLを指定するとそのページに含まれる外部リソースのドメインから&lt;code&gt;&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot;&amp;gt;&lt;/code&gt;を生成するCLIツール、&lt;a href="https://github.com/hail2u/node-dns-prefetch"&gt;dns-prefetch&lt;/a&gt;を作成した。Node.jsからPhantomJSを使って書いたので、ドメイン抽出とかも簡単でよかった。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;dns-prefetch &amp;lt;URL&amp;gt; [--xhtml]&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;npmを使ってインストールした後、ターミナルでURLを指定して実行するのみ。デフォルトではHTML文法で出力するので、XHTML文法で出力したい場合は&lt;code&gt;--xhtml&lt;/code&gt;オプションを追加する。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;dns-prefetch http://hail2u.net/&lt;/kbd&gt;
&amp;lt;link href=&amp;quot;//googleads.g.doubleclick.net&amp;quot; rel=&amp;quot;dns-prefetch&amp;quot;&amp;gt;
&amp;lt;link href=&amp;quot;//pagead2.googlesyndication.com&amp;quot; rel=&amp;quot;dns-prefetch&amp;quot;&amp;gt;
&amp;lt;link href=&amp;quot;//www.google-analytics.com&amp;quot; rel=&amp;quot;dns-prefetch&amp;quot;&amp;gt;
&amp;lt;link href=&amp;quot;//www.gstatic.com&amp;quot; rel=&amp;quot;dns-prefetch&amp;quot;&amp;gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;このウェブサイトに対して実行するとこのような結果になる(ユニーク化され、ソートされる)。さらなるリダイレクト先をたどるのはもうちょっと工夫が必要そうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;本当はGruntやgulpから扱えると良いが、URLを指定して行う都合上、タスク・ランナーやビルド・ツールには向いていない気がするので、単独のCLIツールにした。タスク・ランナーやビルド・ツールへのプラグインとして作るのは不可能ではないが、ローカルサーバーを立てるなりする必要がある上に、プロジェクト側にちゃんとしたHTMLファイルが存在しないとならず、ちょっと面倒くさい。PhantomJS製のためインストール負荷が高いことやそんなに頻繁に更新する必要はないことも少しある。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>rel=dns-prefetchの導入</title>
      <link>http://hail2u.net/blog/webdesign/implementing-dns-prefetch.html</link>
      <description>前にちょっと書いてからもう一年以上経ってしまったが、rel=dns-prefetchを仕込むようにした。小規模なウェブサイトではあまり意味はないが、あってもほとんど損はないとも思われる。他のウェブサイトへ移動した時にも効果があるらしい、というような話を小耳に挟んだこともあり、追加してみることにした。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/implementing-dns-prefetch.html</guid>
      <pubDate>Fri, 30 Jan 2015 19:17:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;前にちょっと書いてからもう一年以上経ってしまったが、&lt;code&gt;rel=dns-prefetch&lt;/code&gt;を仕込むようにした。小規模なウェブサイトではあまり意味はないが、あってもほとんど損はないとも思われる。他のウェブサイトへ移動した時にも効果があるらしい、というような話を小耳に挟んだこともあり、追加してみることにした。&lt;/p&gt;

&lt;p&gt;僕は開発者ツールを見ながら手作業でリストを作っていったが、&lt;a href="http://dnsprefetch.com/"&gt;dns-prefetch Online Code Generator&lt;/a&gt;で生成すると手軽だ。URLを入力してボタンを押すだけで、外部リソースをスキャンしてそのドメイン+αをリストアップしてくれる。Google AdSenseやGoogle Analyticsではリダイレクト先で新たなリソースの追加もあるが、それらのドメインまでは調べてくれない。とはいえこのツールで調べられるドメインまでで十分だろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>クリティカル・パスのCSSなるシロモノ</title>
      <link>http://hail2u.net/blog/webdesign/on-critical-path-css.html</link>
      <description>クリティカル・パスのCSSをインライン化して、描画の開始を早めるテクニックが広まり始めている。数字上は確かに効果的だが、ソーシャル・ボタンの非同期化によるスクロールのつっかかりと似たような問題を孕んでいるのではないかという思いが強い。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/on-critical-path-css.html</guid>
      <pubDate>Thu, 29 Jan 2015 02:35:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;クリティカル・パスのCSSをインライン化して、描画の開始を早めるテクニックが広まり始めている。数字上は確かに効果的だが、ソーシャル・ボタンの非同期化によるスクロールのつっかかりと似たような問題を孕んでいるのではないかという思いが強い。&lt;/p&gt;

&lt;p&gt;世の中にはスクロールをまったくしない人とすぐにする人がいる。しない人はまったくしないので、クリティカル・パスのCSSのインライン化は意味があるような無いようなところだ。効果的になるはずのスクロールする人は、ページが表示され次第&lt;em&gt;とりあえずスクロールする&lt;/em&gt;という行動を取ることが多いように思う。その時、非同期で読み込まれたCSSが間に合っていないとかなりひどいことになるだろう。&lt;/p&gt;

&lt;p&gt;こういったページ閲覧中のちょっとしたパフォーマンスの低下を避けるためにも、CSSは一気に読ませた方が良いと考えている。非同期化されたJavaScriptによりコンテンツの追加や削除が頻繁に行われる昨今ではなおさらそうではないだろうか。&lt;/p&gt;

&lt;p&gt;また、クリティカル・パスのCSSを切り出す時にどうしてもユーザーの平均解像度などといったものを意識せざるをえないことも印象が良くない。このことは定期的に徹底的な見直しを余儀なくされるということでもあるが、ようやく広まり始めたコンテンツ主導のレスポンシブ・ウェブ・デザインとは相反する作業でもある。&lt;/p&gt;

&lt;p&gt;他にもさらなる高速化のために「クリティカル・パスのCSSを小さくしよう」となってしまいそうで怖い。例えば初期描画領域に大きな画像とハンバーガー・ボタンだけといったウェブページはどんどん増えている。この流行りはクリティカル云々とは関係のないものだが、クリティカル・パスのCSSを減らすには都合が良いビジュアル・デザインではある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;body&lt;/code&gt;要素の余白の削除&lt;/li&gt;
&lt;li&gt;大きな画像の敷き詰め&lt;/li&gt;
&lt;li&gt;ハンバーガー・ボタンの位置指定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このくらいでクリティカル・パスのCSSは終わりになる。このCSSの小ささは魅力的なので、それを根拠にパフォーマンス主導でビジュアル・デザインの選択が行われてしまう結果になりうる。もちろんその選択をこの流行りが強力に後押しすることになる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;JavaScriptも含め、ウェブページにおける非同期化は処理を先送りしているに過ぎないことが多い。その処理はユーザーの閲覧と並行して行われるので、閲覧の快適性を損なう可能性は十分に考えられる。初期描画開始までの高速化は、数字としてはわかりやすい指標だが、それが即ウェブページの快適性に繋がるとは限らないことは十分に意識しておく必要があるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description>&lt;p&gt;HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Sat, 07 Feb 2015 09:38:00 +0900</lastBuildDate>
  </channel>
</rss>
