<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <copyright>Copyright © 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>ゆるやかな出会い</title>
      <link>http://hail2u.net/blog/blog/encounter.html</link>
      <description>内容に曖昧なところの少ない公式文書や仕様書、あるいはWikipediaの項目などのみをリンクで参照する形でウェブログの記事が書かれることが多くなった。孫引きや孫々引きのような記事は減り、全体的な記事の質は比べ物にならないくらい上がった。その一方でゆるやかな繋がりは死に、それに伴うゆるやかな出会いは消滅した。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Blog</category>
      <guid isPermaLink="true">http://hail2u.net/blog/blog/encounter.html</guid>
      <pubDate>Thu, 04 Dec 2014 02:19:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;内容に曖昧なところの少ない公式文書や仕様書、あるいはWikipediaの項目などのみをリンクで参照する形でウェブログの記事が書かれることが多くなった。孫引きや孫々引きのような記事は減り、全体的な記事の質は比べ物にならないくらい上がった。その一方でゆるやかな繋がりは死に、それに伴うゆるやかな出会いは消滅した。&lt;/p&gt;

&lt;p&gt;このあたりのことはもう取り返しがつかないであろうし、今こそTrackBackのような何かが……などといっても混乱させるだけだろう。そういう世界になったというだけの話だ。&lt;/p&gt;

&lt;p&gt;今の世界では記事は記事で独立した存在であり、その前後の記事はおろか書いた人のことにまで思い及ぶことはほぼない。あったとしてもそれは否定的な動機によるものだろう。そういった独立した記事達はもはやウェブログのような形態には収まることは無意味で、効率良く横断的に情報のみを得られるようなStack OverflowやQiitaへ、あるいは完全に隔離されたpplogへ、と廃棄されていく。&lt;/p&gt;

&lt;p&gt;廃棄というのは多分に過去の幻想、TrackBackが理想通りに機能する世界を夢見ていたことによる悪意ある表現ではあるが、気軽に書き捨てるというような意味だ。記事自体には大きな変化は起きないので、情報量という観点では変化は見えてこない。しかし、記事と記事の繋がりやそれに伴う出会いのような観点で捉えると大きく変わった。&lt;/p&gt;

&lt;p&gt;フォローしている人やタグといった無機質な単位でしか記事と出会うことはなくなっている。そしてその記事はほぼどん詰まりで、これまた無機質な公式文書や仕様書、そしてWikipediaの項目へとしか行き着くことはない。そこには新たな情報はあっても、出会いはない。&lt;/p&gt;

&lt;p&gt;むしろそういった出会いのようなものがTwitterやLINEといったものに取って代わったことによる必然的な変化なのかもしれない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;技術系に限らずAdvent Calendarが個々のウェブログ(やウェブサイト)で書かれなくなったな、と今年は強く感じた。続けてこのようなことを考えていた。&lt;/p&gt;

&lt;p&gt;個々のウェブログに書かれていた時は、普段良く読んでいる人がとあるAdvent Calendarに参加すると記事になる。そのため「こういうAdvent Calendarがあったのか」という発見があり、それに参加している他の人々という出会いがあった。いくつかは期待外れであったりもしたが、うちいくつかはとても興味深い出会いだったように思う。&lt;/p&gt;

&lt;p&gt;今はどのようなAdvent Calendarがあるかの発見は、QiitaやAdventarの一覧を見る以外にまったくないだろう。具体的な何か、例えばCSSやらBEMやらをもってAdvent Calendarを探すというのなら集約されている現状は効率が良い。でも無作為で意外な出会いもあって欲しいと考えるのは強欲なのだろうか。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>2014年の宗旨替え</title>
      <link>http://hail2u.net/blog/webdesign/i-changed-my-mind-in-2014.html</link>
      <description>移り変わりが激しい世界なので、去年まで当たり前のようにやっていたことを、今年はまったくやらなくなったりすることはよくある。僕は遂に諦めてCSSの定義(プロパティーと値のセット)を書く順序をアルファベット順に統一した。去年はシンプルなクラス名からBEMへの変更だった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/i-changed-my-mind-in-2014.html</guid>
      <pubDate>Wed, 03 Dec 2014 12:49:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;移り変わりが激しい世界なので、去年まで当たり前のようにやっていたことを、今年はまったくやらなくなったりすることはよくある。僕は遂に諦めてCSSの定義(プロパティーと値のセット)を書く順序をアルファベット順に統一した。去年はシンプルなクラス名からBEMへの変更だった。&lt;/p&gt;

&lt;p&gt;CSSで定義を書く順序は論理的な理由を持つ順序が良いとは今でも思っている。関連するプロパティーが並んでいれば、そのルールセットがどういう振る舞いをするのかわかりやすいはずだ。そういう意味で&lt;a href="http://hail2u.net/blog/webdesign/css2-property-order.html"&gt;CSS 2.1仕様書に出てくる順&lt;/a&gt;で書くというのは、仕様書が論理的な構造を持って書かれていることを考えると理にかなっている。&lt;/p&gt;

&lt;p&gt;しかし時代は変わった。&lt;/p&gt;

&lt;p&gt;CSS 3の時代になり、仕様書はモジュール単位で散在するようになり、実装が出てから安定版に進むようになり、スナップショットは作られなくなった。こうなるとどのような順で書くか仕様書を基準に明確に規定することは難しくなる。CSS 2.1をベースに考えてモジュール化された仕様の位置を決めることはできなくはないが、AnimationなどといったCSS 2.1には欠片も存在しないようなものの位置は決めることができない。&lt;/p&gt;

&lt;p&gt;かといって無作為な順番で書くというのは読みづらさを加速する。落とし所としてはアルファベット順がデメリットが少ないという点と賛同を得やすいという点で優れている。そうでなければルールセットごとにひとつの定義しか書かない&lt;a href="https://developers.google.com/speed/articles/optimizing-css"&gt;Declaration Just Once&lt;/a&gt;アプローチだろうか。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Declaration Just Onceアプローチは一度(まだ一度だけ)使ってみた。これはCSSプリプロセッサーと、そしてオブジェクト志向と食合せが非常に悪い。しかしひたすら素のCSSで書くというケースではそこそこうまく行き、保守性が高いことがすこしわかってきた。&lt;/p&gt;

&lt;p&gt;CSSファイルでセレクターが散在することが懸念だったが、2006年当時と違ってあるセレクターでの問題はCSSファイルと格闘するわけではない。余程のことがなければ開発者ツールで格闘するので、セレクターがあっちこっちに散らばっていてもほとんど問題になることはなかった。&lt;/p&gt;

&lt;p&gt;来年にはうまくいけばCSSプリプロセッサーを捨てることも不可能ではないと感じている。その際にはCSSの定義を書く順序……というかCSSの書き方という単位でまた宗旨変えしそうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;こういった宗旨替えは誰しも毎年(どころか四半期に一度くらい)何かしらやっていることと思う。みなネタが豊富そうなので、来年は是非アドベント・カレンダーとして作りたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>毛布をかけずに敷く</title>
      <link>http://hail2u.net/blog/misc/laying-out-the-blanket.html</link>
      <description>TwitterのTLで流れてきてた毛布をかけるのではなく敷くのを試してみている。確かに暖かい。熱が上に逃げるから、下に暖かさが維持できるものがあると効率的ということなのかな？ただ断熱性の高い羽毛布団のような掛け布団は必須そう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/laying-out-the-blanket.html</guid>
      <pubDate>Tue, 02 Dec 2014 13:01:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;TwitterのTLで流れてきてた毛布をかけるのではなく敷くのを試してみている。確かに暖かい。熱が上に逃げるから、下に暖かさが維持できるものがあると効率的ということなのかな？ただ断熱性の高い羽毛布団のような掛け布団は必須そう。&lt;/p&gt;

&lt;p&gt;下から:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;マットレス&lt;/li&gt;
&lt;li&gt;ベッドパッド&lt;/li&gt;
&lt;li&gt;毛布&lt;/li&gt;
&lt;li&gt;ボックスシーツ&lt;/li&gt;
&lt;li&gt;タオルケット&lt;/li&gt;
&lt;li&gt;掛け布団&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という形にした。体に直接毛布だと、気軽に洗えない毛布が汚れまくりそうで嫌だったため、ベットパッドとボックスシーツの間にした。冬用の厚手でウール(やアクリル)のシーツとかでも良さそうだけど、洗うの大変なので問題外だと思う。&lt;/p&gt;

&lt;p&gt;羽毛布団の良いやつ欲しい。けどiMac (Retineモデル)よりも高い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ギジュツケー・アドベント・カレンダー</title>
      <link>http://hail2u.net/blog/internet/well-prepared-tech-advent-calendar.html</link>
      <description>技術系アドベント・カレンダーもすっかり定着した感じだ。この(多分)独特の(色々)ゆるゆるな感じのものも悪くはないが、もっとしっかりと準備されたものもあった方が良いのではないかと去年くらいから思ってる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/well-prepared-tech-advent-calendar.html</guid>
      <pubDate>Mon, 01 Dec 2014 13:07:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;技術系アドベント・カレンダーもすっかり定着した感じだ。この(多分)独特の(色々)ゆるゆるな感じのものも悪くはないが、もっとしっかりと準備されたものもあった方が良いのではないかと去年くらいから思ってる。&lt;/p&gt;

&lt;p&gt;記事の網羅性とメンバー同士での査読期間を確保するためにはかなり余裕を持って始めなければならないかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7月頭: 募集開始&lt;/li&gt;
&lt;li&gt;8月末: メンバー及び原稿内容の決定&lt;/li&gt;
&lt;li&gt;9月末: 第一〆切&lt;/li&gt;
&lt;li&gt;10月末: 原稿の完成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようなスケジュールで原稿を完成させ、11月にウェブサイトをみんなで作って、12月に順次公開したい。というようなことを考えたこともあったが、みんなそんなにヒマじゃないのでそこそこお金を出してくれるスポンサーでも募集しないと無理そうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕は今年はギジュツケーには書かず、&lt;a href="http://www.adventar.org/calendars/342"&gt;TKG&lt;/a&gt;と&lt;a href="http://www.adventar.org/calendars/539"&gt;床&lt;/a&gt;についてゆるゆるで書く予定……だが、書きたい感じがちょっと高まってきた。SassやGruntをいつでも捨てられるようにするためのA-Zみたいなネタがあり、この前とあるプロジェクトで捨てた時に感じたことをまとめたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>タスク・ランナーをnpm run-scriptでラップ</title>
      <link>http://hail2u.net/blog/webdesign/wrapping-task-runner-with-npm-run-script.html</link>
      <description>npm で依存もタスクも一元化するという記事を興味深く読んだ。僕もしばらく前、具体的にはnpm v2出た時からGruntをnpm run-scriptでラップして使っている。概ね良好に機能すると感じている。懸念であった引数で特定の処理を行わせたいようなケースもnpm v2で引数を解釈できるようになったので解決した。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/wrapping-task-runner-with-npm-run-script.html</guid>
      <pubDate>Sun, 30 Nov 2014 11:48:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://qiita.com/Jxck_/items/efaff21b977ddc782971"&gt;npm で依存もタスクも一元化する&lt;/a&gt;という記事を興味深く読んだ。僕もしばらく前、具体的にはnpm v2出た時からGruntを&lt;a href="https://www.npmjs.org/doc/cli/npm-run-script.html"&gt;npm run-script&lt;/a&gt;でラップして使っている。概ね良好に機能すると感じている。懸念であった引数で特定の処理を行わせたいようなケースもnpm v2で引数を解釈できるようになったので解決した。&lt;/p&gt;

&lt;p&gt;npm run-script経由にすることによる大きなデメリットとしては、そんなに速くもないnpm経由で常にタスクを実行することによる速度の低下が挙げられる。&lt;/p&gt;

&lt;p&gt;この速度の低下は、Gruntやgulpの主要な目的であるビルドにおいてはそれほど問題にならない。ビルドにかかる時間に比べると、相対的にその低下の割合は低いものだと考えられるからだ。しかしタスクはそういったものにとどまらず例えばHTML(やMarkdown)のプレビューであったり、Sassのオンデマンド・コンパイルといった小さなタスクもある。その場合は速度低下が占める割合は高くなってしまい、実行時のストレスに繋がる。&lt;/p&gt;

&lt;p&gt;もちろんそういった小さなタスクを各開発者が自前で用意している環境に任せるという選択もあり、実際そうする方が良いことが多い。しかしその一方で小さなタスクまでも用意してやることによって、環境一式を開発者間で揃えられるというメリットも捨てがたい。その場合、小さなタスクのコストをできるだけ小さく抑えるための工夫が必要になる。&lt;/p&gt;

&lt;p&gt;そうなるとタスク・ランナー経由で実行させるよりも、設定不要な小さなNode.jsスクリプトを作りそれを実行した方が効率的だ。プロジェクトにGruntとgulpを混ぜてnpm run-scriptでラップというのは馬鹿げているが、Gruntと小さなNode.jsスクリプトの組み合わせは悪くはない。そのNode.jsスクリプトが設定不要なことと&lt;code&gt;package.json&lt;/code&gt;の&lt;code&gt;script&lt;/code&gt;で複雑なコマンドライン・オプションを指定したコマンドを定義しないこと辺りがキモになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;private&amp;quot;: true,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;build&amp;quot;: &amp;quot;grunt build&amp;quot;,
    &amp;quot;deploy&amp;quot;: &amp;quot;grunt deploy&amp;quot;,
    &amp;quot;preview&amp;quot;: &amp;quot;.bin/preview&amp;quot;,
    &amp;quot;sassc&amp;quot;: &amp;quot;.bin/sassc&amp;quot;,
    &amp;quot;start&amp;quot;: &amp;quot;grunt connect&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;grunt test&amp;quot;
  },
  devDependencies: {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的にはこのような形でミックスしている。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;npm test&lt;/kbd&gt;
$ &lt;kbd&gt;npm run deploy&lt;/kbd&gt;
$ &lt;kbd&gt;npm run preview -- src/weblog/drafts/example.markdown&lt;/kbd&gt;
$ &lt;kbd&gt;npm run sassc -- src/css/style.scss&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;実行のインターフェイスは統一され、引数あるなしはあるものの中身には特に左右されない。例えばこの&lt;code&gt;.bin/preview&lt;/code&gt; (20行くらい)では引数のファイルの拡張子でどうやってHTMLを作るかを分け、一時ディレクトリーにHTMLファイルを作成し、最後にそれをブラウザーで開くようになっている。また&lt;code&gt;.bin/sassc&lt;/code&gt; (10行くらい)はSassのCLIプログラムをプロジェクトにあった形のオプションで実行するだけのラッパー・スクリプトだ。&lt;/p&gt;

&lt;p&gt;両者ともに似たような、またはもっと高機能のGruntプラグインやgulpプラグインはいくつも存在する。それらは小回りを犠牲に汎用性を持たせているため、プロジェクト特化型の小さなNode.jsスクリプトと違い、やることに比して大仰過ぎる嫌いがある。まさに牛刀といったところだ。&lt;/p&gt;

&lt;p&gt;無理にGruntやgulpに寄せるよりも、タスクの規模と利用ケースを考慮して書き分け、npm run-scriptで統一してやる方が使いやすいものになるはずだ。どうせ使う方は中身を読んだり修正したりはしないので、Node.jsで完結しているならばどんな風に書かれていても大した問題ではない。プロジェクトを構成するファイルが増えることにはなるが、&lt;code&gt;.bin&lt;/code&gt;といった見えにくいディレクトリーに放り込んでおけば邪魔扱いされることもないだろう。&lt;/p&gt;

&lt;p&gt;僕はGruntやgulpといったタスク・ランナーをいずれ捨てる(新しいタスク・ランナーに変えるではなく、単に捨てる)ことも視野に入れて使っているので、特にこう感じるのかもしれない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;他には&lt;code&gt;npm run&lt;/code&gt;は微妙に長いことと引数を付ける時に&lt;code&gt;--&lt;/code&gt;を挟むのを忘れがちなことというような、使い方において慣れないと厳しいことくらいか。&lt;code&gt;package.json&lt;/code&gt;の肥大化が～というような観点もあるが、多くても20行くらい(&lt;code&gt;pre-&lt;/code&gt;や&lt;code&gt;post-&lt;/code&gt;を駆使した場合でも)なので&lt;code&gt;Gruntfile.js&lt;/code&gt;のあっという間に300行と比べると問題にならないだろう。&lt;/p&gt;

&lt;p&gt;npm run-scriptでのラップが優れた解であることは疑いないが、その実際の構成にはもう少し色々考えるべきところがありそうだ。もっと様々なユースケースを知りたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Gruntで実行しているエイリアス・タスクの名前とターゲットの取得</title>
      <link>http://hail2u.net/blog/coding/getting-grunt-alias-task-name-and-target.html</link>
      <description>Gruntのタスク内から今実行されているタスクの名前とターゲットは、それぞれthis.nameとthis.targetで取得できる。しかしエイリアス・タスク経由での実行の場合、その名前やターゲットを簡単に取得する方法は用意されてない。どうやっても拾えないかというとそうでもなく、grunt.cli.tasksにコマンドラインで実際に指定されたタスク群が配列として格納されるので、それから拾えば良い。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/getting-grunt-alias-task-name-and-target.html</guid>
      <pubDate>Sat, 29 Nov 2014 10:16:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Gruntのタスク内から今実行されているタスクの名前とターゲットは、それぞれ&lt;a href="http://gruntjs.com/api/inside-tasks#this.name"&gt;&lt;code&gt;this.name&lt;/code&gt;&lt;/a&gt;と&lt;a href="http://gruntjs.com/api/inside-tasks#this.target"&gt;&lt;code&gt;this.target&lt;/code&gt;&lt;/a&gt;で取得できる。しかし&lt;a href="http://gruntjs.com/creating-tasks#alias-tasks"&gt;エイリアス・タスク&lt;/a&gt;経由での実行の場合、その名前やターゲットを簡単に取得する方法は用意されてない。どうやっても拾えないかというとそうでもなく、&lt;code&gt;grunt.cli.tasks&lt;/code&gt;にコマンドラインで実際に指定されたタスク群が配列として格納されるので、それから拾えば良い。&lt;/p&gt;

&lt;p&gt;例えば以下のようなオプションでGruntを実行し、普通のマルチ・タスクとエイリアス・タスクを複数まとめて実行したとする。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;grunt multi:foo alias:bar&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;この場合&lt;code&gt;grunt.cli.tasks&lt;/code&gt;は以下のような配列になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
  &amp;#39;multi:foo&amp;#39;,
  &amp;#39;alias:bar&amp;#39;
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;grunt.cli.tasks&lt;/code&gt;にはコマンドライン・オプションで指定したタスクがそのままの順序で格納される。そのためエイリアス・タスクの名前やターゲットへアクセスできるというわけだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;use strict&amp;#39;;

module.exports = function (grunt) {
  grunt.registerMultiTask(
    &amp;#39;example&amp;#39;,
    &amp;#39;Example task.&amp;#39;,
    function () {
      if (grunt.cli.tasks.some(function (task) {
        return task === &amp;#39;alias:bar&amp;#39;;
      })) {
        // Do task.
      }
    }
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;タスク内からはこのようにしてアクセスすることになるだろう。&lt;code&gt;Array.prototype.some()&lt;/code&gt;を使って&lt;code&gt;grunt.cli.tasks&lt;/code&gt;を調べ、&lt;code&gt;alias:bar&lt;/code&gt;経由での実行の時のみ特別扱いしてやる、というわけだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Gruntの本道としては設定を切り分けて&lt;code&gt;options&lt;/code&gt;でフラグを立ててやるべきようなことなので、あまり必要とされることはない。そのためかアクセスする方法が用意されていないのだが、書き捨てるタスクではコード側でガッツリやってやった方が面倒じゃないことも多い。エイリアス・タスクの名前やターゲットと同じような意味を持つ設定を書かなくて済み、コード側で完結できるからだ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>twitter:siteプロパティー</title>
      <link>http://hail2u.net/blog/internet/twitter-site-property.html</link>
      <description>TwitterアナリティクスにはTwitterカードの解析が出来る機能があるのだけど、単にウェブサイトにTwitterカードを設置しただけでは解析してくれなかった。どうやれば良いのか全然わからなかったけど、どうやらtwitter:creatorだけでなくtwitter:siteプロパティーも設定してやる必要があるようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/twitter-site-property.html</guid>
      <pubDate>Fri, 28 Nov 2014 08:18:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://analytics.twitter.com/"&gt;Twitterアナリティクス&lt;/a&gt;には&lt;a href="https://dev.twitter.com/cards/overview"&gt;Twitterカード&lt;/a&gt;の解析が出来る機能があるのだけど、単にウェブサイトにTwitterカードを設置しただけでは解析してくれなかった。どうやれば良いのか全然わからなかったけど、どうやら&lt;code&gt;twitter:creator&lt;/code&gt;だけでなく&lt;code&gt;twitter:site&lt;/code&gt;プロパティーも設定してやる必要があるようだ。&lt;/p&gt;

&lt;p&gt;必須である&lt;code&gt;twitter:card&lt;/code&gt;と&lt;code&gt;twitter:creator&lt;/code&gt;プロパティーに加えて&lt;code&gt;twitter:site&lt;/code&gt;プロパティーを書くことになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;twitter:card&amp;quot; content=&amp;quot;summary&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:site&amp;quot; content=&amp;quot;@hail2unet&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:creator&amp;quot; content=&amp;quot;@hail2u_&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このウェブサイトの場合は他のプロパティーはOGPから読んで貰っているので、固定でこれらを追加するだけで良かった。&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt="Twitter Cardsの解析が有効になり、水色でツイート数、紺でインプレッション数、オレンジでURLクリック数とそれぞれグラフが描画されるように" src="http://hail2u.net/images/blog/twitter-cards-analytics.png"&gt;

  &lt;figcaption&gt;Graph of Twitter Cards Analytics&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;設定後はTwitterカードの解析内容がアカウントと結びつけられるので、TwitterアナリティクスのダッシュボードからTwitterカードを見るとこのようにグラフが描画されるようになった。ゆるやかに上昇しているのはグラフ描画ライブラリのせいで、ツイート数とURLクリック数のグラフがおかしいのはまだデータが足りないせいだろう(変化率なのでデータが貯まれば是正されるはず)。&lt;/p&gt;

&lt;p&gt;他、どのようなユーザーがツイートしてくれたか(インフルエンサー)やそれらユーザーが利用しているクライアント名など様々なデータを見ることが可能になる。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>未満と以上</title>
      <link>http://hail2u.net/blog/webdesign/less-than-and-or-more.html</link>
      <description>8 Facesというタイポグラフィーの雑誌では毎回インタビューが載っている。そのインタビューで触れられた書体をまとめたTypographer’s typefacesという記事ではGeorgiaやVerdanaを始め、Gotham、FF Scala (Sans)と素晴らしい書体が挙げられている。これらの書体が良いものであることはほぼ疑いがないが、その良さには多少の誤解が含まれるのではないかと感じる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/less-than-and-or-more.html</guid>
      <pubDate>Thu, 27 Nov 2014 07:38:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="http://www.8faces.com/"&gt;8 Faces&lt;/a&gt;というタイポグラフィーの雑誌では毎回インタビューが載っている。そのインタビューで触れられた書体をまとめた&lt;a href="http://blog.8faces.com/post/103548341771/typographers-typefaces"&gt;Typographer’s typefaces&lt;/a&gt;という記事ではGeorgiaやVerdanaを始め、Gotham、FF Scala (Sans)と素晴らしい書体が挙げられている。これらの書体が良いものであることはほぼ疑いがないが、その良さには多少の誤解が含まれるのではないかと感じる。&lt;/p&gt;

&lt;p&gt;こういったいわゆるプロフェッショナルに評価が高い書体というものは、全体のクオリティーを引き上げてくれるもの……のように思われるが実際はそうではない。底上げには大いに貢献してくれるが、差し替えたところでその変化はうまく伝わることは少ないだろう。で、あるからこそ軽視されやすいとも言えるし、差し替えるだけで大きく印象が変化する名前を言うことすら憚られるあの書体が濫用されるということでもある。&lt;/p&gt;

&lt;p&gt;もう一つは素人以上プロフェッショナル未満の存在だ。多くのウェブ・デザイナー達はここに含まれる。タイポグラフィーについて長い期間系統立てて学んだウェブ・デザイナーは稀だろう。彼らは当該記事で挙げられた書体が底上げのみを行ってくれることは知っているが、実際にどのように底上げしてくれるかは感覚としてしか理解していない。&lt;/p&gt;

&lt;p&gt;ウェブ・フォントとCSS 3の拡充は、このプロフェッショナル未満とプロフェッショナルの間に多くの技術が実装されていくこと、されていることを示している。うちいくつかは&lt;a href="http://kennethormandy.com/journal/normalize-opentype-css"&gt;Normalize-OpenType.css&lt;/a&gt;のようなライブラリーを通して導入できるが、感覚的な理解だけでは効果的な利用には程遠くなる。それはすなわち書体本来の良さを引き出しきれないということになるだろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕は8 Facesをまだ1冊しか読んだことはないのだけど、すごく面白かった記憶はある。新号が面白かったら集めたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ナイン・ストーリーズ</title>
      <link>http://hail2u.net/blog/media/nine-stories.html</link>
      <description>読もうと思ったらなかったのでナイン・ストーリーズを買って読んでた。3回目くらいの新潮文庫版。いつ読んでもすっきりしなくて、難解な小説を読んだ的な満腹感があって楽しい。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/nine-stories.html</guid>
      <pubDate>Wed, 26 Nov 2014 07:06:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://www.amazon.co.jp/gp/product/4102057013/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4102057013&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/416EBEXR8PL.jpg" alt="ナイン・ストーリーズ (新潮文庫): サリンジャー, 野崎 孝: 本"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;読もうと思ったらなかったので&lt;a href="http://www.amazon.co.jp/gp/product/4102057013/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4102057013&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;ナイン・ストーリーズ&lt;/a&gt;を買って読んでた。3回目くらいの新潮文庫版。いつ読んでもすっきりしなくて、難解な小説を読んだ的な満腹感があって楽しい。&lt;/p&gt;

&lt;p&gt;サリンジャーはたまに(3年に一度くらい)読むんだけど、いつも読まなきゃ良かったとか思う。読む度に印象と感想が変わっていくので、そういう意味では面白いし好きなんだけど、どんどん愛せなくなってくる。なので次に読むまで間があく→また印象が変わる→間があくと悪循環している。&lt;/p&gt;

&lt;p&gt;これをあと2周くらいすると最初期のハマった心持ちに戻れるような気がしていて、また3年後くらいに読むんじゃないかと思う。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;そのまま流れでアッシュ・リンクスのお話の方を読んでて、時間がいくらあっても足りない。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>CSSWringとCSS MQPackerのv2.0.0をリリース</title>
      <link>http://hail2u.net/blog/webdesign/csswring-and-css-mqpacker-v2.0.0.html</link>
      <description>CSSWringとCSS MQPackerをPostCSS v3に更新したものをリリースした。どのバージョンを上げるか迷ったが、メジャー・バージョンアップして気持ち悪いのは自分だけなので、ユーザーに混乱を与えないようにメジャー・バージョンを上げることにした。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/csswring-and-css-mqpacker-v2.0.0.html</guid>
      <pubDate>Tue, 25 Nov 2014 09:12:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://github.com/hail2u/node-csswring"&gt;CSSWring&lt;/a&gt;と&lt;a href="https://github.com/hail2u/node-css-mqpacker"&gt;CSS MQPacker&lt;/a&gt;をPostCSS v3に更新したものをリリースした。&lt;a href="http://hail2u.net/blog/software/major-update-of-dependencies.html"&gt;どのバージョンを上げるか&lt;/a&gt;迷ったが、メジャー・バージョンアップして気持ち悪いのは自分だけなので、ユーザーに混乱を与えないようにメジャー・バージョンを上げることにした。&lt;/p&gt;

&lt;p&gt;PostCSSにそのまま渡されるオプションのうち&lt;code&gt;map&lt;/code&gt;キーのデフォルト値が変わったことが互換性のない変更ということになる。今まで通りソース・マップ・ファイルを外部に吐き、元ソースを含めない場合は以下のように設定してやる必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var csswring = require(&amp;#39;csswring&amp;#39;);

var result = csswring.wring(css, {
  map: {
    inline: false,
    sourcesContent: false
  },
  from: &amp;#39;from.css&amp;#39;,
  to: &amp;#39;to.css&amp;#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまりインラインにソース・マップを埋め込む&lt;code&gt;inline&lt;/code&gt;オプションと、元ソースをソース・マップに含める&lt;code&gt;sourcesContent&lt;/code&gt;オプションが&lt;code&gt;false&lt;/code&gt;から&lt;code&gt;true&lt;/code&gt;に変更になったので、それぞれを無効にしてやる必要があるということだ。単純にインラインで元ソース付きのソース・マップでも構わないのなら、&lt;code&gt;map&lt;/code&gt;オプションを&lt;code&gt;true&lt;/code&gt;にするだけで良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var csswring = require(&amp;#39;csswring&amp;#39;);

var result = csswring.wring(css, {
  map: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合はインラインで全て解決するので、&lt;code&gt;from&lt;/code&gt;や&lt;code&gt;to&lt;/code&gt;オプションも不要になる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;インラインをデフォルトにした理由はちょっと良くわかっていない。インラインの方がパス解決などの点で都合が良いことが多く、開発現場では使いやすいからなのではないかと想像している。今までのように&lt;code&gt;map: true&lt;/code&gt;だと出力するCSSが肥大化する(3倍超)ので、開発とリリースそれぞれのビルドにおいてオプションを変えて生成するように気を付ける必要があるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「rsync-ac (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-rsync-ac</link>
      <pubDate>Mon, 07 Jul 2014 16:30:38 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-rsync-ac</guid>
      <description>&lt;p&gt;rsync-ac (Gruntプラグイン)は&lt;a href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt;を使って他のディレクトリへファイルをコピーするGruntプラグインです。オプション設定を絞ることであまり考えずに使えるようにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「pubsubhubbub_publish (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-pubsubhubbub_publish</link>
      <pubDate>Mon, 07 Jul 2014 00:44:37 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-pubsubhubbub_publish</guid>
      <description>&lt;p&gt;pubsubhubbub_publish (Gruntプラグイン)はGoogleが提供している&lt;a href="https://pubsubhubbub.appspot.com/"&gt;PubSubHubbubハブ&lt;/a&gt;へ指定したURLのフィードを&lt;code&gt;publish&lt;/code&gt;するGruntプラグインです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「Picks」を追加</title>
      <link>http://picks.hail2u.net/</link>
      <pubDate>Sun, 06 Jul 2014 04:48:23 +0900</pubDate>
      <guid isPermaLink="true">http://picks.hail2u.net/</guid>
      <description>&lt;p&gt;Picksは僕が興味をもった様々なURLをアイコンをヒントにざっと眺めることの出来るウェブサイトです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WEB+DB Press Vol.81にて「イマドキHTML/CSS開発」を執筆</title>
      <link>http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</link>
      <pubDate>Thu, 19 Jun 2014 15:31:33 +0900</pubDate>
      <guid isPermaLink="true">http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</guid>
      <description>&lt;p&gt;Web標準技術の進歩やデバイスの多様化といったWebをとりまく環境の急激な変化は、従来のWebサイト開発手法を時代遅れのものとしつつあります。設計から実装・検証、そしてデバイスへの最適化まで、ワークフロー全体の変革が求められているということです。本特集では、現在はもちろん、これからも増大し続ける多様性を見据えてどのような開発手法をとっていくべきかについて、実例を交じえながら詳しく解説していきます。6月24日発売、&lt;a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069"&gt;Amazonにて予約受付中&lt;/a&gt;です！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「UnUTM」を追加</title>
      <link>https://github.com/hail2u/unutm</link>
      <pubDate>Thu, 12 Jun 2014 06:32:16 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/unutm</guid>
      <description>&lt;p&gt;UnUTMはウェブページのURLからGoogle Analyticsなどで利用されているUrchin Traffic Monitor (UTM)用のパラメーターを自動的に削除し、URLの分散を解消するJavaScriptライブラリです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSSWring」を追加</title>
      <link>https://github.com/hail2u/node-csswring</link>
      <pubDate>Fri, 25 Apr 2014 08:19:34 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-csswring</guid>
      <description>&lt;p&gt;CSSWringはCSSを圧縮(minification)するNode.jsパッケージです。Node.jsパッケージとして組み込むだけでなく、コマンドラインからも実行できます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSS MQPacker」を追加</title>
      <link>https://github.com/hail2u/node-css-mqpacker</link>
      <pubDate>Sat, 22 Feb 2014 15:39:04 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-css-mqpacker</guid>
      <description>&lt;p&gt;CSS MQPackerはCSSファイル内に散在するメディアクエリを、クエリごとにまとめCSSファイルを最適化するNode.jsパッケージです。これを利用した&lt;a href="https://github.com/hail2u/grunt-css-mqpacker"&gt;Gruntプラグイン&lt;/a&gt;もあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Thu, 04 Dec 2014 02:19:00 +0900</lastBuildDate>
  </channel>
</rss>
