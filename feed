<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>ウェブ・フォントの読み込み</title>
      <link>http://hail2u.net/blog/webdesign/loading-web-fonts.html</link>
      <description>ウェブ・フォントも完全に行き渡り、今はどう効率的に配信するかについて多くの時間を割くようになった。Google Fontsの低め安定路線を見限り、TypeKitやFonts.comへ鞍替えする人々も増えた。それと同時に自前でホスティングする人々も徐々にその数を増やしており、どれが最適解なのか一応の結論が出るにはもう少しかかるだろう。まず、ウェブ・フォントの読み込みにおいてどのようなアプローチがあり、どのようなメリット、そしてデメリットがあるのだろうか。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/loading-web-fonts.html</guid>
      <pubDate>Fri, 09 Jan 2015 13:10:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ウェブ・フォントも完全に行き渡り、今はどう効率的に配信するかについて多くの時間を割くようになった。Google Fontsの低め安定路線を見限り、TypeKitやFonts.comへ鞍替えする人々も増えた。それと同時に自前でホスティングする人々も徐々にその数を増やしており、どれが最適解なのか一応の結論が出るにはもう少しかかるだろう。まず、ウェブ・フォントの読み込みにおいてどのようなアプローチがあり、どのようなメリット、そしてデメリットがあるのだろうか。&lt;/p&gt;

&lt;p&gt;TypeKit等に頼るにしろ、自前でホスティングするにしろ、もちろん最終的にはウェブ・フォントをブラウザーに送りつける必要がある。読み込みとはまさにその部分の話だ。話がややこしくなるので、&lt;a href="http://hail2u.net/documents/bulletproof-at-font-face-syntax.html"&gt;多様な実装を意識した安全な書き方&lt;/a&gt;などについては触れない。&lt;/p&gt;

&lt;h2&gt;普通に@font-face定義を利用&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@font-face&lt;/code&gt;定義をただ普通に書く場合のメリットは、基本的な知識さえあれば書けることと動かなくなる可能性が最小限に抑えられることだ。CSSが単純であることから、書きやすく、組み込みやすく、修正もしやすい。将来的に仕様が大きく変化した場合でも、実装がそれなりにフォローしてくれることも期待できるだろう。&lt;/p&gt;

&lt;p&gt;デメリットは読み込みコストの増加と初期描画の遅延だ。&lt;/p&gt;

&lt;p&gt;読み込みコストの増加は単純に大きめの画像へのリクエストが常に行われるということでもあるし、メモリーの圧迫ということでもある。機器の進化と環境の発展が解消してくれるであろう問題であるとも言えるが、歴史を振り返ると常に汲々として対策を練らなくてはいけない類いの問題であったので、そうはたやすく解決されないだろう。&lt;/p&gt;

&lt;p&gt;初期描画の遅延は、古くからFOUTと呼ばれ問題視されていた現象についてがまず挙げられる。だいたいはFOUTが起こらないように実装が変化した。ウェブ・フォントのリクエストに失敗していそうな時も3秒でフォールバック・フォントで表示されるように統一されつつあるので、あまり問題ではなくなりそうだ。&lt;/p&gt;

&lt;p&gt;しかし、3秒間文字がまったく表示されない状態が続く、と考えると致命的な遅延とも言える。実際にはCSSファイルの肥大化による遅延も重なり、空白の状態からやっと表示されたら今度は文字が見えないという状態に変化するため、ユーザーへはなかなかの違和感を与えることになる。&lt;/p&gt;

&lt;h2&gt;DataURIを使ったsrc記述子の指定&lt;/h2&gt;

&lt;p&gt;メリットはウェブ・フォントが必要な場合には必ず既に読み込み済みになっていることだ。つまりCSSファイルが読み込まれたならウェブ・フォントが適用されるだろうし、何らかの理由でCSSファイルの読み込みに失敗した場合でも文字だけ見えないというような状態には決してならない。またCSSだけで完結するのも大きいだろう。残念ながらツールの助けは必要になるだろうが、特にHTMLやJavaScriptの助けは必要としない。&lt;/p&gt;

&lt;p&gt;デメリットはCSSファイルの肥大化だ。英数記号のみの欧文タイプフェイスのウェブ・フォントであったとしてもウェイトごとに30KBほど、和文のそれになると少なくともウェイトごとに300–1000KB前後がCSSファイルに追加されることになる。これは単にCSSファイルの読み込み自体に時間がかかるということだけではなく、そのパースに時間がかかるということでもある。つまりウェブページの描画され始めるまでに時間がかかってしまうということだ。&lt;/p&gt;

&lt;p&gt;ウェブ・フォントに限らず巨大なData URIをCSSファイルに混ぜ込むのは悪手と言って良い。せいぜい2KB前後までのSVGファイルくらいなものだろう。&lt;/p&gt;

&lt;h2&gt;ウェブ・フォントのCSSの遅延読み込み&lt;/h2&gt;

&lt;p&gt;初期描画を遅延させないためには、JavaScriptファイルの非同期読み込みと同じように、ウェブ・フォントの読み込みとウェブページの描画を同時に行わせれば良い。CSSファイルに&lt;code&gt;@font-face&lt;/code&gt;定義を書かず、&lt;code&gt;head&lt;/code&gt;要素の子としても書かないことによって、遅延読み込みさせることに成功すれば、ウェブ・フォント由来の初期描画の遅延は限りなく少なくなる。&lt;/p&gt;

&lt;p&gt;このデメリットはFOUTと呼ばれ、問題視されていた古いFirefoxの挙動と同じになることだ。まずフォールバックとして指定されたローカルのフォントで表示され、ウェブ・フォントの読み込みが完了した後にフォントが変更になるため、その切り変わる時に画面がフラッシュする。読み込みが終わるまで文字がまったく表示されないよりはフラッシュすることの方がまだ良いだろうというネガティブな選択の結果の手段ということになる。&lt;/p&gt;

&lt;p&gt;また残念ながらCSSだけでは完結しない。JavaScriptを使うか、文法違反であることに目をつぶって&lt;code&gt;body&lt;/code&gt;要素の最後にウェブ・フォントを読み込むための&lt;code&gt;link&lt;/code&gt;要素を突っ込む必要がある。&lt;/p&gt;

&lt;h2&gt;Web Font Loader&lt;/h2&gt;

&lt;p&gt;遅延読み込みを一歩進め、フォントの読み込みを監視することにより、FOUTを制御できるようにしたのが&lt;a href="https://github.com/typekit/webfontloader"&gt;Web Font Loader&lt;/a&gt;だ。ウェブページの描画をブロックする・しないを選択できるので、好みで柔軟に描画のされ方を調節できる。CSSだけで完結とまではいかないが、制御ロジックそのものはクラス名を通してCSSで行えるので、保守性は高い。&lt;/p&gt;

&lt;p&gt;標準化されている&lt;a href="http://www.w3.org/TR/css-font-loading/"&gt;CSS Font Loading Module Level 3&lt;/a&gt;を利用することになる将来も、これと同じようなアプローチになることが予想される。Polyfillとは言えないが、ウェブ標準と親和性が高いものとは言えるだろう。&lt;/p&gt;

&lt;p&gt;デメリットはこれまでに上げた手法の高度なラッパーに過ぎないということだ。柔軟でカスタマイズしやすいことは確かだが、このライブラリーに強く依存することを強いられる。名前を挙げることも憚られる某ライブラリーと似たような立ち位置のものと言うと近い。&lt;/p&gt;

&lt;h2&gt;Web Storageを使ったキャッシング&lt;/h2&gt;

&lt;p&gt;読み込みをインターネット経由で行うことがウェブ・フォントにおける多くの問題の原因である以上、高速に取り出せるローカルにキャッシュがあれば良いというのが骨子となる。&lt;a href="http://www.w3.org/TR/webstorage/"&gt;Web Storage (いわゆる&lt;code&gt;localStorage&lt;/code&gt;)&lt;/a&gt;を使いウェブ・フォントをキャッシングさせれば、インターネットを経由せずに済む。想定通りうまく動けば初期描画の遅延とFOUTという二つの大きな問題は解決される。&lt;/p&gt;

&lt;p&gt;Web Storageの実装を見るに、保守性は非常に悪いといえるだろう。キャッシュのリフレッシュまでも視野に入れると更に厳しい。利用を単純化したライブラリーがあれば一瞬光ることはありそうだが、環境の変化(SPDY)により無に帰してしまいそうな技術とも思える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;このウェブサイトでもFOUT強制をやめることにした過程で調べたり考えたりしたことを、読み込みの部分だけに特化してざっとまとめてきた。一長一短であるが、それでもあえて選択するとしたらWeb Font Loaderではないかと僕は考える。現状で最も柔軟であることは、軌道修正をする際に非常に助かる。依存しすぎないこととその挙動をしっかりと知ることを念頭に置いてWeb Font Loaderを使うのが良いだろう。&lt;/p&gt;

&lt;p&gt;ウェブ・フォントの利用にあたってはその読み込みが最も重要な部分であることは確かだが、他にも考慮すべき点は色々ある。例えばブランド・ロゴに専用のウェブ・フォントを利用する場合は別のタイプフェイスで表示されるということは許されない。その場合はフォールバックさせず、画像を代わりに表示する必要があることだろう。そういう場合は読み込みについては特に凝ったことをしない方がやりやすい可能性も高い。&lt;/p&gt;

&lt;p&gt;ともあれ、ウェブ・フォントの利用はウェブサイトへ大きな変化をもたらす。それは見た目だけではなくパフォーマンスについても、だ。そのことの重要な一柱である読み込みについてはしっかりと考えて実装してやる必要があるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>2015年の目標</title>
      <link>http://hail2u.net/blog/misc/my-2015-manifest.html</link>
      <description>今年は「夜の歯みがきに10分以上かける」ということに決めた。上に5分、下に5分かけていきたい。できれば15分くらいかける習慣にしたいが、いきなりは難しそうなので徐々に伸ばしていくつもりだ。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/my-2015-manifest.html</guid>
      <pubDate>Thu, 08 Jan 2015 15:27:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;今年は「夜の歯みがきに10分以上かける」ということに決めた。上に5分、下に5分かけていきたい。できれば15分くらいかける習慣にしたいが、いきなりは難しそうなので徐々に伸ばしていくつもりだ。&lt;/p&gt;

&lt;p&gt;今はまだ5分くらいしかかけていない。普通の歯ブラシだと洗面所以外でやるのは難しそうなので、電動歯ブラシを買ってだらだらやるのが良さそうな気がする。いずれにしてもまずはゆっくりやることを習慣づけたい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="http://hail2u.net/blog/misc/my-2014-manifesto.html"&gt;去年の目標&lt;/a&gt;の達成率は7割くらいだった。食欲、特に風呂後のそれにはなかなか勝てない。自然と早くに寝て誤魔化すという形になりがちだった。結果として早起きすることが増えたので、これはこれで良かったのかもしれない。&lt;/p&gt;

&lt;p&gt;生活習慣のようなものはすっぱり変えるという具合にはいかない。このような感じで一年くらいかけてゆっくり変えていくのは今後も続けていこう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>HTTPからHTTPSへ</title>
      <link>http://hail2u.net/blog/internet/http-to-https.html</link>
      <description>HTTPSへの移行が今年は加速するだろうというのは言うまでもないが、それに伴い起こりうる事象については真っ二つな印象がある。僕は特にもうCool URIとか言いたくないので、301すれば良いだろう派だ。HTTPSという記事ではそれはおいておいてブラウザーのデフォルトは変えるべきなのかなど、移行の加速がもたらす環境の変化について指摘している。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/http-to-https.html</guid>
      <pubDate>Wed, 07 Jan 2015 08:08:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;HTTPSへの移行が今年は加速するだろうというのは言うまでもないが、それに伴い起こりうる事象については真っ二つな印象がある。僕は特にもうCool URIとか言いたくないので、301すれば良いだろう派だ。&lt;a href="https://adactio.com/journal/8100"&gt;HTTPSという記事&lt;/a&gt;ではそれはおいておいてブラウザーのデフォルトは変えるべきなのかなど、移行の加速がもたらす環境の変化について指摘している。&lt;/p&gt;

&lt;p&gt;ブラウザーのデフォルトは早々にHTTPSに変わるものとそうでないものに分かれるのだろうか。プロトコル・スキームを表示しなくなって久しいし、セキュアではないウェブページで警告を出す方が理に適ってはいる。しかしコストゼロで移行が行えない以上、HTTPのウェブサイトがあたかもフィッシングやスパムのウェブサイトと同列に見られかねない状況が強制されるのはかなり厳しい。&lt;/p&gt;

&lt;p&gt;そうなると「この警告は問題ありません！」といったお知らせをすべてのウェブページに突っ込む、というような展開もありえそう。ぞっとしない未来だ。&lt;/p&gt;

&lt;p&gt;また、HTTPからHTTPSへリダイレクトを設定し、単純にURLとおぼしきものからすべてプロトコル・スキームを削除するだけでは解決できない部分もある。例えばFacebookなどが利用しているOGPやはてなブックマークのようなHTTPSを厳密に区別するウェブサービスだ。&lt;/p&gt;

&lt;p&gt;OGPでは&lt;code&gt;meta&lt;/code&gt;要素を使ってURLも表現するので、スキームを省略することはできない。移行の際にはすべてのページの&lt;code&gt;og:url&lt;/code&gt;を書き換える必要がある。また移行と同時に既存のいいね！を失う(かもしれない)。はてなブックマークでも似たようなことが起こりうる。それぞれウェブサービス側の慎重な対応(HTTPとHTTPSの同一視ではなく301の解釈？)が必要になる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕はそれでも今年中にこのウェブサイトはHTTPSに移行させたいな、と考えている。CloudFlareを使って頑張るとどこまでいけるのかみたいな実験でもあるが、小さなウェブサイトをHTTPSで運営するという今までにほとんどなかったケースをもうちょっと詳しく学びたいのが大きい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>RUBYOPTを使った外部エンコーディングの指定</title>
      <link>http://hail2u.net/blog/webdesign/setting-rubyopt-for-sass.html</link>
      <description>今年からSassでcontentプロパティーなどでマルチバイトの文字列をエスケープせずにばしばし書くことにしたので、遂にWindowsでもUTF-8をデフォルトにしないとダメそうな感じになった。この場合、環境変数LANGを変えようとか良く書かれているけれど、Ruby以外に影響を及ぼさない真っ当な手段としてはRUBYOPTの方を使うべきなようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/setting-rubyopt-for-sass.html</guid>
      <pubDate>Tue, 06 Jan 2015 08:48:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;今年からSassで&lt;code&gt;content&lt;/code&gt;プロパティーなどでマルチバイトの文字列をエスケープせずにばしばし書くことにしたので、遂にWindowsでもUTF-8をデフォルトにしないとダメそうな感じになった。この場合、環境変数&lt;code&gt;LANG&lt;/code&gt;を変えようとか良く書かれているけれど、Ruby以外に影響を及ぼさない真っ当な手段としては&lt;code&gt;RUBYOPT&lt;/code&gt;の方を使うべきなようだ。&lt;/p&gt;

&lt;p&gt;特に設定していないとマルチバイト文字列を含むSassファイルをコンパイルしようとすると以下のようなエラーメッセージを吐いて落ちる。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;C:\&amp;gt;&lt;kbd&gt;scss test.scss&lt;/kbd&gt;
Error: Invalid Windows-31J character &amp;quot;\xE2&amp;quot;
        on line 2 of test.scss
  Use --trace for backtrace.
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;test.scss&lt;/code&gt;の2行目には&lt;code&gt;➔&lt;/code&gt;が含まれている。このファイルに&lt;code&gt;@charset "UTF-8";&lt;/code&gt;を追加することでも正常にコンパイルされるようになるが、Sass(やRuby)はUTF-8で書くので、ユーザーワイドに設定してやった方が省力化を図れる。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;C:\&amp;gt;&lt;kbd&gt;set RUBYOPT=--encoding=UTF-8&lt;/kbd&gt;

C:\&amp;gt;&lt;kbd&gt;scss test.scss&lt;/kbd&gt;
@charset &amp;quot;UTF-8&amp;quot;;
.test {
  content: &amp;#39;➔&amp;#39;; }
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;RUBYOPT&lt;/code&gt;環境変数で&lt;code&gt;--encoding&lt;/code&gt;オプションを指定してやることで、外部エンコーディングをUTF-8に強制すると動くようになる。動作が確認できたら、あとはシステムのプロパティーからユーザー環境変数に仕込んでやれば良い。&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt="システムのプロパティーのダイアログよりユーザー環境変数へRUBYOPTを追加している様子" src="http://hail2u.net/images/blog/setting-rubyopt-environment-variable.png"&gt;

  &lt;figcaption&gt;ユーザー環境変数の設定ダイアログ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;なお、今のSassは非ASCII文字列があると、適切な値の&lt;code&gt;@charset&lt;/code&gt;ディレクティブを必ず追加するようになっている。先頭の&lt;code&gt;@charset &amp;quot;UTF-8&amp;quot;;&lt;/code&gt;を削除したい場合は何かしら別のツールに頼る必要がある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;マルチバイト文字列をそのまま書くことにしたのにはいくつか理由があるが、一番大きいのはエスケープされた文字列は人間が書くべきものではないということだ。&lt;code&gt;\0020&lt;/code&gt;とか書いているとバカバカしくなる。それ以外にももちろんわかりやすくなることとか、わざわざコメントでどういう文字のエスケープなのかとか書かなくて済むこととか。ただし見てもなにかわからない非改行スペースのようなものだけはエスケープする、というルールにした。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>名前を付けることの難しさ</title>
      <link>http://hail2u.net/blog/webdesign/naming-things-is-really-hard.html</link>
      <description>名前をつけることの難しさについて、実際にどうして格闘してやればよいのかについて書かれたNaming Thingsという記事を読み返した。中心となるのはCSSにおけるクラス名で、SUIT CSSの命名規則を取り上げて、わかりやすさ・明白さ・機能性・一貫性・適切さ・拡張性・短さと若干のジョークが許されるゆるさのようなものが重要であるとしている。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/naming-things-is-really-hard.html</guid>
      <pubDate>Mon, 05 Jan 2015 06:14:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;名前をつけることの難しさについて、実際にどうして格闘してやればよいのかについて書かれた&lt;a href="http://24ways.org/2014/naming-things/"&gt;Naming Things&lt;/a&gt;という記事を読み返した。中心となるのはCSSにおけるクラス名で、&lt;a href="https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md"&gt;SUIT CSSの命名規則&lt;/a&gt;を取り上げて、わかりやすさ・明白さ・機能性・一貫性・適切さ・拡張性・短さと若干のジョークが許されるゆるさのようなものが重要であるとしている。&lt;/p&gt;

&lt;p&gt;BEMから一歩進める(か下がる)時期ではあると思うが、なかなかとっかかりがなかった。この記事をもう一度くらい読んで、今年中にどう変えていくのかをちゃんと考えていきたい。SUIT CSSの命名規則はPascalCaseとcamelCaseが混じるところがあんまり好きじゃないので、別の何かが産み出せれば良いかなと思う。大文字使いたくないというのもちょっとある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕にはこの記事が今年の&lt;a href="http://24ways.org/"&gt;24 ways&lt;/a&gt;で最も良かった記事だった。他にも&lt;a href="http://24ways.org/2014/seo-in-2015-and-why-you-should-care/"&gt;SEOのようなそうでないような話&lt;/a&gt;や&lt;a href="http://24ways.org/2014/taglines-and-truisms/"&gt;タグラインの話&lt;/a&gt;(これを読んだ後にホームのタグラインを復活させた)も良かったが、実践性と哲学性のバランスでNaming Thingsが一番だったと思う。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>HTMLHintをSyntasticで使う</title>
      <link>http://hail2u.net/blog/software/htmlhint-in-syntastic.html</link>
      <description>重い腰を上げてVimでSyntasticを使うようにした。となるとHTMLHintを使いたいのだけど、対応してなかったので自分でチェッカー定義を書くところから始めた。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/htmlhint-in-syntastic.html</guid>
      <pubDate>Sun, 04 Jan 2015 08:58:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;重い腰を上げてVimで&lt;a href="https://github.com/scrooloose/syntastic"&gt;Syntastic&lt;/a&gt;を使うようにした。となると&lt;a href="https://github.com/yaniswang/HTMLHint"&gt;HTMLHint&lt;/a&gt;を使いたいのだけど、対応してなかったので自分でチェッカー定義を書くところから始めた。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="http://hail2u.net/images/blog/htmlhint-in-syntastic.png" alt="HTMLHintでのチェックの結果がガッターとバルーンヘルプで表示されている"&gt;

  &lt;figcaption&gt;Runnnig HTMLHint with Syntastic&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;今のところ&lt;a href="https://github.com/scrooloose/syntastic/pull/1280"&gt;チェッカー定義を追加したプルリクエスト&lt;/a&gt;が取り込まれる気配はない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Syntasticはそのままだと辛いことが多い気がする。汎用にした弊害か。CSSLintはルールをカスタマイズしづらいし、perlcriticはWindowsで死ぬ。そういったものをひとつひとつ潰すのは難しいし、好みの設定をできるようにすると保守できなくなる。適当なディレクトリーに置いたチェッカー定義を自動で読み込んでくれる(ビルトインのそれとバッティングしたら上書きしてくれる)機能などがあれば良いような気がした。ありそう。&lt;/p&gt;

&lt;h2&gt;追記&lt;/h2&gt;

&lt;p&gt;他のところにあるチェッカー定義は&lt;a href="https://github.com/scrooloose/syntastic/wiki/Syntax-Checker-Guide#6-external-checkers"&gt;external checkers&lt;/a&gt;という仕組みで実現できるようだ。こっちでやってみよう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>天空のドラゴン</title>
      <link>http://hail2u.net/blog/misc/dragon-in-the-sky.html</link>
      <description>おせちの残りを片付けた後、だらだら散歩しつつ、初売りをちょっと覗いたら人がたくさんいた。この街はいつのまにか正月に人が集まる側になったんだなと思った。特に買うものもないかなと思ってたが、惣菜屋の福袋を買った。その帰り道に空を見上げたらドラゴンが飛んでいるように見えた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dragon-in-the-sky.html</guid>
      <pubDate>Sat, 03 Jan 2015 07:17:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="浮かぶ雲がまるでドラゴンのような形に見える" src="http://hail2u.net/images/blog/dragon-in-the-sky.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;おせちの残りを片付けた後、だらだら散歩しつつ、初売りをちょっと覗いたら人がたくさんいた。この街はいつのまにか正月に人が集まる側になったんだなと思った。特に買うものもないかなと思ってたが、惣菜屋の福袋を買った。その帰り道に空を見上げたらドラゴンが飛んでいるように見えた。&lt;/p&gt;

&lt;p&gt;天空でも花嫁の方はやり残したことははぐれメタルを仲間にすることくらい。モンスターブローチの威力すごい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150102.html</link>
      <description>去年割りと高い金払って買ったセーターの袖に毛玉が大量に出来ていた。ひとつひとつ取っていったら袖丈が半分くらいになった。しょうがないので長袖Tシャツの袖を切ってホッチキスで止めたところで、これじゃきちんと止まらないので洋裁屋でジッパーとか買ってこないと、とか考えたところで終わり。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150102.html</guid>
      <pubDate>Fri, 02 Jan 2015 04:40:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;去年割りと高い金払って買ったセーターの袖に毛玉が大量に出来ていた。ひとつひとつ取っていったら袖丈が半分くらいになった。しょうがないので長袖Tシャツの袖を切ってホッチキスで止めたところで、これじゃきちんと止まらないので洋裁屋でジッパーとか買ってこないと、とか考えたところで終わり。&lt;/p&gt;

&lt;p&gt;買って気に入ったものがめちゃくちゃになる夢をよく見るようになった気がする。気がするというのはちゃんと覚えてないから。ブーツを買った後にもものすごい悪天候かなんかでブーツが濡れて溶けてなくなるみたいなのを見た気がする。夢の中でも大事にしたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>GitHub互換の見出しID</title>
      <link>http://hail2u.net/blog/coding/github-compatible-header-id.html</link>
      <description>gfmtoc (mdtocから名前を変えた)を作っている時にGitHub flavored Markdown (本当はHTML Pipeline)互換の見出しIDをNode.jsで生成する方法を考えていた。GitHubではRubyでサポートされているPOSIX文字クラスをユニコードへ対応させた\p{Word}を使っているので、それを作ればあとは簡単なようだ。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/github-compatible-header-id.html</guid>
      <pubDate>Thu, 01 Jan 2015 06:07:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://github.com/hail2u/node-gfmtoc"&gt;gfmtoc (mdtocから名前を変えた)&lt;/a&gt;を作っている時にGitHub flavored Markdown (本当は&lt;a href="https://github.com/jch/html-pipeline/"&gt;HTML Pipeline&lt;/a&gt;)互換の見出しIDをNode.jsで生成する方法を考えていた。GitHubではRubyでサポートされているPOSIX文字クラスをユニコードへ対応させた&lt;code&gt;\p{Word}&lt;/code&gt;を使っているので、それを作ればあとは簡単なようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=https://github.com/ruby/ruby/blob/1026907467ea3d5441e1bfa95f5f37b431a684f3/doc/regexp.rdoc#character-properties"&gt;Rubyのソースコードにある正規表現のドキュメント&lt;/a&gt;によると、以下のユニコード文字プロパティーのカテゴリーを組み合わせたものが&lt;code&gt;\p{Word}&lt;/code&gt;ということのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\p{L}&lt;/code&gt;: Letter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{M}&lt;/code&gt;: Mark&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{N}&lt;/code&gt;: Number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{Pc}&lt;/code&gt;: Connector_Punctuation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまりこれらを連結した正規表現パターンを作れば良い。まともにやったら日が暮れるので、Node.jsでは&lt;a href="https://www.npmjs.com/package/unicode-7.0.0"&gt;unicode-7.0.0&lt;/a&gt;と&lt;a href="https://www.npmjs.com/package/regenerate"&gt;regenerate&lt;/a&gt;の両パッケージを使って生成してやる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var regenerate = require(&amp;#39;regenerate&amp;#39;);

var word = regenerate().add(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;properties/Any&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/L&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/M&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/N&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/Pc&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  &amp;#39;-&amp;#39;,
  &amp;#39; &amp;#39;
);

console.log(word.toString());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは否定形が欲しいので、Anyプロパティーを&lt;code&gt;add()&lt;/code&gt;してから上記カテゴリーを&lt;code&gt;remove()&lt;/code&gt;していく。最終的には特別視される&lt;code&gt;-&lt;/code&gt;と&lt;code&gt; &lt;/code&gt;もここでついでに削除しておく。gfmtocでは&lt;a href="https://github.com/hail2u/node-gfmtoc/blob/master/lib/regexp-word.js"&gt;生成結果をファイルに保存したもの&lt;/a&gt;をライブラリとして使っている。普通はそのまま書けば良い(毎回動的に生成させるととても遅いことには注意が必要)。あとはHTML Pipelineがやっていることをなぞるのみだ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;小文字に変換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{Word}&lt;/code&gt;と&lt;code&gt;-&lt;/code&gt;、&lt;code&gt; &lt;/code&gt; (半角空白)以外を削除&lt;/li&gt;
&lt;li&gt;半角空白を&lt;code&gt;-&lt;/code&gt;に置換&lt;/li&gt;
&lt;li&gt;IDが被らないように数字を追加&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;HTML Pipelineではこのような&lt;a href="https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb"&gt;生成手順&lt;/a&gt;になっているようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var h = {};

function genID(s, h) {
  var u = &amp;#39;&amp;#39;;
  var word = /.../g;
  s = s.toLowerCase();
  s = s.replace(word, &amp;#39;&amp;#39;);
  s = s.replace(/ /g, &amp;#39;-&amp;#39;);

  if (h[s] &amp;gt; 0) {
    u = &amp;#39;-&amp;#39; + h[s];
  }

  if (!h[s]) {
    h[s] = 0;
  }

  h[s] += 1;

  return s + u;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認した限りではうまくいっているようだ。&lt;code&gt;id&lt;/code&gt;属性の値として使う場合はこのままで問題ないが、&lt;code&gt;href&lt;/code&gt;属性の値として使う場合は&lt;code&gt;encodeURIComponent()&lt;/code&gt;でURLエンコードしてやることを忘れない方が良い……ような気がするけど、最近のブラウザーはカシコイのでどっちでも良さそう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>はんぺんだて巻き</title>
      <link>http://hail2u.net/blog/misc/hanpen-datemaki.html</link>
      <description>だて巻き苦手とか言うと大人っぽいけど、そんなことは特になくおせちの中で好きなもののひとつ。だけどペッタペタに甘いのもさすがに辛くなってきたので、今年は作ってみるかと調べたり聞いたりしたところ、はんぺんで作ると楽でおいしいという話だった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/hanpen-datemaki.html</guid>
      <pubDate>Wed, 31 Dec 2014 04:53:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;だて巻き苦手とか言うと大人っぽいけど、そんなことは特になくおせちの中で好きなもののひとつ。だけどペッタペタに甘いのもさすがに辛くなってきたので、今年は作ってみるかと調べたり聞いたりしたところ、はんぺんで作ると楽でおいしいという話だった。&lt;/p&gt;

&lt;p&gt;試しに&lt;a href="http://www.kyounoryouri.jp/recipe/3275_%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%A0%E3%81%A6%E5%B7%BB%E3%81%8D.html"&gt;きょうの料理のスピードだて巻き&lt;/a&gt;をそのままで作ったら5mmくらいのペラッペラのしか焼けなかったので、本番では倍の量にしてやったらうまく3cm近くまでなった。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;材料&lt;/th&gt;
&lt;th style="text-align:right"&gt;分量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;はんぺん&lt;/td&gt;
&lt;td style="text-align:right"&gt;110g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td style="text-align:right"&gt;4個&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;砂糖&lt;/td&gt;
&lt;td style="text-align:right"&gt;大さじ2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;みりん&lt;/td&gt;
&lt;td style="text-align:right"&gt;大さじ1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;はんぺんは紀文の大判のものが一枚。これが塩分が多いような感じだったので塩は入れなかった。みりんも試しに作った時にきつかったような気がしたので、半分に。あとはひたすら&lt;a href="http://www.amazon.co.jp/gp/product/B00ITGDH16/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00ITGDH16&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;混ぜて&lt;/a&gt;、型に入れ、180度に予熱したオーブンの下段で15分焼くだけ。焼き色がうまくつかなかったので、上段で仕上げれば良かったのかもしれない。&lt;/p&gt;

&lt;p&gt;所要時間15分(+焼くのに15分)とは思えない手軽さとおいしさ。恵方巻きみたいに一本食いできそう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description>&lt;p&gt;HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Fri, 09 Jan 2015 13:10:00 +0900</lastBuildDate>
  </channel>
</rss>
