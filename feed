<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>ESLintの設定継承システム</title>
      <link>http://hail2u.net/blog/software/eslint-configuration-cascading.html</link>
      <description>ESLintのv0.20.0からプロジェクト・ローカルに.eslintrcがある場合は~/.eslintrcから設定を読まなくなった。つまりESLintのデフォルトの設定をユーザー・レベルで調節する術がほぼなくなったと言って良い。そうなった理由はわからないこともないのだけど、改悪な気がしてならない。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/eslint-configuration-cascading.html</guid>
      <pubDate>Thu, 30 Apr 2015 09:49:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="http://eslint.org/">ESLint</a>のv0.20.0からプロジェクト・ローカルに<code>.eslintrc</code>がある場合は<code>~/.eslintrc</code>から設定を読まなくなった。つまりESLintのデフォルトの設定をユーザー・レベルで調節する術がほぼなくなったと言って良い。そうなった理由はわからないこともないのだけど、改悪な気がしてならない。</p>

<p>確かにプロジェクト・ローカルの<code>.eslintrc</code>だけしか見ないようにすると、プロジェクト・メンバー間でのコーディング・スタイルが統一しやすくなる。しかしそれはいわゆるフォーマッターの役目で、リンターの役目ではないように思う。リンターの段階でコーディング・スタイルへの準拠を強いられると、普段それと違う書き方をしている人達にものすごいフラストレーションを与えることだろう。</p>

<p>強いられたスタイルのうちいくつかは<a href="http://editorconfig.org/">EditorConfig</a>などの併用により自動的に対応することはできる。その状態で書かれたコードは確かにコーディング・スタイルに沿っているだろうが、普段インデント幅を半角空白2つに設定している人が半角空白4つのインデントを強いられた場合、普段通りの感覚で書くことができるわけがない。つまり成果物の体裁の保証ができる代わりに、その質の保証が失われるという結果になる。</p>

<hr>

<p>とにかくどれくらい辛いのかと、僕は<code>rules</code>フィールドを書かなくて済むように自分を調教する道をあえて選んで色々書いているところだ。率直な感想としてはこれを他の開発者に強いるのはちょっと僕にはできそうもない。</p>

<p>他の開発者との兼ね合いだけではなく、自分だけのプロジェクトの時もいちいち設定してあげなくてはならないことが辛い。そういう場合はプロジェクト・ローカルの<code>.eslintrc</code>を作らなければ良いようにも思えるが、実際にはまだ多くのプロジェクトで<code>env</code>フィールドを使ってNode.js向けかブラウザー向けかを<code>.eslintrc</code>で設定してやる必要があり、そういう運用は難しいだろう。</p>

<hr>

<p>ESLintでは将来的には<a href="https://github.com/eslint/eslint/issues/2302">ウィザードでルールを設定して<code>.eslintrc</code>を吐くこと</a>ができるように考えられているようだ。<code>~/.eslintrc</code>の継承を元に戻して、強いルール付けを課したいプロジェクトではこのウィザードを使って全ルールを出力するというような形がバランスが良いのかなと思う。とにかくリンターとしては良いツールだとは思っているので、プロジェクトごとにルールを柔軟かつ手軽に設定できるようになってほしいものだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>サインアップ・ボタンでログイン</title>
      <link>http://hail2u.net/blog/internet/login-with-signup-button.html</link>
      <description>Google Analyticsで「ログイン」と間違えて「アカウントを作成」というサインアップのボタンを押したところ、それでもログインすることができた。Googleアカウントへログイン済みでAnalyticsアカウントを作成済みだとわかった場合はサインアップのボタンを押してもログインできるようになっているようだ。ログインとサインアップのボタンが横に並んでいると、間違えて違う方を押した結果サインアップ・フォームを見せられてイラッとすることがあるので、うまくできているなと感じた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/login-with-signup-button.html</guid>
      <pubDate>Wed, 29 Apr 2015 10:14:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="http://www.google.com/analytics/">Google Analytics</a>で「ログイン」と間違えて「アカウントを作成」というサインアップのボタンを押したところ、それでもログインすることができた。Googleアカウントへログイン済みでAnalyticsアカウントを作成済みだとわかった場合はサインアップのボタンを押してもログインできるようになっているようだ。ログインとサインアップのボタンが横に並んでいると、間違えて違う方を押した結果サインアップ・フォームを見せられてイラッとすることがあるので、うまくできているなと感じた。</p>

<p>別のアカウントを作成したい場合は一旦Googleアカウントからログアウトしなくてはならない。同じGoogleアカウントで複数のAnalyticsアカウントを作成することは出来ないことを考えると、それほど大きな問題ではないとは言えそうだが、アカウントを切り替えるための何らかの動線くらいはあっても良さそうだ。</p>

<p>実際にはGoogleのような大きな括りのアカウントとそれを使ってログインするアプリケーションという組み合わせでしか提供できなそうではある。しかし自動的にログインさせることは無理でも、過去にログインした形跡があればログイン・フォームの方を出すなどは可能だろう。</p>

<p>ユーザーは間違えるものという前提は浸透したと思うが、それへの対応の多くはその間違いの指摘に留まる。間違いをさりげなくフォローする仕組みが提供されるようになるともっと良いインターネットになるはずだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>CSSWring v3.0.4</title>
      <link>http://hail2u.net/blog/webdesign/node-csswring-v3.0.4.html</link>
      <description>完全に重複したルールを削除する際に間違ったルールが削除されることがあるバグを修正してCSSWringのv3.0.4をリリースした。他に特に大きな変更はない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-csswring-v3.0.4.html</guid>
      <pubDate>Tue, 28 Apr 2015 06:51:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>完全に重複したルールを削除する際に間違ったルールが削除されることがあるバグを修正して<a href="https://github.com/hail2u/node-csswring/">CSSWring</a>のv3.0.4をリリースした。他に特に大きな変更はない。</p>

<p>PostCSSの<code>container.each*()</code>はイテレート中に<code>container</code>が保証されるが、イテレート関数へ引数として与えられるインデックスを使ってノードの追加や削除を行うと保証されるとは限らないようだ。<code>node.removeSelf()</code>を使うとうまくいったので、バグの修正ではそうすることでシンプルに対応した。</p>

<p>PostCSSではノードを削除する時に、その親からインデックスを使って削除した方が速い。そのため意図的に<code>node.removeSelf()</code>を避けていたが、それが仇となった。</p>

<hr>

<p>PostCSSの注目度がグッと上がってきたのでうれしい。もうちょっと頑張ろうっていう気になってきた。</p>]]></content:encoded>
    </item>
    <item>
      <title>TinyLetter</title>
      <link>http://hail2u.net/blog/internet/tinyletter.html</link>
      <description>TinyLetterは無料で手軽にニュースレターを始められるサービスだ。MailChimpの開発陣が提供しているサービスで、解析その他のビジネス用途においてはMailChimpに比べ大きく劣るものの、ことニュースレターの送付という点では遜色ないと言えるだろう。色々な点で割り切って使える、なかなか良さそうなサービスだと感じた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/tinyletter.html</guid>
      <pubDate>Mon, 27 Apr 2015 06:10:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://tinyletter.com/">TinyLetter</a>は無料で手軽にニュースレターを始められるサービスだ。<a href="http://mailchimp.com/">MailChimp</a>の開発陣が提供しているサービスで、解析その他のビジネス用途においてはMailChimpに比べ大きく劣るものの、ことニュースレターの送付という点では遜色ないと言えるだろう。色々な点で割り切って使える、なかなか良さそうなサービスだと感じた。</p>

<p>ニュースレターを送ろうとするとそれなりにコストがかかる。自前で用意したサーバーで自身のドメインを使って提供することも不可能ではないが、それがレピュテーション・システムに与えるリスクを考えると賢明ではない。かといって有料のものは安く済むということがほぼない。送信量に比例してコストが増えるのに対し、その効果は比例していくことはまずないからだ。</p>

<p>ニュースレターが見直されつつある現在、様々なスケールでニュースレターを提供する機会は増えていくことと思う。最終的にはお金とお金とお金で解決することにはなるだろうが、このTinyLetterのような最小限のリスクで小規模に始めることのできるサービスは貴重な選択肢で、大事に使ってやりたい。購読者のエクスポート(インポートも)にも対応しているので、MailChimpを始めとしたもっと高機能なサービスへの移行も難しくはないはずだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150422.html</link>
      <description>クッキーを売っている自動販売機があり、そこでクッキーを買ったら当たった。急いで食べてもう一回押すとまた当たった。急いで食べてまた当たるというのを20回くらい繰り返したら口の中がパサパサでズキズキしてきたところで目が覚めた。口内炎できてた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150422.html</guid>
      <pubDate>Sun, 26 Apr 2015 05:09:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>クッキーを売っている自動販売機があり、そこでクッキーを買ったら当たった。急いで食べてもう一回押すとまた当たった。急いで食べてまた当たるというのを20回くらい繰り返したら口の中がパサパサでズキズキしてきたところで目が覚めた。口内炎できてた。</p>

<p>そこそこ田舎なので、謎の自動販売機みたいなのがけっこうある。クッキーみたいなのはまだましで、なぜか釘を売ってる自動販売機とか。30年くらい中身の入れ替えが行われていなそう(1/2くらいで大吉で、その文言がいつも一緒)なおみくじの自動販売機とかもあったけど、ついになくなってしまった。</p>

<p>自動販売機、もうちょっと減らないかな。せめて挨拶とかしてきやがるやつは規制して欲しい。ふらふら歩いてる時にいきなり変なイントネーションで挨拶されるとビクッとなる。</p>]]></content:encoded>
    </item>
    <item>
      <title>チャンス</title>
      <link>http://hail2u.net/blog/webdesign/the-chance.html</link>
      <description>Being patient vs. being loudというAccessibility Winsの中の人の記事を読んだ。アクセシビリティーに欠けるウェブサイトにおいてその改善を求めるフィードバックが来ないのは、そういうウェブサイトは障害のある人にチャンスすら与えることが出来ないからであるからだろうと言う。そのため大前提としてアクセシビリティーに問題のないウェブサイトを作るべきだと読んだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/the-chance.html</guid>
      <pubDate>Sat, 25 Apr 2015 02:48:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://the-pastry-box-project.net/marcy-sutton/2015-april-20">Being patient vs. being loud</a>という<a href="http://a11ywins.tumblr.com/">Accessibility Wins</a>の中の人の記事を読んだ。アクセシビリティーに欠けるウェブサイトにおいてその改善を求めるフィードバックが来ないのは、そういうウェブサイトは障害のある人にチャンスすら与えることが出来ないからであるからだろうと言う。そのため大前提としてアクセシビリティーに問題のないウェブサイトを作るべきだと読んだ。</p>

<p>人が自分の世界が恵まれていることに気付くことはまずない。逆に自分の世界が何か間違っていたり何か足りないことに気付くこともまた難しい。インターネットの普及によりそういったことに気づき知ることが出来る機会が増えた現在でもあまり状況に変化はない。知識自体を得ることができただけでは不十分だということだ。人間の想像力には限界があることが本質的な問題だろう。</p>

<p>まずは機能や振る舞いではなく、チャンスを平等に与えられるような作りにすること。そうすることで自身の想像力などという怪しげな根拠に基づいた対応に終始することなく、どういうところがおかしいのかをフィードバックとして得ることが可能になる。ことウェブにおいては、HTML5において充実したマークアップのセマンティクスというものがその作りの実現へ大いに役に立つことだろう。</p>

<hr>

<p>アクセシビリティーについての仕様や記事がいま一つ注目されない理由は、それら記事の書かれ方の問題というよりも、読者が限界のある想像力で読んでしまうからなのかもしれない。自分の想像力がまったく及びもつかない世界があるということを強く意識した上で読むことが重要だ。</p>]]></content:encoded>
    </item>
    <item>
      <title>Mobile Safari 8におけるlang=jaとpre要素のフォント</title>
      <link>http://hail2u.net/blog/webdesign/lang-ja-pre-element-font-and-mobile-safari-8.html</link>
      <description>このウェブサイトではしばらく前にpreやcode要素のフォント・ファミリー指定を消した。あまり確認していなかったが、無指定なので良い感じになってくれるだろうと軽く考えていた。が、どうもMobile Safari 8で等幅フォントになっていなかったようだ。なかなかうまく再現できなかったが、どうやらlang属性で変わるようだ。また君か。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/lang-ja-pre-element-font-and-mobile-safari-8.html</guid>
      <pubDate>Fri, 24 Apr 2015 01:43:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>このウェブサイトでは<a href="https://github.com/hail2u/hail2u.net-styles/commit/c3d13567056c2de77ab7f8d5601decab51d543b6">しばらく前に</a><code>pre</code>や<code>code</code>要素のフォント・ファミリー指定を消した。あまり確認していなかったが、無指定なので良い感じになってくれるだろうと軽く考えていた。が、どうもMobile Safari 8で等幅フォントになっていなかったようだ。なかなかうまく再現できなかったが、どうやら<code>lang</code>属性で変わるようだ。また君か。</p>

<p>View Demo: <a href="/pub/test/623.html">pre font on Mobile Safari 8</a></p>

<p>デモのページをMobile Safari 8で見ると<code>lang</code>属性で<code>ja</code>を指定したセクションの<code>pre</code>要素が等幅フォントになっていないことがわかる。このページにはスタイルは当てておらず、まったく同じ中身を持つが<code>lang</code>属性のないセクションでは<code>pre</code>要素のフォントはちゃんと等幅フォントになっている。</p>

<p><a href="https://bugs.webkit.org/show_bug.cgi?id=96348">lang=zhで報告されているBug 96348</a>と同じで、内部のフォント設定によるフォールバックが<code>sans-serif</code>と同じになっていることによる現象のようだ。根本的な原因は今のOS XやiOSに明確な日本語の等幅フォントというものが存在しないことにあり、もしかしたらデスクトップのSafariやFirefox、Chromeでも同じ現象が起こるのかもしれない。</p>

<p>WONTFIXにはなっていないが、原因を考えると直りそうもないので、対処としては何らかのフォントを必ず指定してやるしかなさそう。このウェブサイトのように主にコードの表示に使っている場合はMenloなりの確実にインストール済みの欧文等幅フォントを指定するのが妥当だろう。汎用ファミリーの解釈において問題が出てくるため、Normalize.cssのような<code>monospace, monospace</code>では対処することはできない。</p>

<hr>

<p><a href="/blog/webdesign/font-preference-and-lang-attribute-on-chrome-42.html">Chrome 42の問題</a>とこれと立て続けに遭遇したので、<code>lang</code>属性は指定しない方が良いみたいな妄想が現実味を増してきたような気がして恐ろしい。</p>]]></content:encoded>
    </item>
    <item>
      <title>全部npmで</title>
      <link>http://hail2u.net/blog/software/use-npm-for-everything.html</link>
      <description>最近はnpmで全部ラップしてやるようにしていたりするのだけど、間違っているような気がしてきた。機能とかそういう面では十分で、運用においても癖はあるもののなんとかなりそうなため、そういう点でじゃなくて。利用時に混乱しやすいとかそういうところ。npmコマンドを汎用的に使うことになるので、ふと気づくとgit run buildとかnpm rebase -iとかやってしまう。一番ひどいなって思ったのはgit run rebase -iとやった時。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/use-npm-for-everything.html</guid>
      <pubDate>Thu, 23 Apr 2015 06:09:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>最近はnpmで全部ラップしてやるようにしていたりするのだけど、間違っているような気がしてきた。機能とかそういう面では十分で、運用においても癖はあるもののなんとかなりそうなため、そういう点でじゃなくて。利用時に混乱しやすいとかそういうところ。npmコマンドを汎用的に使うことになるので、ふと気づくと<code>git run build</code>とか<code>npm rebase -i</code>とかやってしまう。一番ひどいなって思ったのは<code>git run rebase -i</code>とやった時。</p>

<p>これはもう自分の脳の限界なのかとも少し思うけど、問題はそこじゃなくて、CLIアプリケーションのような対話的なアプリケーションを汎用的に使うと、コマンド名の意味が薄くなってしまうということなんじゃないかなと(自信ない)。ビルド・ツールのコマンド、バージョン・コントロールのコマンド、パッケージ・マネージャーのコマンド、それぞれがコマンド名という名前空間的に機能するもので切り分けられている状態の方が自然。だからそうなっていると今自分がやりたいこととコマンド名のマッピングが脳内でうまく行われる気がする。</p>

<p>全部npmでやると確かにすっきりするんだけれど、どちらかというと管理のしやすさとかそういう面ですっきりするだけで、ユーザー・インターフェイスという点ではすっきりしているように見えるだけっぽい。ちゃんとツールの使い分けを考えた方が良いような気がしないでもないけど、そうするとnpmの世界ではグローバルにCLIツールをインストールする必要がある感じになって、それは別の点(<code>npm install</code>で入ってくれるわけじゃないとか依存バージョンを束縛できないとか)でやはり厳しいよなというジレンマ。</p>

<p>エンドユーザーである自分における問題であるとも思うので、シェルのエイリアスやラッパー・コマンドで解決するというのも悪くはなさそう。だけどこういった混乱しやすい(と思われる)環境を撒き散らすようなことをしてもいいものだろうかというような点で悩ましい。</p>]]></content:encoded>
    </item>
    <item>
      <title>Vimで小数を四捨五入して置換</title>
      <link>http://hail2u.net/blog/software/vim-round-and-replace-decimal.html</link>
      <description>渡されたSVGファイルを見たらpath要素のアンカーポイントの数字が小数点以下6桁くらいから30桁まで混在していて、無駄な感じがあった。SVGOでできるのでそれでやっても良かったが、まずは単純に小数を指定桁(3–5桁)で四捨五入したいだけなので他に何かされてしまう可能性があるツールはちょっと避けたい。ということでVimの置換でどうにかした。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/vim-round-and-replace-decimal.html</guid>
      <pubDate>Wed, 22 Apr 2015 01:09:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>渡されたSVGファイルを見たら<code>path</code>要素のアンカーポイントの数字が小数点以下6桁くらいから30桁まで混在していて、無駄な感じがあった。<a href="https://github.com/svg/svgo/blob/master/plugins/cleanupNumericValues.js">SVGOでできる</a>のでそれでやっても良かったが、まずは単純に小数を指定桁(3–5桁)で四捨五入したいだけなので他に何かされてしまう可能性があるツールはちょっと避けたい。ということでVimの置換でどうにかした。</p>

<p>コマンドとしては長いがやっていることは普通なので、後述の説明が理解できればソラで打てるんじゃないかと思う。</p>

<pre><code>:%s@\d\+\.\d\+@\=round(str2float(submatch(0))*1000)/1000@g
</code></pre>

<p>例えば、</p>

<pre><code> 0.12345
12.34567
 0.99999
56.78999
</code></pre>

<p>は、</p>

<pre><code> 0.123
12.346
 1.0
56.79
</code></pre>

<p>と置換される。それぞれ切り捨て、切り上げ、切り上げて余分な0を削除、切り上げて余分な0を削除と置換されている。できれば<code>1.0</code>が<code>1</code>になって欲しいが、<code>round()</code>の仕様上少し面倒くさそう。</p>

<hr>

<p>使うのは</p>

<ul>
<li><a href="http://vim-jp.org/vimdoc-ja/change.html#%3Asubstitute">:substitute</a></li>
<li><a href="http://vim-jp.org/vimdoc-ja/change.html#sub-replace-special">sub-replace-special (:s\=)</a></li>
<li><a href="http://vim-jp.org/vimdoc-ja/eval.html#submatch()">submatch()</a></li>
<li><a href="http://vim-jp.org/vimdoc-ja/eval.html#str2float()">str2float()</a></li>
<li><a href="http://vim-jp.org/vimdoc-ja/eval.html#round()">round()</a></li>
</ul>

<p>になる。</p>

<h2>:substitute</h2>

<p>全置換なので<code>:s[ubstitute]</code>に<code>%</code>を付けて<code>g</code>フラグ付きで行う。通常は<code>/</code>で検索パターンと置換パターンを区切るが、置換側で<code>/</code>を使いたいので<code>@</code>を使って区切るとエスケープで頭が混乱することはない。</p>

<h2>sub-replace-special (:s\=)</h2>

<p>単純な置換ではなく、検索した文字列を加工したいので、置換パターンの方を<code>\=</code>で始めて、Vimの内蔵関数を使えるようにする。</p>

<h2>submatch()</h2>

<p>通常の置換では置換パターンで<code>\0</code>を使うことで、検索パターン全体のマッチ拾うことが出来る。しかし<code>\=</code>ではそれは使えない(と思う)ので、代わりに<code>submatch()</code>で直前の検索パターンの全体のマッチ(及びサブマッチ)を拾うことができるのでこれを使う。ここではマッチ全体を拾えば良いので<code>submatch(0)</code>で良い。</p>

<h2>str2float()</h2>

<p>検索文字列は<code>String</code>なので<code>Float</code>へキャストする必要がある。暗黙の型変換でもうまくいくような気がするが念のためキャストした方が良い。</p>

<h2>round()</h2>

<p>小数の丸めには3種類あるが、四捨五入したい場合は<code>round()</code>を使う。しかしこれは強制的に整数へ(<code>.0</code>付きで)丸められるため、事前に維持したい桁数だけ少数点をずらしておく必要がある。ここでは3桁維持するとして、まず1000を掛けておき、<code>round()</code>した後に1000で割って戻す。</p>

<hr>

<p>ちゃんと関数を書かないと面倒かと思ったが、それほどでもなかった。</p>]]></content:encoded>
    </item>
    <item>
      <title>Drawic v2.10.1</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.10.1.html</link>
      <description>SoundCloudのアイコンと、カメラ、通知、停止のアイコンを追加してDrawicのv2.10.1をリリースした。特に追加するネタがなく、SoundCloudのアイコンを追加してからかなり時間が経った。少し前にカメラとその無効のためのアイコンが必要になったので、無理やり通知のベルのアイコンを作って4つにし、リリースにこぎつけた。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.10.1.html</guid>
      <pubDate>Tue, 21 Apr 2015 00:02:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="http://hail2u.github.io/drawic/"><img alt="カメラ・通知・SoundCloud・停止" src="/images/blog/drawic-v2.10.1.png"></a>
</figure>

<p>SoundCloudのアイコンと、カメラ、通知、停止のアイコンを追加して<a href="http://hail2u.github.io/drawic/">Drawic</a>のv2.10.1をリリースした。特に追加するネタがなく、SoundCloudのアイコンを追加してからかなり時間が経った。少し前にカメラとその無効のためのアイコンが必要になったので、無理やり通知のベルのアイコンを作って4つにし、リリースにこぎつけた。</p>

<p>必要ドリブンで4つ溜まるまでリリースを待つと、リリースの間隔が開いてしまう。かといってこのように無理やりひねり出すのもなんだかという感じだ。それなりに通知のベルは使い出ありそうだけれども。記事を書くのは4つ溜まるまで待つことにして、それ以外は追加即リリースで良さそう。</p>]]></content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Thu, 30 Apr 2015 09:49:00 +0900</lastBuildDate>
  </channel>
</rss>
