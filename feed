<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <copyright>Copyright © 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>Hender Schemeの財布</title>
      <link>http://hail2u.net/blog/gadget/hender-scheme-wallet.html</link>
      <description>どんな財布を買おうか色々悩んだ結果、Hender Schemeのものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/hender-scheme-wallet.html</guid>
      <pubDate>Fri, 19 Dec 2014 12:04:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="袋状小銭いれ(ボタンなし)と同じく袋状のカード収納、札入れがコンパクトにまとまっているHender Schemeの財布" src="http://hail2u.net/images/blog/hender-scheme-wallet.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;どんな財布を買おうか色々悩んだ結果、&lt;a href="http://henderscheme.com/"&gt;Hender Scheme&lt;/a&gt;のものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。&lt;/p&gt;

&lt;p&gt;ようやく財布(とついでにスマホ)を鞄に入れるのに慣れてきた。まだポケットが空だと心もとないけれど、財布持ってたっけと鞄を確認することはほぼなくなった。でもポケットに入れないと財布の革がうまく馴染んでこないかもなーと思ってたりもする。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>失われたウェブ制作のベスト・プラクティス</title>
      <link>http://hail2u.net/blog/webdesign/lost-best-practices.html</link>
      <description>ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/lost-best-practices.html</guid>
      <pubDate>Thu, 18 Dec 2014 01:40:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。&lt;/p&gt;

&lt;p&gt;ウェブ制作においては、技術革新の多い世界であることと、他の世界の変革に対応しなければならないことから、よりいっそう変化が速いとも言えるだろう。だからといってベスト・プラクティスが意識するに留めておけば良いという程度のものというわけではない。例えば&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;について考えてみよう。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;これはHTML5が産声を上げた時期に先駆者である人々が編み出した魔法の言葉だ。これによりほとんどすべてのブラウザーでウェブ標準に準拠した形でHTMLが表示されることが保証される。つまり個々のブラウザーで大幅に違う挙動になることはなくなり、予期せぬ問題の発生を大幅に低下させることができる。と同時にそういったことの解決に割く時間を大幅に減らすことができるというわけだ。&lt;/p&gt;

&lt;p&gt;このようにベスト・プラクティスは効率化の手法ではあるが、それは&lt;em&gt;結果&lt;/em&gt;の効率化だけではなく、&lt;em&gt;過程&lt;/em&gt;の効率化にまつわるものでもある。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;HTML5黎明期にはもうひとつ魔法の言葉が生み出された。それは&lt;code&gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/code&gt;だ。この短いフォーマットのタグを書くことでウェブページの文字エンコーディングを指定することができる。あてにならないブラウザーの自動判別機能に依存しなくて済み、文字エンコーディングが正しく解釈されない問題を解決できるというわけだ。&lt;/p&gt;

&lt;p&gt;これの元となった&lt;code&gt;meta&lt;/code&gt;要素による文字エンコーディング指定そのものは古くからベスト・プラクティスとして存在するものだ。特に日本では3種(Shift_JISとEUC-JP、ISO-2022-JP)が使い分けられていた事情もあり、強く意識されまた使われてきた。しかしこの文字エンコーディング指定にはもうひとつ忘れてはならない書き方がある。それはなるべく先頭に書くこと、だ。&lt;/p&gt;

&lt;p&gt;なるべく先頭に書くことにより、英数記号&lt;em&gt;以外&lt;/em&gt;の文字がこの指定より先に来ることがなくなる。そういった文字列が文字エンコーディング指定より前に来ると、ブラウザーの自動判別機能がうまく動かなくなることがあるという事情から、そう書くこともベスト・プラクティスとなっていた。&lt;/p&gt;

&lt;p&gt;最近のブラウザーでこの魔法の言葉の位置により自動判別機能が狂うということは考えづらい。しかしあえて先頭に書かないという強い理由も見つからない。ページのメタデータではあるが、ページの振る舞いを決定するものとも言えるので、&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;と同じように先頭に書くのが安心だろう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;文字エンコーディングの指定そのものは失われてはいないが、先頭に書くというベスト・プラクティスは失われつつあるような印象だ。Facebookのいいね！ボタンで使われる&lt;a href="http://ogp.me/"&gt;OGP&lt;/a&gt;や&lt;a href="https://dev.twitter.com/cards/markup"&gt;Twitter Cardsで使われる謎のメタデータ記述法&lt;/a&gt;などにより&lt;code&gt;meta&lt;/code&gt;要素を利用する頻度が増えたため、それらと一緒にまとめて置かれることが増えた結果なのではないかと想像している。&lt;/p&gt;

&lt;p&gt;一方で&lt;code&gt;script&lt;/code&gt;要素の&lt;code&gt;type&lt;/code&gt;属性のようなほぼ疑いなく失われて良いものにも関わらず、まだよく使われているベスト・プラクティスもある。&lt;/p&gt;

&lt;p&gt;これら様々な昔からあるベスト・プラクティス達を体系立てて、失われて良いものかそうではないかを判別することは難しい。失われたことはすなわち必要なくなったわけではなく、失われていないことはつまりまだ必要なわけでもない。それぞれがどうしてそうなっているのか歴史を振り返りながら今に最適化する必要があるだろう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ピンク色のTKGを食べた</title>
      <link>http://hail2u.net/blog/misc/tkg-tarako-20141217.html</link>
      <description>ピンク色とは生のたらこ。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！TKG Advent Calendar 2014も17日目か。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/tkg-tarako-20141217.html</guid>
      <pubDate>Wed, 17 Dec 2014 09:50:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="ピンク色の卵をかけたご飯" src="http://hail2u.net/images/blog/tkg-tarako-20141217.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;ピンク色とは生の&lt;a href="http://ja.wikipedia.org/wiki/%E3%81%9F%E3%82%89%E3%81%93"&gt;たらこ&lt;/a&gt;。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！&lt;a href="http://www.adventar.org/calendars/342"&gt;TKG Advent Calendar 2014&lt;/a&gt;も17日目か。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ja.wikipedia.org/wiki/%E3%82%A4%E3%82%AF%E3%83%A9"&gt;赤&lt;/a&gt;と迷った結果、ピンクにした。&lt;a href="http://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%93%E3%82%A2"&gt;黒&lt;/a&gt;でやってみようかとも考えていたけど、ジョークでやるには高額の出費になるのでやめた。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>絵文字のショートカット・ファミリー</title>
      <link>http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</link>
      <description>Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</guid>
      <pubDate>Tue, 16 Dec 2014 10:31:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@font-face {
  font-family: &amp;#39;Emoji&amp;#39;;
  src: &lt;mark&gt;local(&amp;#39;Apple Color Emoji&amp;#39;)&lt;/mark&gt;,
    local(&amp;#39;Gecko Emoji&amp;#39;),
    local(&amp;#39;Noto Sans Emoji&amp;#39;),
    &lt;mark&gt;local(&amp;#39;Segoe UI Emoji&amp;#39;)&lt;/mark&gt;,
    &lt;mark&gt;local(&amp;#39;Segoe UI Symbol&amp;#39;)&lt;/mark&gt;,
    local(&amp;#39;Noto Sans Symbols&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上から順にOS X、Firefox OS (予)、Android (予)、Windows 8、Windows 7、Linux向けに絵文字を表示できるフォントをフォールバックさせている。通常はハイライトした3つだけで良い。こうして定義したショートカット・ファミリーは自由にCSSで利用できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body {
  font-family: Hoefler Text, Constantia, Emoji, serif;
}

h1 {
  font-family: Helvetica Neue, Calibri, Emoji, sans-serif;
}

pre {
  font-family: Menlo, Consolas, Emoji, monospace;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法そのものとしては&lt;code&gt;unicode-range&lt;/code&gt;プロパティーを使って絵文字を含めた形にフォント・ファミリーを再定義してやる方が真っ当で優れている。しかしFirefox 36以降に限定される問題があることと、OSネイティブの絵文字を表示する仕組みとバッティングしかねない。各ブラウザーで絵文字が自動的に表示されるようになるまでは、このようにショートカット・ファミリーを作ってやるのが良い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ロボ娘のアーキテクチャ</title>
      <link>http://hail2u.net/blog/media/roboko-no-architecture.html</link>
      <description>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。ロボ娘のアーキテクチャは真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/roboko-no-architecture.html</guid>
      <pubDate>Mon, 15 Dec 2014 08:29:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4812475295&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;&lt;img src="http://ecx.images-amazon.com/images/I/51VOJEjEU1L.jpg" alt="ロボ娘のアーキテクチャ 　① (バンブーコミックス)"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。&lt;a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4812475295&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;ロボ娘のアーキテクチャ&lt;/a&gt;は真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。&lt;/p&gt;

&lt;p&gt;眼帯が欲しい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;4コマは好きでよく読む。わりと何でも読む。けど二極化して長いので、山東ユカの書くやつみたいなのが増えて三極化して欲しい。いわゆる青年誌とかで連載されてる4コマやショートものみたいなのがこれにあたる。専門誌に連載されてるものと違う、絶妙な暗さみたいなのがあるやつ。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Gitで最新のタグをチェックアウト</title>
      <link>http://hail2u.net/blog/software/git-checkout-latest-tag.html</link>
      <description>最新のタグを知りたいことがたまにある。その時はgit describe --tagsで調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、describe --tagsがハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、--abbrev=0を加えると消えることがわかった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/git-checkout-latest-tag.html</guid>
      <pubDate>Sun, 14 Dec 2014 09:21:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;最新のタグを知りたいことがたまにある。その時は&lt;code&gt;git describe --tags&lt;/code&gt;で調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、&lt;code&gt;describe --tags&lt;/code&gt;がハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、&lt;code&gt;--abbrev=0&lt;/code&gt;を加えると消えることがわかった。&lt;/p&gt;

&lt;p&gt;具体的には以下のようなコマンドをターミナルで実行すれば良い。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;git checkout $(git describe --tags &lt;mark&gt;--abbrev=0&lt;/mark&gt;)&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;主に、何かしらをビルドする時のタスクで使っている。事前に最新のタグをチェックアウトさせることによって、常に安定版がデプロイされるように制御することができる。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>MinifyしてからConcat</title>
      <link>http://hail2u.net/blog/webdesign/minify-then-concat.html</link>
      <description>配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は壊れる可能性を否定できないことは意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫をソース・マップを維持することを前提にこのウェブサイトで実験し始めた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/minify-then-concat.html</guid>
      <pubDate>Sat, 13 Dec 2014 07:13:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は&lt;a href="https://github.com/gruntjs/grunt-contrib-copy"&gt;壊れる可能性を否定できないこと&lt;/a&gt;は意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫を&lt;em&gt;ソース・マップを維持すること&lt;/em&gt;を前提にこのウェブサイトで実験し始めた。&lt;/p&gt;

&lt;p&gt;JavaScriptファイルのビルドをGruntでやるとして、最小化についてはソース・マップのサポートは問題ないので、いつも通り&lt;a href="https://github.com/gruntjs/grunt-contrib-copy"&gt;grunt-contrib-copy&lt;/a&gt;と&lt;a href="https://github.com/gruntjs/grunt-contrib-uglify"&gt;grunt-contrib-uglify&lt;/a&gt;を使うことにする。最後に連結する時にソース・マップを維持できるのかというのが最大の問題だったが、7月にソース・マップのサポートが&lt;a href="https://github.com/gruntjs/grunt-contrib-concat"&gt;grunt-contrib-copy&lt;/a&gt;へ入っていたため、結果的にはこれを使うだけで良かった。&lt;/p&gt;

&lt;p&gt;タスクの手順的には以下のようになる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一時ディレクトリーを掃除&lt;/li&gt;
&lt;li&gt;一時ディレクトリーへソースとなるファイルのコピー&lt;ul&gt;
&lt;li&gt;非ライブラリーはそのファイルのみをコピー&lt;/li&gt;
&lt;li&gt;ライブラリーはソース・マップ・ファイルを含めてコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非ライブラリーのファイルのみをソース・マップ付きで最小化&lt;/li&gt;
&lt;li&gt;プロダクションのファイルを連結して作成&lt;/li&gt;
&lt;li&gt;公開ディレクトリーへソース・マップ・ファイルを含めてコピー&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これを踏まえて、Bowerでインストールした&lt;code&gt;lib-a.min.js&lt;/code&gt;と&lt;code&gt;lib-b.min.js&lt;/code&gt;、そして自分で書いた&lt;code&gt;foo.js&lt;/code&gt;と&lt;code&gt;bar.js&lt;/code&gt;を最小化してから連結し、最終的に&lt;code&gt;main.min.js&lt;/code&gt;を作るとする。タスクの設定は以下のようになることだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function (grunt) {
  grunt.initConfig({
    clean: {
      // `tmp/`ディレクトリーを掃除するタスク
      main: {
        src: ['tmp/**/*']
      }
    },

    concat: {
      // 最小化済みのファイルをソース・マップ付きで連結するタスク
      js: {
        options: {
          seperator: &amp;#39;;&amp;#39;,
          sourceMap: true,
          sourceMapStyle: &amp;#39;link&amp;#39;
        },

        files: {
          &amp;#39;tmp/main.min.js&amp;#39;: [
            &amp;#39;tmp/lib-a.min.js&amp;#39;,
            &amp;#39;tmp/lib-b.min.js&amp;#39;,
            &amp;#39;tmp/foo.min.js&amp;#39;,
            &amp;#39;tmp/bar.min.js&amp;#39;
          ]
        }
      }
    },

    copy: {
      // プロダクション向けに公開ディレクトリーへコピーするタスク
      js: {
        cwd: &amp;#39;tmp/&amp;#39;,
        dest: &amp;#39;build/js/&amp;#39;,
        expand: true,
        src: [
          &amp;#39;**/*.js&amp;#39;,
          &amp;#39;**/*.js.map&amp;#39;
        ]
      },

      // 一時ディレクトリーへ必要なファイルをコピーするタスク
      // 最小化済みのライブラリーは元ファイルとソース・マップ・ファイルも
      prejs: {
        files: {
          &amp;#39;tmp/bar.js&amp;#39;: &amp;#39;src/js/bar.js&amp;#39;,
          &amp;#39;tmp/foo.js&amp;#39;: &amp;#39;src/js/foo.js&amp;#39;,
          &amp;#39;tmp/lib-a.js&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-a.js&amp;#39;,
          &amp;#39;tmp/lib-a.min.js&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-a.min.js&amp;#39;,
          &amp;#39;tmp/lib-a.min.js.map&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-a.min.js.map&amp;#39;,
          &amp;#39;tmp/lib-b.js&amp;#39;: &amp;#39;bower_component/lib-a/dist/lib-b.js&amp;#39;,
          &amp;#39;tmp/lib-b.min.js&amp;#39;: &amp;#39;bower_component/lib-b/dist/lib-b.min.js&amp;#39;,
          &amp;#39;tmp/lib-b.min.js.map&amp;#39;: &amp;#39;bower_component/lib-b/dist/lib-b.min.js.map&amp;#39;
        }
      }
    },

    uglify: {
      options: {
        preserveComments: &amp;#39;some&amp;#39;,
        sourceMap: true
      },

      // まだ最小化されていないファイルをソース・マップ付きで最小化するタスク
      main: {
        cwd: &amp;#39;tmp/&amp;#39;,
        dest: &amp;#39;tmp/&amp;#39;,
        expand: true,
        ext: &amp;#39;.min.js&amp;#39;,
        src: [
          &amp;#39;**/*.js&amp;#39;,
          &amp;#39;!**/*.min.js&amp;#39;
        ]
      }
    }
  });

  grunt.loadNpmTasks(&amp;#39;grunt-contrib-clean&amp;#39;);
  grunt.loadNpmTasks(&amp;#39;grunt-contrib-copy&amp;#39;);
  grunt.loadNpmTasks(&amp;#39;grunt-contrib-concat&amp;#39;);
  grunt.loadNpmTasks(&amp;#39;grunt-contrib-uglify&amp;#39;);

  grunt.registerTask(&amp;#39;build:js&amp;#39;, [
    &amp;#39;clean&amp;#39;,
    &amp;#39;copy:prejs&amp;#39;,
    &amp;#39;uglify&amp;#39;,
    &amp;#39;concat:js&amp;#39;,
    &amp;#39;copy:js&amp;#39;
  ]);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;concat:js&lt;/code&gt;と&lt;code&gt;copy:prejs&lt;/code&gt;以外はほぼポータブルなタスク設定になっている。これで&lt;code&gt;grunt build:js&lt;/code&gt;と実行すると、最終的に&lt;code&gt;build/js/&lt;/code&gt;ディレクトリーへ以下のようにファイルが作成される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;bar.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;bar.min.js&lt;/li&gt;
&lt;li&gt;bar.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;foo.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;foo.min.js&lt;/li&gt;
&lt;li&gt;foo.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;lib-a.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;lib-a.min.js&lt;/li&gt;
&lt;li&gt;lib-a.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;lib-b.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;lib-b.min.js&lt;/li&gt;
&lt;li&gt;lib-b.min.js.map&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;main.min.js&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;main.min.js.map&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中間のソース・マップ・ファイルはちゃんとまとめられているので、実際にはマークされているファイルだけあれば良い。しかし設定が汎用性のない複雑なものになってしまうので、全部コピーしておく方が面倒がないだろう。そうでなければソース・マップ・ファイルへ&lt;code&gt;sourcesContent&lt;/code&gt;で元ソースを含めてしまうのが良い。この辺りはもうちょっと運用しないとどうするのが最良なのかは見えてこなさそうだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;欠点はあまりない。最小化後に連結するという観点の考察がウェブにはまだないので手探りでやることになるのが一番の壁だろう。取るに足りないとは思うが、最終ファイルが数バイトから数十バイト増えることは挙げておく。&lt;/p&gt;

&lt;p&gt;利点としては、ライブラリーのライセンスや著作権者情報など消すべきでないものが確実に残ることと、ライブラリーが動作が確認されている状態のままで連結されることが挙げられる。消すべきでないものが残るということは、つまりビルド・タスク側でいわゆるバナーなどと呼ばれている先頭のコメントのことを考えなくて良いということでもある。&lt;/p&gt;

&lt;p&gt;欠点と比較する限り、得られるものは大きいと言える。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>InkscapeのCLIを利用してSVGからPNGへ変換</title>
      <link>http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</link>
      <description>InkscapeにはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけどSVG Advent Calendar 2014の12日目の記事ということにしておこう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</guid>
      <pubDate>Fri, 12 Dec 2014 02:52:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt;にはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけど&lt;a href="http://www.adventar.org/calendars/366"&gt;SVG Advent Calendar 2014&lt;/a&gt;の12日目の記事ということにしておこう。&lt;/p&gt;

&lt;p&gt;例えば&lt;code&gt;in.svg&lt;/code&gt;を幅256ピクセルのPNGファイルとして&lt;code&gt;out.png&lt;/code&gt;に変換したいとする。Inkscapeの実行ファイルのディレクトリーへパスが通っているとすると、以下のようなオプションで実行すれば変換される。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;$ &lt;kbd&gt;inkscape --without-gui --export-width=256 --file=in.svg --export-png=out.png&lt;/kbd&gt;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--without-gui&lt;/code&gt;でGUIの起動を無効にし、&lt;code&gt;--export-width&lt;/code&gt;で幅を(高さはアスペクト比を維持してくれる)、&lt;code&gt;--file&lt;/code&gt;で変換元のSVGファイルを、そして&lt;code&gt;--export-png&lt;/code&gt;で変換先のPNGファイル名を指定する。複数ファイルの変換などについては無理なようだが、実用上はあまり問題ないようにも思える。Inkscape v0.91-pre.3できちんと変換できることを確認した。&lt;/p&gt;

&lt;p&gt;Windows版では&lt;code&gt;inkscape.exe&lt;/code&gt;にはCLIがないが、同じ場所にある&lt;code&gt;inkscape.com&lt;/code&gt;がコマンド・プロンプト用の実行ファイルになっているので、パスさえ通せばこのままでちゃんと使える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;自動化目的だったので&lt;a href="http://hail2u.net/pub/grunt-svg2png.js"&gt;svg2pngという名前のGruntタスク&lt;/a&gt;を書いてみたりもした(使い始めた)。もっと雑に一対多で変換できるような設定を書けると良さそう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>ららぽーと</title>
      <link>http://hail2u.net/blog/misc/lalaport.html</link>
      <description>来年10月くらいにオープンするらしいららぽーとは順調に工事が進んでいるらしく、ほぼ建物の外観は見えてきた。駅からは私鉄側からも屋根付きのペドウェイでまっすぐいけるようだ。これも半分くらいもうできてる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/lalaport.html</guid>
      <pubDate>Thu, 11 Dec 2014 07:33:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="巨大クレーン3台で建築が進むららぽーとの様子" src="http://hail2u.net/images/blog/lalaport.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;来年10月くらいにオープンするらしい&lt;a href="http://www.mitsuifudosan.co.jp/corporate/news/2014/0605_01/"&gt;ららぽーと&lt;/a&gt;は順調に工事が進んでいるらしく、ほぼ建物の外観は見えてきた。駅からは私鉄側からも屋根付きのペドウェイでまっすぐいけるようだ。これも半分くらいもうできてる。&lt;/p&gt;

&lt;p&gt;この大規模商業施設自体には思うところはあまりない(期待はしてる)のだけど、交通環境が激変しそうなことが不安だ。電車か、圏央道から246へ降り相模川を渡って……というメインのアクセスはともかく、問題は市内南部など246側でない方からのアクセスだ。実は駅周辺には車で線路(3つある)を渡る道路がない。東か西に大きく回りこまないと渡ることができない。&lt;/p&gt;

&lt;p&gt;そして、なかなか開発が進むことのなかった駅なので、周辺の道路はとても幅が狭い。それでも西側はそこそこ広いが、東側は4tトラックがすれ違えるか怪しいような道路ばかりだ。歩道もほとんどなく、もしここの交通量が増えたら恐ろしそうだと強く感じる。&lt;/p&gt;

&lt;p&gt;商業施設の周辺道路も整備されているが、どれもあまり広くなく、かといって歩道が広いとか自転車専用レーンがあるとかでもない。素人考えでは捌けなさそうな気がするがそうでもないのだろうか。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;市立図書館も一時閉館し、TSUTAYAプロデュースのスタバ付きへ退化する作業が始まった。これも来年オープンだそうだ。これら今開発されている地域は耕作放棄されたコスモス畑か田んぼしかなかったので、まったく思い入れはない。にも関わらず急激に変わり始めててちょっとついていけないなどと年寄り臭いことを思った。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>風呂の床</title>
      <link>http://hail2u.net/blog/misc/bathroom-floor.html</link>
      <description>タイルだった風呂の床が、分厚い断熱層にアクリル・コーティングされたFRPが重ねられた床に変わった。うちのは石目ホワイトグレー。暖かい……のは全体的に断熱する仕組みになった(+ 暖房が付いた)からではあるんだけど、やはりタイルは冷たかったと思う。みんなの床 Advent Calendarの10日目。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/bathroom-floor.html</guid>
      <pubDate>Wed, 10 Dec 2014 04:09:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;img alt="アクリル・コーティングされた断熱床材" src="http://hail2u.net/images/blog/bathroom-floor.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;タイルだった風呂の床が、&lt;a href="http://www.noritz.co.jp/product/bathroom/riz/color03.html"&gt;分厚い断熱層にアクリル・コーティングされたFRPが重ねられた床&lt;/a&gt;に変わった。うちのは石目ホワイトグレー。暖かい……のは全体的に断熱する仕組みになった(+ 暖房が付いた)からではあるんだけど、やはりタイルは冷たかったと思う。&lt;a href="http://www.adventar.org/calendars/539"&gt;みんなの床 Advent Calendar&lt;/a&gt;の10日目。&lt;/p&gt;

&lt;p&gt;老いさらばえかけたおっさんなのでタイルより滑りにくいのはすごい安心。表面に弾力はないけれど、断熱材の方が柔らかいので万一滑ってもある程度はショックを吸収してくれる模様。&lt;/p&gt;

&lt;p&gt;アクリルのコーティングは硬度8Hと謳われていて、余程のものを落とさない限りは傷つくことはまずないという。8Hとか言われると反射的にスマホの液晶フィルムを思い出してそこそこ割れそうな感じがしたけど、落とす方じゃないから大丈夫みたいだ。&lt;/p&gt;

&lt;p&gt;やはり傷がつかないというのは掃除の点で非常に魅力的。CMで浴室のカビをきれいにとか何十年にも渡って放映されていることからもわかるけど、風呂のカビと戦うのはなかなかの忍耐と根性が必要。そのあたりから解放されることに！石目で汚れが目立たたないところは良し悪し。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;こういう機能性の高いものはハイエンドが存在して一般に降りてくるものと思ってたんだけど、超高級マンションなどの広い風呂場用にはこういった床はおろか、壁もあまり存在しないらしい。そういうところではほぼタイル一択になり、掃除で死ぬという話。狭い風呂で良かった。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WEB+DB Press Vol.81にて「イマドキHTML/CSS開発」を執筆</title>
      <link>http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</link>
      <pubDate>Thu, 19 Jun 2014 15:31:33 +0900</pubDate>
      <guid isPermaLink="true">http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</guid>
      <description>&lt;p&gt;Web標準技術の進歩やデバイスの多様化といったWebをとりまく環境の急激な変化は、従来のWebサイト開発手法を時代遅れのものとしつつあります。設計から実装・検証、そしてデバイスへの最適化まで、ワークフロー全体の変革が求められているということです。本特集では、現在はもちろん、これからも増大し続ける多様性を見据えてどのような開発手法をとっていくべきかについて、実例を交じえながら詳しく解説していきます。6月24日発売、&lt;a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069"&gt;Amazonにて予約受付中&lt;/a&gt;です！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Tue, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Fri, 19 Dec 2014 12:04:00 +0900</lastBuildDate>
  </channel>
</rss>
