<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming &amp; their related technologies.</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dream-20150102.html</link>
      <description>去年割りと高い金払って買ったセーターの袖に毛玉が大量に出来ていた。ひとつひとつ取っていったら袖丈が半分くらいになった。しょうがないので長袖Tシャツの袖を切ってホッチキスで止めたところで、これじゃきちんと止まらないので洋裁屋でジッパーとか買ってこないと、とか考えたところで終わり。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dream-20150102.html</guid>
      <pubDate>Fri, 02 Jan 2015 04:40:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;去年割りと高い金払って買ったセーターの袖に毛玉が大量に出来ていた。ひとつひとつ取っていったら袖丈が半分くらいになった。しょうがないので長袖Tシャツの袖を切ってホッチキスで止めたところで、これじゃきちんと止まらないので洋裁屋でジッパーとか買ってこないと、とか考えたところで終わり。&lt;/p&gt;

&lt;p&gt;買って気に入ったものがめちゃくちゃになる夢をよく見るようになった気がする。気がするというのはちゃんと覚えてないから。ブーツを買った後にもものすごい悪天候かなんかでブーツが濡れて溶けてなくなるみたいなのを見た気がする。夢の中でも大事にしたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>GitHub互換の見出しID</title>
      <link>http://hail2u.net/blog/coding/github-compatible-header-id.html</link>
      <description>gfmtoc (mdtocから名前を変えた)を作っている時にGitHub flavored Markdown (本当はHTML Pipeline)互換の見出しIDをNode.jsで生成する方法を考えていた。GitHubではRubyでサポートされているPOSIX文字クラスをユニコードへ対応させた\p{Word}を使っているので、それを作ればあとは簡単なようだ。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/github-compatible-header-id.html</guid>
      <pubDate>Thu, 01 Jan 2015 06:07:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;a href="https://github.com/hail2u/node-gfmtoc"&gt;gfmtoc (mdtocから名前を変えた)&lt;/a&gt;を作っている時にGitHub flavored Markdown (本当は&lt;a href="https://github.com/jch/html-pipeline/"&gt;HTML Pipeline&lt;/a&gt;)互換の見出しIDをNode.jsで生成する方法を考えていた。GitHubではRubyでサポートされているPOSIX文字クラスをユニコードへ対応させた&lt;code&gt;\p{Word}&lt;/code&gt;を使っているので、それを作ればあとは簡単なようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=https://github.com/ruby/ruby/blob/1026907467ea3d5441e1bfa95f5f37b431a684f3/doc/regexp.rdoc#character-properties"&gt;Rubyのソースコードにある正規表現のドキュメント&lt;/a&gt;によると、以下のユニコード文字プロパティーのカテゴリーを組み合わせたものが&lt;code&gt;\p{Word}&lt;/code&gt;ということのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\p{L}&lt;/code&gt;: Letter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{M}&lt;/code&gt;: Mark&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{N}&lt;/code&gt;: Number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{Pc}&lt;/code&gt;: Connector_Punctuation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまりこれらを連結した正規表現パターンを作れば良い。まともにやったら日が暮れるので、Node.jsでは&lt;a href="https://www.npmjs.com/package/unicode-7.0.0"&gt;unicode-7.0.0&lt;/a&gt;と&lt;a href="https://www.npmjs.com/package/regenerate"&gt;regenerate&lt;/a&gt;の両パッケージを使って生成してやる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var regenerate = require(&amp;#39;regenerate&amp;#39;);

var word = regenerate().add(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;properties/Any&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/L&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/M&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/N&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  require(&amp;#39;unicode-7.0.0/&lt;mark&gt;categories/Pc&lt;/mark&gt;/code-points&amp;#39;)
).remove(
  &amp;#39;-&amp;#39;,
  &amp;#39; &amp;#39;
);

console.log(word.toString());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは否定形が欲しいので、Anyプロパティーを&lt;code&gt;add()&lt;/code&gt;してから上記カテゴリーを&lt;code&gt;remove()&lt;/code&gt;していく。最終的には特別視される&lt;code&gt;-&lt;/code&gt;と&lt;code&gt; &lt;/code&gt;もここでついでに削除しておく。gfmtocでは&lt;a href="https://github.com/hail2u/node-gfmtoc/blob/master/lib/regexp-word.js"&gt;生成結果をファイルに保存したもの&lt;/a&gt;をライブラリとして使っている。普通はそのまま書けば良い(毎回動的に生成させるととても遅いことには注意が必要)。あとはHTML Pipelineがやっていることをなぞるのみだ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;小文字に変換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\p{Word}&lt;/code&gt;と&lt;code&gt;-&lt;/code&gt;、&lt;code&gt; &lt;/code&gt; (半角空白)以外を削除&lt;/li&gt;
&lt;li&gt;半角空白を&lt;code&gt;-&lt;/code&gt;に置換&lt;/li&gt;
&lt;li&gt;IDが被らないように数字を追加&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;HTML Pipelineではこのような&lt;a href="https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb"&gt;生成手順&lt;/a&gt;になっているようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var h = {};

function genID(s, h) {
  var u = &amp;#39;&amp;#39;;
  var word = /.../g;
  s = s.toLowerCase();
  s = s.replace(word, &amp;#39;&amp;#39;);
  s = s.replace(/ /g, &amp;#39;-&amp;#39;);

  if (h[s] &amp;gt; 0) {
    u = &amp;#39;-&amp;#39; + h[s];
  }

  if (!h[s]) {
    h[s] = 0;
  }

  h[s] += 1;

  return s + u;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認した限りではうまくいっているようだ。&lt;code&gt;id&lt;/code&gt;属性の値として使う場合はこのままで問題ないが、&lt;code&gt;href&lt;/code&gt;属性の値として使う場合は&lt;code&gt;encodeURIComponent()&lt;/code&gt;でURLエンコードしてやることを忘れない方が良い……ような気がするけど、最近のブラウザーはカシコイのでどっちでも良さそう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>はんぺんだて巻き</title>
      <link>http://hail2u.net/blog/misc/hanpen-datemaki.html</link>
      <description>だて巻き苦手とか言うと大人っぽいけど、そんなことは特になくおせちの中で好きなもののひとつ。だけどペッタペタに甘いのもさすがに辛くなってきたので、今年は作ってみるかと調べたり聞いたりしたところ、はんぺんで作ると楽でおいしいという話だった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/hanpen-datemaki.html</guid>
      <pubDate>Wed, 31 Dec 2014 04:53:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;だて巻き苦手とか言うと大人っぽいけど、そんなことは特になくおせちの中で好きなもののひとつ。だけどペッタペタに甘いのもさすがに辛くなってきたので、今年は作ってみるかと調べたり聞いたりしたところ、はんぺんで作ると楽でおいしいという話だった。&lt;/p&gt;

&lt;p&gt;試しに&lt;a href="http://www.kyounoryouri.jp/recipe/3275_%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%A0%E3%81%A6%E5%B7%BB%E3%81%8D.html"&gt;きょうの料理のスピードだて巻き&lt;/a&gt;をそのままで作ったら5mmくらいのペラッペラのしか焼けなかったので、本番では倍の量にしてやったらうまく3cm近くまでなった。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;材料&lt;/th&gt;
&lt;th style="text-align:right"&gt;分量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;はんぺん&lt;/td&gt;
&lt;td style="text-align:right"&gt;110g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td style="text-align:right"&gt;4個&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;砂糖&lt;/td&gt;
&lt;td style="text-align:right"&gt;大さじ2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;みりん&lt;/td&gt;
&lt;td style="text-align:right"&gt;大さじ1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;はんぺんは紀文の大判のものが一枚。これが塩分が多いような感じだったので塩は入れなかった。みりんも試しに作った時にきつかったような気がしたので、半分に。あとはひたすら&lt;a href="http://www.amazon.co.jp/gp/product/B00ITGDH16/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00ITGDH16&amp;amp;linkCode=as2&amp;amp;tag=hail2unet-22"&gt;混ぜて&lt;/a&gt;、型に入れ、180度に予熱したオーブンの下段で15分焼くだけ。焼き色がうまくつかなかったので、上段で仕上げれば良かったのかもしれない。&lt;/p&gt;

&lt;p&gt;所要時間15分(+焼くのに15分)とは思えない手軽さとおいしさ。恵方巻きみたいに一本食いできそう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>HTML5における空の値の属性</title>
      <link>http://hail2u.net/blog/webdesign/html5-empty-value-attribute.html</link>
      <description>属性に空の値を指定する時は、例えばalt=""などと書く。実は仕様のHTML文法にはもうひとつ書き方が用意されており、それはaltとのみ書くという形のものだ。確かにこう書けるし、真偽値を取る属性で属性のみ書く方法もこの文法規定がベースになっている。少し前に読んだalt属性の書き方ガイドといったような記事ではそのように触れられている。しかし僕は属性のみを書くのは真偽値を取る属性のみに限定した方が良いように考えている。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/html5-empty-value-attribute.html</guid>
      <pubDate>Tue, 30 Dec 2014 03:42:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;属性に空の値を指定する時は、例えば&lt;code&gt;alt=&amp;quot;&amp;quot;&lt;/code&gt;などと書く。実は&lt;a href="http://www.w3.org/TR/html5/syntax.html#attributes-0"&gt;仕様のHTML文法&lt;/a&gt;にはもうひとつ書き方が用意されており、それは&lt;code&gt;alt&lt;/code&gt;とのみ書くという形のものだ。確かにこう書けるし、&lt;a href="http://www.w3.org/TR/html5/infrastructure.html#boolean-attributes"&gt;真偽値を取る属性&lt;/a&gt;で属性のみ書く方法もこの文法規定がベースになっている。少し前に読んだ&lt;a href="http://demosthenes.info/blog/969/The-Art-of-alt-Writing-Great-Descriptive-Text-For-Images"&gt;&lt;code&gt;alt&lt;/code&gt;属性の書き方ガイドといったような記事&lt;/a&gt;ではそのように触れられている。しかし僕は属性のみを書くのは真偽値を取る属性のみに限定した方が良いように考えている。&lt;/p&gt;

&lt;p&gt;なぜなら空の値を指定する時に属性のみ書けば良いという文法を知る人が多分ほとんどいないだろうからだ。裏を返すと&lt;code&gt;checked=&amp;quot;checked&amp;quot;&lt;/code&gt;を&lt;code&gt;checked&lt;/code&gt;と略せるという誤解した知識で憶えた人が多いということで、実際僕もそうだった。確かに誤解なのだけど、もう広まりきってしまった誤解なので、それはそういうものとして触れない方が良いんじゃないかと思う。&lt;/p&gt;

&lt;p&gt;そうでないと&lt;code&gt;alt&lt;/code&gt;とのみ書けば良いという半端な知識から、まさかの&lt;code&gt;alt=&amp;quot;alt&amp;quot;&lt;/code&gt;といった間違いに着地したりしてしまいそうだ。属性値のみを書くパターンは真偽値を取る属性のみに限り、それ以外では明示的に&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;を指定してやるのがわかりやすい。仕様の誤解が修正されないという難点はあるけれども。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Drawic v2.8.0</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.8.0.html</link>
      <description>DrawicにFlickrやGoogle+、YouTube、PayPalのアイコンを追加してv2.8.0をリリースした。必要だったのはFlickrとGoogle+でそれ以外は数合わせ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.8.0.html</guid>
      <pubDate>Mon, 29 Dec 2014 05:55:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="http://hail2u.github.io/drawic/"&gt;&lt;img alt="Flickr Google+ PayPal YouTube" src="http://hail2u.net/images/blog/drawic-v2.8.0.png"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://hail2u.github.io/drawic/"&gt;Drawic&lt;/a&gt;にFlickrやGoogle+、YouTube、PayPalのアイコンを追加してv2.8.0をリリースした。必要だったのはFlickrとGoogle+でそれ以外は数合わせ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;iPhoneで雑に撮った写真をDropboxに保存してたけれど、別に同期しなくてもいいようなものだなと思ったので、Instagramにでもしようかなと思ってた。でもInstagramでユーザー名が取れなかったので、Flickrを引っ張りだすことにした。Flickrアプリはインストールするためにストア切り替えたりとかするのが面倒だったけど、その後は快適に使えそうな感じがする。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>“マークアップ”</title>
      <link>http://hail2u.net/blog/webdesign/mark-things-up.html</link>
      <description>クリスマスにTwitterで@glatyouと少しマークアップについてやりとりをした。そこではTwitterなのでだいぶ端折ったものの、だいたい伝わったとは思う。あわせて今年はHTML5勧告のタイミングだ。このようなマークアップについての考え方を述べるにはもってこいだろう。そこで僕の考えを文書としてまとめ、“マークアップ”するということ ～ HTML5勧告に寄せて ～というタイトルで公開した。この文書を持って今年のまとめとしたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/mark-things-up.html</guid>
      <pubDate>Sun, 28 Dec 2014 04:57:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;クリスマスにTwitterで&lt;a href="https://twitter.com/glatyou"&gt;@glatyou&lt;/a&gt;と少しマークアップについてやりとりをした。そこではTwitterなのでだいぶ端折ったものの、だいたい伝わったとは思う。あわせて今年はHTML5勧告のタイミングだ。このようなマークアップについての考え方を述べるにはもってこいだろう。そこで僕の考えを文書としてまとめ、&lt;a href="http://hail2u.net/documents/markup.html"&gt;“マークアップ”するということ ～ HTML5勧告に寄せて ～&lt;/a&gt;というタイトルで公開した。この文書を持って今年のまとめとしたい。&lt;/p&gt;

&lt;p&gt;当該文書では、著作権表示という日本ではおよそ実践的でないものを例としたので、多少哲学的な側面が強い。他に良い例がうまく思いつかなかったのもあるし、元々のTwitterでのやりとりがそれだったのもある。他に例を考えるとするとトップニモドルのマークアップでも良かったかもしれない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;footer&amp;gt;
  &amp;lt;nav&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#logo&amp;quot;&amp;gt;Back to Top&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このような間違いと冗長さが多分に含まれるが、ちょくちょく見かけるようなコードを起点にできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&amp;lt;a href=&amp;quot;#top&amp;quot;&amp;gt;Back to Top&amp;lt;/a&amp;gt;&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてこう磨き上げるまでを書くのも悪くなかったかもしれない。思考の過程としてはほとんど同じなので、どうしてこうなるのかを考えてみるのも良いだろう。&lt;/p&gt;

&lt;p&gt;本当は最後の項でテキトーに書かれたHTML文書が失ったものについてじっくりと書ければもっと完成度の高い文書になったことと思う。しかしそこまで書くとトピックが二分してしまいそうなことと、またその話かで終わってしまいそうな気がしたので、直接的な言葉すらも避けてぼかしておいた。アとかユとかUとかで始まる単語を想像してくれれば遠くないだろう。&lt;/p&gt;

&lt;p&gt;このようなマークアップするための思考の元、&lt;a href="https://github.com/hail2u/html-best-practices"&gt;HTML Best Practices&lt;/a&gt;も参照するとわかりやすいはずだ。出す順が逆だともっと良かったような気がする。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ここで予防線をいっぱい張っておきたいところだけれども、それはやめておく。もちろん僕は仕様側の人間ではないので、とか、あくまでも、とか、一般的には、とかいっぱい書きたい。&lt;/p&gt;

&lt;p&gt;あ、&lt;a href="http://www.w3.org/2014/10/html5-rec.html.ja"&gt;HTML5勧告&lt;/a&gt;おめでとうございます。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description>&lt;p&gt;HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ブラウザー・キャッシュの今</title>
      <link>http://hail2u.net/blog/webdesign/the-browser-cache-today.html</link>
      <description>元々「静的なファイルは限界までキャッシュしろ！」というような金言はそれほど重要視していなかった。The changing role of the browser cacheという記事では、開きっぱなしにされるタブと継続的デプロイをキーワードに、ブラウザー・キャッシュの役割が変化していることを解説している。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/the-browser-cache-today.html</guid>
      <pubDate>Sat, 27 Dec 2014 00:47:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;元々「静的なファイルは限界までキャッシュしろ！」というような金言はそれほど重要視していなかった。&lt;a href="http://calendar.perfplanet.com/2014/the-changing-role-of-the-browser-cache/"&gt;The changing role of the browser cache&lt;/a&gt;という記事では、開きっぱなしにされるタブと継続的デプロイをキーワードに、ブラウザー・キャッシュの役割が変化していることを解説している。&lt;/p&gt;

&lt;p&gt;ブラウザー・キャッシュが再訪問に対して威力を発揮するのに対し、開きっぱなしにされるタブでは再訪問されることはなく、継続的デプロイされるアプリケーションではその効果は限定的なものにしかなりえない、という意見だ。納得の出来る意見ではある。&lt;/p&gt;

&lt;p&gt;僕が元々こういった長期間のキャッシュに疑問を持っていたのも少し似ている。特に継続的デプロイの元では限定的な効果になることは自明だと考えていた。またいわゆる普通のウェブページにおいては再訪問という行為そのものが随分前から死滅したとも考えている。具体的にはソーシャル・ブックマークの普及後、一時的な消費に偏るようになってからそうなったと思っている。&lt;/p&gt;

&lt;p&gt;一方で長期化のデメリットは迅速にキャッシュの更新が行き渡らないという点で明白だ。もちろんキャッシュをリフレッシュする、というか別に配信するテクニックがあり、それを採用するわけだけど、なんというか美しくない。デプロイされる間隔に対して適切なキャッシュ期限を試行錯誤する方が真っ当なんじゃないかという思いが強い。&lt;/p&gt;

&lt;p&gt;ウェブのコンポーネント化が進むであろう今後は更に迅速なキャッシュの更新が求められるわけで、ブラウザー・キャッシュの長期化は忌避されていくようになるのかもしれない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;今年から読み始めた&lt;a href="http://calendar.perfplanet.com/"&gt;Performance Calendar&lt;/a&gt;は過去ログもそれなりに面白そうなので、年末年始に読んでみようと思う。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>スクロールバーの幅</title>
      <link>http://hail2u.net/blog/webdesign/scrollbar-width.html</link>
      <description>スクロールバーの幅を知りたいことはままある。CSSで拾えれば最高なのだけど……というところで、calc(100vw - 100%)で拾えることがわかった。ただこれで拾えるかどうかはその要素の親に依存するので、いつでもどこでも使えるわけではない。せめてJavaScriptでは扱えるようにしてみたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/scrollbar-width.html</guid>
      <pubDate>Fri, 26 Dec 2014 04:24:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;スクロールバーの幅を知りたいことはままある。CSSで拾えれば最高なのだけど……というところで、&lt;code&gt;calc(100vw - 100%)&lt;/code&gt;で拾えることがわかった。ただこれで拾えるかどうかはその要素の親に依存するので、いつでもどこでも使えるわけではない。せめてJavaScriptでは扱えるようにしてみたい。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href="http://hail2u.net/pub/test/604.html"&gt;Get Scrollbar Width with JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ボタンをクリックするとスクロールバーの幅がダイアログで表示される。オーバーレイのスクロールバーの場合は&lt;code&gt;0px&lt;/code&gt;になり、そうでない場合はスクロールバーの幅が返る。&lt;code&gt;body&lt;/code&gt;要素の幅が&lt;code&gt;100%&lt;/code&gt;であることが条件になるが、まず大丈夫だろう。&lt;/p&gt;

&lt;p&gt;仕組みは単純なもので&lt;code&gt;width&lt;/code&gt;プロパティーを&lt;code&gt;calc(100vw - 100%)&lt;/code&gt;にした要素を&lt;code&gt;body&lt;/code&gt;要素の子に突っ込んで、計算済みスタイルを拾うというだけだ。&lt;code&gt;overflow&lt;/code&gt;プロパティーを切り替え要素の幅を比べる古くからあるものと比べるとコードはわかりやすく短い。その半面、&lt;code&gt;vw&lt;/code&gt;単位と&lt;code&gt;calc()&lt;/code&gt;関数への対応が必要と敷居は少し高い。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;そのうち全てオーバーレイ・スクロールバーになりそうではあるので、その暁には無駄な知識になる。是非なってほしい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>kyonagashima.com</title>
      <link>http://hail2u.net/blog/internet/kyonagashima-com.html</link>
      <description>Brad Frostが自分の名前のドメインを確保するのにぼったくられたという記事を読んで、良い機会なのでkyonagashima.comを確保した。面倒だったので735円だしといつも通りValue Domainで取得した。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/kyonagashima-com.html</guid>
      <pubDate>Thu, 25 Dec 2014 03:32:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href="https://kyonagashima.com/"&gt;&lt;img alt="Kyo Nagashima" src="http://hail2u.net/images/blog/kyonagashima-com.gif"&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://bradfrost.com/blog/post/bradfrost-dot-com/"&gt;Brad Frostが自分の名前のドメインを確保するのにぼったくられたという記事&lt;/a&gt;を読んで、良い機会なので&lt;a href="https://kyonagashima.com/"&gt;kyonagashima.com&lt;/a&gt;を確保した。面倒だったので735円だしといつも通り&lt;a href="https://www.value-domain.com/"&gt;Value Domain&lt;/a&gt;で取得した。&lt;/p&gt;

&lt;p&gt;世間のドメイン取得代行業者への評価は地に落ちているような印象だが、僕は実際に辛いトラブルにあったことがなく、大体は根気強いメールのやりとりのみで解決できてきたので、あまり悪く評価してはいない。でも検索クエリーを横取りして先に奪ってしまうといったことはやってそうだなという程度には信用していない。&lt;/p&gt;

&lt;p&gt;実際にそういった状況に遭遇したとしたら、金の問題よりもイライラで沸騰しそうだ。買って後悔することはまずないので、買っておくかという程度の気持ちで確保した。そのはずなのに既に後悔していたりもし、ままならない。とりあえずのところは不要であるのに、ネガティブな理由で動いてしまったからだと思う。&lt;/p&gt;

&lt;p&gt;とにかくそういうイライラが待つ未来からとりあえずは解放された。失効させると輪をかけて辛い未来が待っているわけでもあるけれども。あとはむしゃくしゃして消さないようにも気をつけよう。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ウェブページは&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; + &lt;a href="https://www.cloudflare.com/"&gt;CloudFlare&lt;/a&gt;を利用したサブドメインなしのhttpsでの提供にした。httpsの強制(httpへのアクセスをhttpsへリダイレクトさせる)もCloudFlareのPage Ruleを使うと簡単に実現できる。&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt="Page Ruleのダッシュボードで、ワイルドカードを使ってURLパターンを指定し、Always use httpsを有効にしたPage Ruleのパターンを追加しようとしているところ" src="http://hail2u.net/images/blog/cloudflare-forcing-https-page-rule.png"&gt;

  &lt;figcaption&gt;CloudFlare Page Rule Dashboard&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;内容としてはペライチでソーシャル・ネットワークのプロフィールへのリンク以外には特に何もなく、他に何か使う予定は少ししかない。書き物は今まで通りここに書く。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>URLUtils.hash (location.hash)とその返す値</title>
      <link>http://hail2u.net/blog/webdesign/urlutils-hash-and-its-returning-value.html</link>
      <description>URLUtilsインターフェイスのブラウザーにおける実装であるLocationオブジェクトのhashプロパティーによりURLのフラグメント識別子(と#)を取得・代入できる。最近のブラウザーは非ASCII文字列もURLエンコードせずに扱えるようになっているが、この辺りの挙動がFirefoxだけ少し違うようだ。それはhashプロパティーの返す値で、常にデコードされた形で返ってくるようになっている。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/urlutils-hash-and-its-returning-value.html</guid>
      <pubDate>Wed, 24 Dec 2014 01:05:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;&lt;code&gt;URLUtils&lt;/code&gt;インターフェイスのブラウザーにおける実装である&lt;code&gt;Location&lt;/code&gt;オブジェクトの&lt;code&gt;hash&lt;/code&gt;プロパティーによりURLのフラグメント識別子(と&lt;code&gt;#&lt;/code&gt;)を取得・代入できる。最近のブラウザーは非ASCII文字列もURLエンコードせずに扱えるようになっているが、この辺りの挙動がFirefoxだけ少し違うようだ。それは&lt;code&gt;hash&lt;/code&gt;プロパティーの返す値で、常にデコードされた形で返ってくるようになっている。&lt;/p&gt;

&lt;p&gt;例えば適当なウェブページで開発者ツール(的なもの)を開き、コンソール(などと呼ばれてるもの)で以下を実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;&amp;gt; &lt;kbd&gt;location.hash = &amp;#39;#&amp;#39; + &amp;#39;あいうえお&amp;#39;&lt;/kbd&gt;
&amp;lt; &amp;quot;#あいうえお&amp;quot;
&amp;gt; &lt;kbd&gt;location.hash&lt;/kbd&gt;
&amp;lt; &amp;quot;#あいうえお&amp;quot;
&amp;gt; &lt;kbd&gt;location.hash = &amp;#39;#&amp;#39; + encodeURIComponent(&amp;#39;あいうえお&amp;#39;)&lt;/kbd&gt;
&amp;lt; &amp;quot;#%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A&amp;quot;
&amp;gt; &lt;kbd&gt;location.hash&lt;/kbd&gt;
&amp;lt; &amp;quot;#%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A&amp;quot;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;Chrome 39やInternet Explorer 11ではこのようになる。&lt;code&gt;location.hash&lt;/code&gt;に代入した文字列はそのまま返ってくるだけだ。対してFirefox 34ではURLエンコードした文字列を代入した場合、デコードされて返ってくる。&lt;/p&gt;

&lt;pre&gt;&lt;samp&gt;&amp;gt; &lt;kbd&gt;location.hash = &amp;#39;#&amp;#39; + &amp;#39;あいうえお&amp;#39;&lt;/kbd&gt;
&amp;lt; &amp;quot;#あいうえお&amp;quot;
&amp;gt; &lt;kbd&gt;location.hash&lt;/kbd&gt;
&amp;lt; &amp;quot;#あいうえお&amp;quot;
&amp;gt; &lt;kbd&gt;location.hash = &amp;#39;#&amp;#39; + encodeURIComponent(&amp;#39;あいうえお&amp;#39;)&lt;/kbd&gt;
&amp;lt; &amp;quot;#%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A&amp;quot;
&amp;gt; &lt;kbd&gt;location.hash&lt;/kbd&gt;
&amp;lt; &amp;quot;#あいうえお&amp;quot;
&lt;/samp&gt;&lt;/pre&gt;

&lt;p&gt;もちろん開発者ツール上だけでなく通常のスクリプト上でも同じなので、この辺りを扱う場合はそれなりの注意が必要になる。常にURLエンコードされているのかどうかを意識するべきということだ。&lt;/p&gt;

&lt;p&gt;例えば今のGitHubではこの辺りを使って&lt;code&gt;id&lt;/code&gt;属性の重複避けと&lt;code&gt;hashchange&lt;/code&gt;イベントの監視によるページ内ジャンプを実装している。しかし、URLエンコード済み(&lt;code&gt;href&lt;/code&gt;属性の値)とそうでないもの(&lt;code&gt;id&lt;/code&gt;属性の値)が混ざっているため、日本語の見出しではChrome 39やInternet Explorer 11だと比較に失敗してページ内ジャンプがうまく動かない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;どちらかというとFirefoxの挙動の方が開発者に優しいとは言えるかもしれない。常にデコードされていると想定できるので、二重にエンコードしてしまうことやデコードし忘れということがない。しかしその一方でURLエンコードされた文字列とそうでない文字列が含まれたフラグメント識別子を元に戻すことができないという欠陥もある。&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=483304"&gt;Bug 483304&lt;/a&gt;でかなり昔から議論されているようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://url.spec.whatwg.org/"&gt;URL仕様&lt;/a&gt;では、とにかくフラグメント識別子は&lt;a href="https://url.spec.whatwg.org/#fragment-state"&gt;必要ならURLエンコードされているべき&lt;/a&gt;となっている。そして&lt;a href="https://url.spec.whatwg.org/#dom-urlutils-hash"&gt;&lt;code&gt;URLUtils&lt;/code&gt;インターフェイスの&lt;code&gt;hash&lt;/code&gt;プロパティー&lt;/a&gt;でもゲッターは&lt;code&gt;#&lt;/code&gt;と連結して返せというだけになっているので、勝手にデコードして返すのはバグと言って良さそう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description>&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/"&gt;Smashing Magazineによるウェブサイトのタイポグラフィーについての調査&lt;/a&gt;をわかりやすくまとめた&lt;a href="http://bootstrapbay.com/blog/web-typography-best-practices/"&gt;The All-Inclusive Guide to Web Typography Best Practices&lt;/a&gt;の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/"&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに&lt;a href="http://sass-lang.com/guide"&gt;Sass Basics&lt;/a&gt;になりました。内容的にはあまり変わらないか多少薄くなっていますが、&lt;code&gt;@extend&lt;/code&gt;への言及も追加されたので、日本語訳を作成しました。&lt;/p&gt;</description>
    </item>
    <lastBuildDate>Fri, 02 Jan 2015 04:40:00 +0900</lastBuildDate>
  </channel>
</rss>
