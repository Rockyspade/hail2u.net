<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>disabledなファビコン</title>
      <link>http://hail2u.net/blog/webdesign/disabled-favicon.html</link>
      <description>ファビコンを状態によって変更する必要があったが、固定の2種類の切り替えに過ぎなかったのでJavaScriptでファビコンを参照しているlink要素のhref属性を書きかえるのは少し面倒くさいかなと思った。そこでdisabled属性を付けることでファビコンの参照が切れれば、操作しやすそうかなと試してみた。しかし現行のブラウザーではdisabled属性を付けても普通にファビコンへの参照と解釈するようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/disabled-favicon.html</guid>
      <pubDate>Sun, 29 Mar 2015 16:46:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ファビコンを状態によって変更する必要があったが、固定の2種類の切り替えに過ぎなかったのでJavaScriptでファビコンを参照している<code>link</code>要素の<code>href</code>属性を書きかえるのは少し面倒くさいかなと思った。そこで<code>disabled</code>属性を付けることでファビコンの参照が切れれば、操作しやすそうかなと試してみた。しかし現行のブラウザーでは<code>disabled</code>属性を付けても普通にファビコンへの参照と解釈するようだ。</p>

<p>View Demo: <a href="/pub/test/617.html">Disabled Favicon</a></p>

<p>デモでは緑の○と赤の✕のファビコンを両方共指定し、後で定義した赤の✕のファビコンを参照している<code>link</code>要素には<code>disabled</code>属性を追加している。もし<code>disabled</code>属性がファビコンの参照に影響を与えるのなら緑の○がファビコンとして表示されることになるが、そうはならず赤の✕がファビコンとして表示される。Chrome 41、Firefox 36、Internet Explorer 11のいずれもダメだった。</p>

<hr>

<p>このアイディアはファビコンのURLをJavaScriptコードから排除したいという欲求に基づく。</p>

<pre><code>&lt;link class=&quot;favicon-ok&quot; href=&quot;617-ok.ico&quot; rel=&quot;icon&quot;&gt;
&lt;link class=&quot;favicon-no&quot; disabled href=&quot;617-no.ico&quot; rel=&quot;icon&quot;&gt;
</code></pre>

<p>あらかじめHTMLにはこのように必要になるファビコンを列記しておき、必要な時に<code>disabled</code>属性を追加・削除してやるだけにするというわけだ。</p>

<pre><code>document.querySelector(&#39;.favicon-ok&#39;).setAttribute(&#39;disabled&#39;, true);
document.querySelector(&#39;.favicon-no&#39;).removeAttribute(&#39;disabled&#39;);
</code></pre>

<p>実際にはうまくいかないので、普通にJavaScriptでリソースURLを管理してやる必要がある。どうしてもリソースの管理をJavaScriptで行いたくないのなら<code>rel</code>属性を書き換えてやるという方法もあるだろう。しかし<code>disabled</code>属性のようなそのものずばりな属性を操作するより非直感的な嫌いがあるので、他人にはわかりづらいコードになるかもしれない。</p>]]></content:encoded>
    </item>
    <item>
      <title>src属性のないimg要素と擬似要素</title>
      <link>http://hail2u.net/blog/webdesign/img-element-without-src-attribute-and-pseudo-element.html</link>
      <description>img要素は置換要素なので、現在の安定仕様では明記されてはいないものの歴史的な事情により::before/::after擬似要素による挿入は行えない。しかしChrome 41で遊んだところ、src属性がない場合は挿入することができるようだ。Internet Explorer 11やFirefox 36、Mobile Safari 8では行えない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/img-element-without-src-attribute-and-pseudo-element.html</guid>
      <pubDate>Sat, 28 Mar 2015 02:10:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><code>img</code>要素は置換要素なので、現在の安定仕様では明記されてはいないものの歴史的な事情により<code>::before</code>/<code>::after</code>擬似要素による挿入は行えない。しかしChrome 41で遊んだところ、<code>src</code>属性がない場合は挿入することができるようだ。Internet Explorer 11やFirefox 36、Mobile Safari 8では行えない。</p>

<p>View Demo: <a href="/pub/test/618.html">img element w/o src attribute and pseudo element</a></p>

<p>Chrome 41では<code>alt</code>属性の値である“img without src”という文字列の前に<code>::before</code>擬似要素で仕込んだ“pseudo element for img!”という文字列が挿入されていることがわかる。Chrome 43でも同様だった。</p>

<p><code>src</code>属性がないと<code>img</code>要素がパース・エラーで不明な要素にでもなるのかなと想像したが、<code>alt</code>属性がちゃんと展開されているのでそうではなさそうだ。<code>alt</code>属性が展開されるようなケースが特別扱いされているということなのだろうか。</p>

<hr>

<p>イシューを立てようかと思ったのだけど、仕様上は挿入してはならないことにはなっておらず、立てづらかったため保留した。CSS 2.1では「<a href="http://www.w3.org/TR/CSS2/generate.html#before-after-content">将来的には決めるつもりだけど、まだ決まってない</a>」となっている。それを決めるはずの<a href="http://www.w3.org/TR/2003/WD-css3-content-20030514/#replacedContent">CSS3 Generated and Replaced Content ModuleのReplaced contentの項</a>では<code>::outside::before</code>等を使えということになっているが2003年のWorking Draftで根拠にはしづらい。</p>

<p>意図的に行わないと再現しそうにないため、誤爆するということもなさそうなので、ここに記録するに留めておこう。</p>]]></content:encoded>
    </item>
    <item>
      <title>vim-css3-syntax v0.14.0</title>
      <link>http://hail2u.net/blog/software/vim-css3-syntax-v0.14.0.html</link>
      <description>W3C側でのCSSモジュールの整理が進み、この半年でずいぶんと削除されたりリネームされたりするようになった。vim-css3-syntaxもできるだけ追随するようにしている。年度末ということでキリが良さそうなのでv0.14.0としてリリースすることにした。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/vim-css3-syntax-v0.14.0.html</guid>
      <pubDate>Fri, 27 Mar 2015 12:43:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>W3C側でのCSSモジュールの整理が進み、この半年でずいぶんと削除されたりリネームされたりするようになった。<a href="https://github.com/hail2u/vim-css3-syntax">vim-css3-syntax</a>もできるだけ追随するようにしている。年度末ということでキリが良さそうなのでv0.14.0としてリリースすることにした。</p>

<p>v0.13.0から追加(➕)・変更(❗)・削除(➖)されたモジュールは以下の通りだ。</p>

<ul>
<li>➕ Pseudo-Elements Module</li>
<li>➕ Positioned Layout Module</li>
<li>➕ Scroll Snap Points Module</li>
<li>❗ Box Alignment Module</li>
<li>❗ Counter Styles</li>
<li>❗ Grid Layout Module</li>
<li>❗ Basic User Interface Module</li>
<li>➖ Presentation Levels Module</li>
<li>➖ Template Layout Module</li>
</ul>

<p>トピックとしては<a href="http://www.w3.org/TR/2015/WD-css-snappoints-1-20150326/">Scroll Snap Pointsモジュール</a>か。実装されるとCSSでいわゆるスクロール・ハイジャッキングが可能になる。スクロール・ハイジャッキングが忌避される理由は処理が重くなりがちだということが大きい(それだけではないが)ので、ブラウザー側が高速に良しなにしてくれることが期待できるCSSで実装されるとなると、すぐに市民権を得ることになりそうだ。</p>

<hr>

<p>Selectors Level 4に<code>:blank</code>擬似クラスが作られていて、Template Layout Modulesで<code>::blank()</code>擬似要素があったりするのどうするんだろう。後者はWorking Group Noteになったので、このまま消え行くか大きく書き換わるものとして捉えておけば良いのかな。</p>]]></content:encoded>
    </item>
    <item>
      <title>備え</title>
      <link>http://hail2u.net/blog/software/preparations.html</link>
      <description>Windows向けのiTunesの完全な64bit化により、Last.fmのプラグインが動作しなくなった。更新されないことには特に思うところはなく、単に収益化に失敗し続けていて、プラグイン開発者を雇用し続けることが出来なかったんだろうなとかその程度にしか思っていない。しかし仮にこれから更新されてまた機能するようになったとしても、もう二度と使うことはないだろう。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/preparations.html</guid>
      <pubDate>Thu, 26 Mar 2015 12:18:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>Windows向けのiTunesの完全な64bit化により、<a href="http://www.last.fm/">Last.fm</a>のプラグインが動作しなくなった。更新されないことには特に思うところはなく、単に収益化に失敗し続けていて、プラグイン開発者を雇用し続けることが出来なかったんだろうなとかその程度にしか思っていない。しかし仮にこれから更新されてまた機能するようになったとしても、もう二度と使うことはないだろう。</p>

<p>Last.fmの態度がはっきりしないのが致命的だった。開発しているのか、何か理由があって修正することができないのか、ということを公式にブログやTwitterで発表することなく、「すぐに出します！」とのみ言うだけで2ヶ月近くも音沙汰なしなのは絶望する。そしてその間の一時的な対処として挙げたものがiTunesの修正版をインストールしろというのが、あたかも自分たちのプラグインには責任がなく、iTunesに責任転嫁しているように感じてしまう。</p>

<p>音楽の視聴ログであるLast.fmに対しては、今ここに至っても代替となりえるものがほとんどない。その立場に胡座をかいてゆるやかに死に近づいていたとはいえ、これまでそれなりに機能してきたし、これからも機能して欲しいものではあった。この2ヶ月の沈黙は止めとなりえそうだ。</p>

<hr>

<p>特定のプラットフォームに依存するサービスやアプリケーションを展開する場合、その依存関係がプラットフォーム側から一方的に壊されることを覚悟する必要がある。その覚悟と備えがないサービスは速やかに死んだ方がユーザーのためとも言えるのかもしれない。</p>]]></content:encoded>
    </item>
    <item>
      <title>アプリケーションが使われる文脈</title>
      <link>http://hail2u.net/blog/software/context-of-an-application.html</link>
      <description>The best icon is a text labelという記事を読んだ。記事のタイトルからは、とにかく変なアイコンをやめて文字列にしろ！という風に感じられるが、実際には継続的なアプリケーションの利用によるユーザーの学習を期待せず、アプリケーションが使われる文脈を重視して選択しろという話のようだ。別の言い方をすれば、アイコンか文字列かではなく文脈だ、という話になるだろう。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/context-of-an-application.html</guid>
      <pubDate>Wed, 25 Mar 2015 10:55:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="http://thomasbyttebier.be/blog/the-best-icon-is-a-text-label">The best icon is a text label</a>という記事を読んだ。記事のタイトルからは、とにかく変なアイコンをやめて文字列にしろ！という風に感じられるが、実際には継続的なアプリケーションの利用によるユーザーの学習を期待せず、アプリケーションが使われる文脈を重視して選択しろという話のようだ。別の言い方をすれば、アイコンか文字列かではなく文脈だ、という話になるだろう。</p>

<p>パッと見では失敗していそうなアイコンだが、うまく機能している例としてTweetbotやTumblrのiOSアプリが例に挙げられている。これらはそれぞれTwitterのユーザーであることやTumblrのユーザーであることが前提となっているので、多少妙なアイコン、例えばTweetbotの@アイコンやTumblrのhi!アイコンなどもちゃんとユーザが理解でき、機能するということになる。</p>

<p>反対に機能していない例としてApple mailやInstagramのiOSアプリを例に挙げている。Apple mailでは新しくメールを書こうとした時に、封筒の形をしたアイコンと紙に鉛筆が重なったアイコンのどちらをクリックすべきかはっきりわからない。InstagramのiOSアプリでは友人に直接画像を送りつけたい時になぜか受信トレイのアイコンをクリックする必要がある。前者は学習難易度が高く(覚えても忘れる)、後者は学習することすら出来ない(機能へたどり着くことすら出来ない)可能性が高い。</p>

<p>難しいのはオリジンたるそういった文脈を創成するアプリケーションを作る時だ。文脈を参照する側ではなく作り出す側なので、そのアイコンはユーザーの学習を必須とするものになる。Facebookの新しいiOSアプリではハンバーガー・ボタンを排除し、ラベル付きでアイコンを表示することにより、アイコンの持つ意味合いを確定し、文脈の創成を実現していると言えそう。</p>

<hr>

<p>ハンバーガー・ボタンも含め、アイコンは描画領域の節約に多いに役立つ。しかしアイコン化で失われるものもまた多い。アプリケーションはもとよりウェブサイトでも、その利用される文脈を考慮して適切に利用していきたい。</p>]]></content:encoded>
    </item>
    <item>
      <title>アクロイド殺し</title>
      <link>http://hail2u.net/blog/media/the-murder-of-roger-ackroyd.html</link>
      <description>本箱から発掘したので20冊くらいあるアガサ・クリスティーの再読周回に入った。6冊目のアクロイド殺しをちょうど読み終わった。オチ知ってても面白い。僕もラルフ大尉みたいに、殺人事件が起こりそうなくらいの遺産を血の繋がっていない人から自分の手を汚さずに貰いたい。</description>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/the-murder-of-roger-ackroyd.html</guid>
      <pubDate>Tue, 24 Mar 2015 15:29:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="http://www.amazon.co.jp/gp/product/4151300031/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4151300031&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="アクロイド殺し (ハヤカワ文庫―クリスティー文庫)" src="http://ecx.images-amazon.com/images/I/51MNFB472ML.jpg"></a>
</figure>

<p>本箱から発掘したので20冊くらいあるアガサ・クリスティーの再読周回に入った。6冊目の<a href="http://www.amazon.co.jp/gp/product/4151300031/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4151300031&amp;linkCode=as2&amp;tag=hail2unet-22">アクロイド殺し</a>をちょうど読み終わった。オチ知ってても面白い。僕もラルフ大尉みたいに、殺人事件が起こりそうなくらいの遺産を血の繋がっていない人から自分の手を汚さずに貰いたい。</p>

<p>アガサ・クリスティーは推理小説的な面ではそんなに好きではなくて、一番好きなのは<a href="http://www.amazon.co.jp/gp/product/4151300732/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4151300732&amp;linkCode=as2&amp;tag=hail2unet-22">チムニーズ館の秘密</a>のような、今風に言うのなら冒険サスペンスといった風合いの作品が好き。そのジャンルの大家という評価で、モーリス・ルブランと似てるかなと思う。ヴァン・ダインや初期のエラリー・クイーンと比べるのは、なんかこうちょっと違う感じがある。どっちも好きだけど。</p>

<p>手持ちの中から面白い順に読んでしまったので、残りの10冊以上が微妙なラインナップだ。</p>

<hr>

<p>この本だけ買い直したので、ハヤカワの再販版のクリスティー文庫のやつだった。そのため普通の文庫本より1cmくらい縦長で、手持ちの文庫本カバーが入らない。久々に何冊か読んでやっぱり面白かったので、持ってないアガサ・クリスティーの本、特に食わず嫌いっぽいミス・マープルのシリーズでも何冊か買おうかなと思ってたんだけど、今はこの変型のものしか手に入らないっぽい。そんなに読まないのでKindleで買うか。</p>

<p>あとBSで昔やってた名探偵ポワロのTVドラマのDVDが欲しくなった。あの髭むしりたい。</p>]]></content:encoded>
    </item>
    <item>
      <title>MessageFormat</title>
      <link>http://hail2u.net/blog/coding/messageformat.html</link>
      <description>Pluralization for JavaScriptという名詞の複数形についての記事を読んで、MessageFormatという仕組みがあることを初めて知った。複数形や三単現、性別による言葉遣いの違いなどを言語ごとに定義しておき、出力する際にその定義を利用して自然な結果になるようにする仕組みのようだ。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/messageformat.html</guid>
      <pubDate>Mon, 23 Mar 2015 09:14:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="http://alistapart.com/article/pluralization-for-javascript">Pluralization for JavaScript</a>という名詞の複数形についての記事を読んで、<a href="http://userguide.icu-project.org/formatparse/messages">MessageFormat</a>という仕組みがあることを初めて知った。複数形や三単現、性別による言葉遣いの違いなどを言語ごとに定義しておき、出力する際にその定義を利用して自然な結果になるようにする仕組みのようだ。</p>

<p>MessageFormatの仕組み自体もわかりやすくて良かったが、記事に書かれているようにちょっとしたローカライズにおいても威力を発揮しそうなのが良さそうに思えた。昨今のウェブサイトやウェブアプリにおいては、完全な国際化やローカライズよりも重要なUIパーツの正確なローカライズがまず必要になっているので、そういう小さなところから使える仕組みであるMessageFormatはポイントが高いだろう。国際化はともかく、完全なローカライズくらいまではスケールすると思えるので、規模によっては使えないということもないはずだ。</p>

<p>日本で日本人として開発者っぽい何かをやっていると、和訳はともかくローカライズにほとんど興味を持てなくなってくる。日本語に直して理解するか、英語に直して公開するかのどちらかで気力が尽きるからだ。けれどこういったロジカルでシンプルな仕組みなら、とりあえず導入してL10nを見据えてみようかという気になるのかもしれない。<a href="http://formatjs.io/">Node.jsやHandlebars.jsに組み込んで使えるライブラリー</a>もあるようだし、ログ出力などローカライズとはあまり関係のないところからまずは使ってみたい。</p>]]></content:encoded>
    </item>
    <item>
      <title>Media Queries Level 4におけるキーワード周囲の空白文字</title>
      <link>http://hail2u.net/blog/webdesign/surrounding-white-spaces-of-keywords-on-mediaqueries-4.html</link>
      <description>Media Queries Level 4の2014/06/05付けのWDでは、メディア特性を構成するための)や(とnotやand、orの間にひとつ以上の空白文字が必須になった。この変化が気になるのはCSS最小化ツールを作っている人くらいか。通常は半角空白なり改行なりを挟んで書いているだろうと思われるので、気にする必要はなさそうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/surrounding-white-spaces-of-keywords-on-mediaqueries-4.html</guid>
      <pubDate>Sun, 22 Mar 2015 14:22:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/">Media Queries Level 4の2014/06/05付けのWD</a>では、メディア特性を構成するための<code>)</code>や<code>(</code>と<code>not</code>や<code>and</code>、<code>or</code>の間にひとつ以上の空白文字が必須になった。この変化が気になるのはCSS最小化ツールを作っている人くらいか。通常は半角空白なり改行なりを挟んで書いているだろうと思われるので、気にする必要はなさそうだ。</p>

<p><a href="http://www.w3.org/TR/css3-mediaqueries/">Level 3</a>までは閉じ括弧とキーワードの間は空白文字は不要だった。</p>

<pre><code>@media (min-width: 100px)and (min-height: 100px) {}
</code></pre>

<p>このように<code>)</code>と<code>and</code>キーワードの間に空白文字がなくても良く、バリデーターも実装も許可してくれる。Level 4からは空白文字が必須になる。</p>

<pre><code>@media (min-width: 100px)<mark> </mark>and (min-height: 100px) {}
</code></pre>

<p>このように<code>and</code>キーワードの<em>前</em>にも空白文字を入れる。元々<code>and</code>キーワードの<em>後</em>の空白はCSSにおける関数の表記法との兼ね合いのために許可されていない。</p>

<figure>

<blockquote>

<p>Whitespace must be present between a &#39;)&#39; character and a ‘not’, ‘and’, or ‘or’ keyword, and between a ‘not’, ‘and’, or ‘or’ keyword and a &#39;(&#39; character.</p>
</blockquote>

<figcaption>— <cite><a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/#mq-syntax">3 Syntax</a></cite></figcaption>
</figure>

<p>仕様でもこのように明記されている。Level 3での曖昧さ(<q>having no space between ‘and’ and the expression is not allowed</q>)を排除したと考えると良さそうだ。</p>

<hr>

<p>CSSWringでは<a href="https://github.com/hail2u/node-csswring/commit/6c0e587c860165dc5d5b09b48c4b44e2ba64760e">特別扱いしていたのをしないように</a>して対応した。</p>]]></content:encoded>
    </item>
    <item>
      <title>麻のシーツ</title>
      <link>http://hail2u.net/blog/gadget/hemp-bed-sheet.html</link>
      <description>ついに麻のシーツを買った。といっても高級なものではなくて、無印良品の麻平織だけど。夏に向けてピッタリかなと、良品週間中ということで買った。そんなにすごく厚手というわけではないので、耐久性はちょっと不安だけど、麻なりの丈夫さだといいな。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/hemp-bed-sheet.html</guid>
      <pubDate>Sat, 21 Mar 2015 04:47:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="/images/blog/hemp-bed-sheet.jpg"><img alt="無印良品の麻平織ボックスシーツ・オフホワイト" src="/images/blog/hemp-bed-sheet.jpg"></a>
</figure>

<p>ついに麻のシーツを買った。といっても高級なものではなくて、<a href="http://www.muji.net/store/cmdty/detail/4548718199686">無印良品の麻平織</a>だけど。夏に向けてピッタリかなと、良品週間中ということで買った。そんなにすごく厚手というわけではないので、耐久性はちょっと不安だけど、麻なりの丈夫さだといいな。</p>

<p>麻のベッドリネン類は年間通して使えるけれど、冬は毛布を敷いたり掛けたりという工夫は必要みたいだ。今は<a href="/blog/misc/laying-out-the-blanket.html">そういう運用</a>になったので、あまり問題はなさそう。夏はきっと肌離れ的な点で今まで使っていた天竺綿のシーツよりも快適なはず。楽しみ。</p>

<p>買ったばかりというのもあるけど、すごく心地よい。永遠に寝れそう。枕カバーも変えたい気がしてきた。</p>]]></content:encoded>
    </item>
    <item>
      <title>max-widthを否定するクエリー</title>
      <link>http://hail2u.net/blog/webdesign/negation-of-max-width-query.html</link>
      <description>モバイル・ファーストが浸透して久しくなり、めっきりmin-widthクエリー以外を見かけることはなくなった。そんな中、not (max-width: 768px)という書き方を見かけて、なるほどなと思った。現状のブラウザーにおける実装(と安定した仕様)では768pxを含まずそれより大きいという表現がmin-widthでは書くことができないが、notキーワードとmax-widthを組み合わせることで実現できる。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/negation-of-max-width-query.html</guid>
      <pubDate>Fri, 20 Mar 2015 07:34:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>モバイル・ファーストが浸透して久しくなり、めっきり<code>min-width</code>クエリー以外を見かけることはなくなった。そんな中、<code>not (max-width: 768px)</code>という書き方を見かけて、なるほどなと思った。現状のブラウザーにおける実装(と安定した仕様)では<em><code>768px</code>を含まずそれより大きい</em>という表現が<code>min-width</code>では書くことができないが、<code>not</code>キーワードと<code>max-width</code>を組み合わせることで実現できる。</p>

<p>View Demo: <a href="/pub/test/616.html">Negation of max-width query</a></p>

<p>特定のデバイスや解像度を強く意識したクエリーの是非はとりあえず脇へ置いておいて、iPhone 5s以下やらiPad Airやら一般的なノートブックやらを意識してクエリーを書くことはままある。多くの場合はそれら特定のデバイスのサイズ<em>から</em>を区切りにしてクエリーを書くわけだが、それらのサイズ<em>まで</em>で書くとなると少し曖昧な記述になる。</p>

<pre><code>@media (min-width: 321px) {}
@media (min-width: 769px) {}
@media (min-width: 1025px) {}
</code></pre>

<p>つまりこのように<code>1px</code>足した値を使ってクエリーを書くわけだ。慣れればわかるとは言え微妙な感じは否定できない。</p>

<pre><code>@media not all and (max-width: 320px) {}
@media not all and (max-width: 768px) {}
@media not all and (max-width: 1024px) {}
</code></pre>

<p><code>not</code>キーワードと<code>min-width</code>と対になる<code>max-width</code>を組み合わせると、このようにも書けることになる。<code>all</code>などのメディア・タイプと共に指定してやる必要があり、<code>width</code>や<code>resolution</code>などといった具体的なメディア特性だけを否定することは出来ない……らしいが特に<a href="http://www.w3.org/TR/css3-mediaqueries/">Level 3仕様</a>でも<a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/">2014/06/05のLevel 4仕様のWorking Draft</a>でも触れられていない。CSS 2.1仕様との後方互換性のためそういう実装になっているのかもしれない。</p>

<hr>

<p>Media Queries Level 4 (Public Wrking Draft, 5 June 2014)では<code>width</code>クエリー他で<a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/#mq-ranges">範囲指定</a>が可能になる予定で、それと同時により下・以下・以上・より上を区別して書くことができるようになる。この実装が広まるまでは<code>not</code>キーワードを利用して表現してやるというのも窮余の一策としてはまずまずなものだろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>Documentsに「“マークアップ”するということ ～ HTML5勧告に寄せて ～」を追加</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「ウェブ・タイポグラフィーのベスト・プラクティス」を追加</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Documentsに「Sassの基本」を追加</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Sun, 29 Mar 2015 16:46:00 +0900</lastBuildDate>
  </channel>
</rss>
