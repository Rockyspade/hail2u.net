<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Mon, 9 Feb 2015 10:44:13 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>Drawic v2.9.0</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.9.0.html</link>
      <description>はてなブックマークでブックマークするリンクを復活させた都合で、はてな系のアイコンを4種類、Drawicに追加してv2.9.0にした。はてなのアイコン平べったい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.9.0.html</guid>
      <pubDate>Mon, 09 Feb 2015 10:44:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.github.io/drawic/"><img alt="はてな・人力検索はてな・はてなブックマーク・はてなブロク" height="627" src="/images/blog/drawic-v2.9.0.png" width="1200"></a>
</figure>

<p>はてなブックマークでブックマークするリンクを復活させた都合で、はてな系のアイコンを4種類、<a href="http://hail2u.github.io/drawic/">Drawic</a>に追加してv2.9.0にした。はてなのアイコン平べったい。</p>

<p>ブックマークするリンクを追加する時、はてなブックマークでブックマークするページがユーザーごとにユニークなことをすっかり忘れてた。TwitterやFacebookみたいなURLか、あの大きいブックマーク画面へリダイレクトしてくれるURLみたいなの欲しい気がする……と<code>/my/add.confirm</code>をエンドポイントにするとリダイレクトしてくれることを思い出したので、これを使うことにした。</p>

<p>まだブックマークされていない時のページが気になるけど、ブックマークレットの画面を流用するよりは多分マシ。</p>]]></content:encoded>
    </item>

    <item>
      <title>文字参照と属性セレクター</title>
      <link>http://hail2u.net/blog/webdesign/character-reference-and-attribute-selector.html</link>
      <description>文字参照を含む可能性がある属性の値を使ってセレクターを自動生成するような仕組みで少しハマった。文字参照をそのまま属性セレクターの値として指定してしまったので、うまく動かなかった。style要素に記述するようなケースでも、属性セレクターの値には文字参照は使えない。戻して書き、必要ならバックスラッシュでエスケープする。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/character-reference-and-attribute-selector.html</guid>
      <pubDate>Sun, 08 Feb 2015 10:12:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>文字参照を含む可能性がある属性の値を使ってセレクターを自動生成するような仕組みで少しハマった。文字参照をそのまま属性セレクターの値として指定してしまったので、うまく動かなかった。<code>style</code>要素に記述するようなケースでも、属性セレクターの値には文字参照は使えない。戻して書き、必要ならバックスラッシュでエスケープする。</p>

<p>View Demo: <a href="/pub/test/607.html">Character Reference and Attribute Selector</a></p>

<p>デモの<code>p</code>要素には<code>title</code>属性の値に二重引用符が文字参照で入っている。普通に文字参照を使って属性セレクターを書いた場合、要素が選択できない。また属性セレクターでの二重引用符は特別な意味を持つので、引用符なしのつもりで書いても同じように選択できない。文字参照を戻した上で以下のどれかで指定する必要がある。</p>

<ul>
<li>一重引用符で括る</li>
<li>二重引用符で括り、エスケープする</li>
<li>二重引用符をエスケープする</li>
</ul>

<p>属性セレクターでは引用符で括ることが必須ではないので、エスケープするだけでも大丈夫だった。</p>

<hr>

<p>やりたかった仕組みではユーザーの入力によって仕込まれた<code>title</code>属性の値に従ってセレクターを生成して、スタイルを追加するというようなものなので、ユーザーの入力をそのまま<code>style</code>要素の子に追加する必要があり、かなり危険そうだ。別の方法を考えなければならなくなった……。</p>]]></content:encoded>
    </item>

    <item>
      <title>node-git-release v1.1.2</title>
      <link>http://hail2u.net/blog/software/node-git-release-v1.1.2.html</link>
      <description>node-git-releaseをio.js v1.1.0を要件にして、child_process.spawnSync()を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも*Sync()がサポートされ、動くようになったようだ(試してない)。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/node-git-release-v1.1.2.html</guid>
      <pubDate>Sat, 07 Feb 2015 09:38:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/hail2u/node-git-release">node-git-release</a>をio.js v1.1.0を要件にして、<code>child_process.spawnSync()</code>を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも<code>*Sync()</code>がサポートされ、動くようになったようだ(試してない)。</p>

<p><code>package.json</code>でio.jsの特定バージョンを要件にしたい場合、<code>engines</code>フィールドでは<code>iojs</code>というキーで指定するようだ。npmの公式ドキュメントでは特に触れられていないが、Herokuでは既にこれを見て実装されているという話だった。</p>

<pre><code>{
  &quot;engines&quot;: {
    &quot;iojs&quot;: &quot;&gt;=v1.1.0&quot;
  }
}
</code></pre>

<p>当然ながら実行をブロックしてくれるわけではないので、気休め程度と言って良い。他、この<code>engines</code>フィールドでio.js v1.1.0<em>または</em>Node.js v0.12.0という要件にしたい場合の書き方がわからないという問題もあった。配列で書くしかないような気がするが、解釈できるのだろうか。色々想定されていなさそうなフィールドなので、Herokuで明示的にio.jsを使いたいという場合を除いて指定しない方が良さそうだ。</p>

<hr>

<p>WindowsのGitがアレでアレなので、いまだ<code>npm publish</code>することができない。一生無理そう。</p>]]></content:encoded>
    </item>

    <item>
      <title>銀ぶら</title>
      <link>http://hail2u.net/blog/misc/ginbura.html</link>
      <description>Patrickの直営店へは銀座駅から有楽町ルミネ、松屋銀座を経由しながら歩いた。この辺りは昔(10年以上前)とあんまり変わっていない気もしたけど、楽しそうな店や変な建物があって、やはり銀座は楽しい。Cole HaanやArc’terixの店舗などをのぞいていたら、電車で下がったテンションもすぐに上がった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/ginbura.html</guid>
      <pubDate>Fri, 06 Feb 2015 07:56:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/ginbura.jpg"><img alt="銀座三越の隣にあるピアス銀座ビル" height="2760" src="/images/blog/ginbura.jpg" width="2448"></a>
</figure>

<p><a href="https://www.google.com/maps/place/PATRICK+LABO+GINZA/@35.672537,139.770912,17z/data=!4m6!1m3!3m2!1s0x60188be1a52511d7:0x95a40c38fe1238b8!2sPATRICK+LABO+GINZA!3m1!1s0x60188be1a52511d7:0x95a40c38fe1238b8">Patrickの直営店</a>へは銀座駅から有楽町ルミネ、松屋銀座を経由しながら歩いた。この辺りは昔(10年以上前)とあんまり変わっていない気もしたけど、楽しそうな店や変な建物があって、やはり銀座は楽しい。<a href="https://www.colehaan.co.jp/">Cole Haan</a>や<a href="http://arcteryx.com/Home.aspx?language=JP">Arc’terix</a>の店舗などをのぞいていたら、電車で下がったテンションもすぐに上がった。</p>

<figure>
  <a href="/images/blog/patrick-labo-ginza.jpg"><img alt="こじんまりとしたPatrick直営店、Patrick LABO GINZA" height="2400" src="/images/blog/patrick-labo-ginza.jpg" width="2400"></a>

  <figcaption>Patrick LABO GINZA</figcaption>
</figure>

<p>帰りは京橋の方をぶらぶらしてから、東京駅をくぐり、新丸ビル、三菱一号館美術館、皇居の堀沿いと歩いて、東京駅に戻って帰った。<a href="http://www.kataoka.com/echire-shop.html">エシレ</a>で何かパンを買えばよかったけど、フラフラするの楽しすぎてまったく思い出せなかった。</p>

<figure>
  <a href="/images/blog/tokyo-marunouchi-chuo-guchi-to-koukyo.jpg"><img alt="東京駅丸の内中央口から皇居へは何にもない歩道になっている" height="2448" src="/images/blog/tokyo-marunouchi-chuo-guchi-to-koukyo.jpg" width="3264"></a>

  <figcaption>丸の内中央口から皇居</figcaption>
</figure>

<p>疲れたけど足に馴染み始めた<a href="/blog/gadget/camper-mil-chelsea-boots.html">Camperのブーツ</a>がいい仕事してくれた。</p>]]></content:encoded>
    </item>

    <item>
      <title>EDJOの(デ)メリット</title>
      <link>http://hail2u.net/blog/webdesign/on-every-declaration-just-once.html</link>
      <description>Every Declaration Just Once (以下EDJO)アプローチの最大のメリットはなんだろうかということについて考えていた。情報設計と重なるところがまるでないため、設計思想としては完全に成立しない。つまりCSSを設計することを放棄し、設計されたHTMLに対してスタイルを割り当てていく手法としてのみ存在しうる。このことがすなわちメリットなのではないだろうか。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/on-every-declaration-just-once.html</guid>
      <pubDate>Thu, 05 Feb 2015 11:54:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Every Declaration Just Once (以下EDJO)アプローチの最大のメリットはなんだろうかということについて考えていた。情報設計と重なるところがまるでないため、設計思想としては完全に成立しない。つまりCSSを設計することを放棄し、設計されたHTMLに対してスタイルを割り当てていく手法としてのみ存在しうる。このことがすなわちメリットなのではないだろうか。</p>

<p>CSSの限られた文法が情報設計に基づく複雑な構造の表現に適さないことは明白だ。OOCSSではHTMLとCSSを設計のもとに平等に扱っていたが、どうしてもCSSにおいては限界があり、複雑な命名規則やCSSプリプロセッサーの登場となったのではないかと思う。CSSプリプロセッサーの高機能化により実現可能になりつつあるが、それと同時に高度に抽象化された複雑さも氾濫しつつある。</p>

<p>EDJOにおいては<a href="https://github.com/hail2u/node-edjo/blob/master/test.edjo.css">その書かれ方</a>を見ればわかる通り、設計というものを放棄することになる。設計されたHTMLに対してスタイルを割り当てていくという作業にすべては集約されることになるだろう。CSSは単にHTMLへスタルを割り当てていくのみでそれ以上の意味は持たない。OOCSSにおいてはともすれば「貧弱さ」と表現されるCSS文法の単純さに似合った割り切りであると言えよう。</p>

<p>CSSでの設計の放棄とEDJOの採用には、いくつかの派生的なデメリットとメリットが含まれる。</p>

<h2>CSSのわかりやすさ</h2>

<p>論理的な単位で定義がまとまっていないため、定義そのものはわかっても、他と組み合わせた結果どうなるかまでは不透明で、わかりやすさに欠けるCSSになる。定義が上書きされることがまずないという点ではOOCSSのような論理的な単位で管理するよりも<em>誤解</em>をする可能性は減るが、全般的にはデメリットと言えるだろう。</p>

<p>このわかりやすさの欠如はデバッガビリティーというようなものにはあまり影響をあたえることはない。なぜならこのわかりにくさの欠如はCSSファイルを相手にして格闘することが不可能なことを意味するので、ブラウザーに内蔵されている開発者ツールという武器を必ず使うことになるからだ。そういう意味では開発者ツールとは相性が良いとも言えるだろう。</p>

<h2>セレクター数</h2>

<p>IE9以下にはよく忘れてよくハマるCSSファイルごとのセレクター数に限界があるという仕様がある。定義ごとにセレクターを割り当てていくという手法の都合上、その限界はかなり簡単に突破してしまう。普通にCSSを書く場合と比べると、おおまかに3–5倍程度にセレクター数が増えると見積もる必要がある。</p>

<p>OOCSS+CSSプリプロセッサーで書く場合と比べるならば遭遇しやすいというだけに過ぎないとも言えるが、現実的な問題ではある。運用でカバーすることは難しいので、必ず<a href="https://www.npmjs.com/package/grunt-selector4096">チェックすること</a>と、<a href="http://blesscss.com/">機械的に処理すること</a>を徹底する必要はあるだろう。</p>

<h2>オブジェクトの再構築</h2>

<p>OOCSSで書いている時に避けて通れないのがオブジェクトの再構築だ。<a href="http://dskd.jp/archives/57.html">EDJOなオブジェクトの妄想という記事</a>でも触れられているが、僕もこれは非常に大きいと考える。OOCSSのオブジェクトを再構築するのは非常にコストが高い。単にオブジェクトのスタイルの編集だけに留まらず、そのリネーム、新たなオブジェクトの設計、参照の書きかえ、と必要になる作業が非常に多い。</p>

<p>EDJOにおいてはセレクターの書き足し、必要ならルールセットの追加という2つのパターンで常に完了する。OOCSSにおけるオブジェクトのような参照の対象を、CSSの仕様(または実装)にまで遡るため、書きかえたくてもできないという方が適切かもしれない。</p>

<p>このことはオブジェクトの再構築を避けるためによく行うプロパティーの上書きをなくせるということでもある。それに伴ってほぼ上書きが不要になることからセレクターの詳細度への配慮が不要になることでもあり、CSSにおける制約からHTMLのクラス名に強い命名規則を強制しなくても良いということでもある。</p>

<h2>差分</h2>

<p>近年の開発において差分への意識は不可欠であるとも言える。確実なマージのためにはレビューが不可欠であり、適切なレビューのためには差分が明確であることがある程度要求される。</p>

<p>通常のCSSの書き方では、CSSへのルールセットのブロック単位での追加とHTMLへのクラスの追加が差分として表示されることになる。対してEDJOではCSSへの編集のみに集約されることだろう。</p>

<pre><code>@@ -1,4 +1,5 @@
 .foo,
+.bar,
 .black-text {
   color: black;
 }
</code></pre>

<p>CSSにおける差分もこのような単純な行の追加の組み合わせだけになる。他の差分ブロックと混ざることもない。</p>

<hr>

<p>設計の放棄と言っても、実際には情報設計が最初にあり、それを反映させたHTMLがある。EDJOでは情報設計を元にするのではなく、それを元にしたHTMLに対してアピアランスとしてスタイルを割り当てていくというわけだ。情報設計の元でHTMLとCSSを並列させる場合、両者をきれいに連携させるためには強力な命名規則か高機能なCSSプリプロセッサー、またはその両者が必要になってしまう。それをHTMLに完全にCSSを従属させることでシンプルでストレートで逆転することのない序列を強いることができるのがEDJOの良いところだろう。</p>

<p>反面、論理的な構造を持たないため、CSSファイル単体で完結しないという問題がある。機械的な生成ではない形でスタイル・ガイド(のようなもの)を作成し、それを基準にブラウザーの開発者ツールでデバッグするという形での開発でないと苦しいだろう。書き方の違いに慣れることも含め、ドラスティックに開発フローを変更する手法であると言える。</p>]]></content:encoded>
    </item>

    <item>
      <title>Patrick Marathon-LE</title>
      <link>http://hail2u.net/blog/gadget/patrick-marathon-le-black.html</link>
      <description>スタンスミスの黒(白ソール・白ヒールパッチ)が出そうな気配がないのであきらめて、いつか買おうと思っていたPatrickのMarathonのレザー版を買った。暇だったので銀座にある直営店まで足をのばしたものの、まさかのサイズ切れで、在庫確認をしない詰めの甘さをちょっと後悔した。それでも色違いでサイズを合わせ、サイズ違いで色を合わせてすごく気に入ったので、在庫のあった神戸の直営店から自宅に配送してもらい、無事届いた。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/patrick-marathon-le-black.html</guid>
      <pubDate>Wed, 04 Feb 2015 06:56:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/B00KPLL2BK/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00KPLL2BK&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="[パトリック] PATRICK MARATHON-L" height="292" src="http://ecx.images-amazon.com/images/I/81N31b1DlwL.jpg" width="500"></a>
</figure>

<p>スタンスミスの黒(白ソール・白ヒールパッチ)が出そうな気配がないのであきらめて、いつか買おうと思っていた<a href="http://www.amazon.co.jp/gp/product/B00KPLL2BK/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00KPLL2BK&amp;linkCode=as2&amp;tag=hail2unet-22">PatrickのMarathonのレザー版</a>を買った。暇だったので<a href="https://www.google.com/maps/place/PATRICK+LABO+GINZA/@35.672537,139.770912,17z/data=!4m6!1m3!3m2!1s0x60188be1a52511d7:0x95a40c38fe1238b8!2sPATRICK+LABO+GINZA!3m1!1s0x60188be1a52511d7:0x95a40c38fe1238b8">銀座にある直営店</a>まで足をのばしたものの、まさかのサイズ切れで、在庫確認をしない詰めの甘さをちょっと後悔した。それでも色違いでサイズを合わせ、サイズ違いで色を合わせてすごく気に入ったので、在庫のあった神戸の直営店から自宅に配送してもらい、無事届いた。</p>

<p>スタンスミスが欲しいのだから<a href="https://www.patrick-onlineshop.jp/products/detail.php?product_id=42">Punch</a>を買うという手もあったが、それはそれで何か負けたような気がしていて嫌だった。そこでPunchを避けた上で、ソール交換できるモデルということで<a href="https://www.patrick-onlineshop.jp/products/detail.php?product_id=21">Nevada II</a>や<a href="https://www.patrick-onlineshop.jp/products/detail.php?product_id=57">Pamir</a>とMarathonに絞り込んだが、そこからもかなり悩んだ。でも若い頃欲しかったけど全然扱いがなくてあきらめたことを思い出してMarathonのレザー版にした。</p>

<p>ロングノーズっぽい靴が苦手なのもあって、直営店でも色々眺めたもののやはりMarathonかと感じた。MarathonはPatrickのモデルの中ではコロンと丸みをおびた形で、シャープすぎず一番好きだ。直営店にはざっと数えても50種類以上は揃っていて、小さい(20畳もなかった気がする)とはいえさすがだった。</p>

<p>色はブラックにした。ウェブの画像ではちょっとわかりづらいが、Patrickの二本線とシューレースは生成りと、落ち着いた色で良かった。ネイビーもロゴのタブが赤だったりとかなり良かったけど、歴史的な事情により靴は黒系しか買わないことにしているのでやめておいた。</p>

<p>Marathonはアウトソールが厚めで柔らかく、クッション性が高い。Patrick共通のインソールの良さもあって、足への負担はかなり少なそうな柔らかさがある。ただ反発力が強いので、しっかりと地面をつかんで歩くというような感覚からはほど遠く、機能的な靴という印象だ。このあたりはカンペールやビルケンシュトックとは系統が違う良さなのかなと思う。ナイキのフリーと系統はいっしょで、それよりは機能で大きく劣るものの、重量バランスや奇をてらわないたたずまいで優ると思う。</p>

<hr>

<p>8000円でソールの張替えができるようなので、長く愛用してやりたい。2ヶ月後くらいきれいにする時には<a href="http://jasonmarkk.com/collections/products/products/3691-4-oz-premium-kit-1">Jason Markkの汚れ落とし</a>でも買おう。</p>]]></content:encoded>
    </item>

    <item>
      <title>ソーシャル・ボタンの再設置</title>
      <link>http://hail2u.net/blog/internet/social-buttons-20150203.html</link>
      <description>SNSをやめる人がいる一方で、僕はソーシャル・ボタンを再設置した。各記事の最後にTwitterとFacebook、はてなブックマークに流すリンクが、狭い画面ではコンテンツに続いて、広い画面では左にぶら下がる形で配置される。カウントは蛇足っぽい気がしたので、単なるリンクにしておいた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/social-buttons-20150203.html</guid>
      <pubDate>Tue, 03 Feb 2015 09:39:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/social-buttons-20150203.png"><img alt="Tweet, Share &amp; Bookmark!" height="627" src="/images/blog/social-buttons-20150203.png" width="1200"></a>
</figure>

<p><a href="http://blog.kyanny.me/entry/2015/02/01/003412">SNSをやめる人</a>がいる一方で、僕はソーシャル・ボタンを再設置した。各記事の最後にTwitterとFacebook、はてなブックマークに流すリンクが、狭い画面ではコンテンツに続いて、広い画面では左にぶら下がる形で配置される。カウントは蛇足っぽい気がしたので、単なるリンクにしておいた。</p>

<p>僕はSNSは雑多でうっとうしいことが多くて正常だと考えている。でも雑多なことはともかく、うっとうしさを許容する必要はあまり感じていなくて、すぐにミュートしたりアンフォローしたり再フォローするように軽くやってれば良いのかなというスタンスをとっている。なのでFacebookのようなやたらとアンフォローするとダメージが大きそうなSNSは近寄りたくはないなと思っていて、運用が難しそうではあるがサークルの再構成という形でアンフォローを代替できるGoogle+はもっと流行っても良さそうだと思ってる。</p>

<p>情報のノイズ率のような方向から見ると、SNSというシステムでコミュニケーションをすることそのものが根本的に壊れていることに気づいてしまうので、考えないことにしている。ノイズの多さは自分の世界がまともである証、とかそんな感じでポジティブにとらえられると良さそうだ。</p>

<h2>追記</h2>

<p>はてなブックマークでブックマークするリンクがおかしかったのを直した。報告をくれた<a href="https://twitter.com/shimabukuro">@shimabukuro</a>とおかしいところを指摘してくれた<a href="https://twitter.com/motemen">@motemen</a>の二人のおかげ。</p>]]></content:encoded>
    </item>

    <item>
      <title>動的なサブセット化と動的なコンテンツ</title>
      <link>http://hail2u.net/blog/webdesign/dynamic-subsetting-and-dynamic-contents.html</link>
      <description>日本語を含むウェブ・フォントを使う場合、その転送量の多さとライセンスの問題により、動的にサブセット化されることがある。手段として間違ってはいないが、利用する側はそれなりに気をつける必要がある。それは動的に追加されるコンテンツに対しては指定しない、ということだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/dynamic-subsetting-and-dynamic-contents.html</guid>
      <pubDate>Mon, 02 Feb 2015 06:40:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>日本語を含むウェブ・フォントを使う場合、その転送量の多さとライセンスの問題により、動的にサブセット化されることがある。手段として間違ってはいないが、利用する側はそれなりに気をつける必要がある。それは動的に追加されるコンテンツに対しては指定しない、ということだ。</p>

<p>動的なサブセット化はHTMLに書かれた文字列を利用して行われる。多くの場合、その仕組みとパフォーマンスの観点から静的なHTMLのソースそのものを利用することになる。つまりJavaScriptを利用してクライアント側で動的に追加されるコンテンツの文字列がサブセットに反映されることはまずない。</p>

<p>例えば<a href="http://www.iwatafont.co.jp/ud/">イワタUDゴシック</a>を<a href="http://webfont.fontplus.jp/">Fontplus</a>経由で採用している<a href="http://vps.sakura.ad.jp/">さくらのVPSのトップページ</a>では、以下のようにクライアント側で動的に生成されるお知らせの一覧はイワタUDゴシックと他のフォント(ここでは游ゴシック)が混ざって表示される。</p>

<figure>
  <a href="/images/blog/dynamic-subsetting-and-dynamic-contens.png"><img alt="同じページで使われていない文字だけ他のフォントで表示されている" height="360" src="/images/blog/dynamic-subsetting-and-dynamic-contens.png" width="640"></a>

  <figcaption>さくらのVPSのWindowsでのスクリーンショット</figcaption>
</figure>

<p>ウェブ・フォントを使うべきところだけ指定するのが確実だが、それはあまりにも煩雑だろう。ブラックリスト方式で、動的にコンテンツを挿入する要素に<code>.disable-webfonts</code>などといったウェブ・フォントを無効化するような<code>font-family</code>プロパティーを指定したクラス名も振っておくのが良いだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>画像の縦横サイズの追加</title>
      <link>http://hail2u.net/blog/webdesign/adding-image-width-and-height.html</link>
      <description>自前の画像を参照する時にwidthとheight属性を追加すると激しい腹痛におそわれる病を長く患っていたけど、どうやら完治したようなのでバッチ処理で追加してた。ついでにimg要素の各属性の記述順序なども書きかえたりして、楽しく時間を浪費した。大いなる無駄だが、他人には迷惑をかけないし、途中から段々トランスしてきた。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/adding-image-width-and-height.html</guid>
      <pubDate>Sun, 01 Feb 2015 03:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>自前の画像を参照する時に<code>width</code>と<code>height</code>属性を追加すると激しい腹痛におそわれる病を長く患っていたけど、どうやら完治したようなのでバッチ処理で追加してた。ついでに<code>img</code>要素の各属性の記述順序なども書きかえたりして、楽しく時間を浪費した。大いなる無駄だが、他人には迷惑をかけないし、途中から段々トランスしてきた。</p>

<p>サイズを明示した画像がはみ出すことへの対策にはCSSで<code>max-width</code>プロパティーを使う。それだけだと縦横比が狂ってリサイズされるので、以下のように<code>height</code>プロパティーも併用するのが良い。</p>

<pre><code>img {
  height: auto;
  max-width: 100%;
}

@supports (object-fit: scale-down) {
  img {
    height: auto;
    max-width: none;
    object-fit: scale-down;
  }
}
</code></pre>

<p>こういう時は<a href="http://www.w3.org/TR/css3-images/#the-object-fit"><code>object-fit</code>プロパティー</a>の出番のはずなので、このように更に<a href="http://www.w3.org/TR/css3-conditional/#at-supports"><code>@supports</code>ルール</a>を使ってやるとChrome 31以降とFirefox 36 (まだ安定版ではない)以降で<code>scale-down</code>を使うようにできる。しかし<code>object-fit</code>プロパティーをサポートしているSafari 7以降で<code>@supports</code>ルールがサポートされていないという問題があるので、もうちょっと工夫した方が良さそう。</p>

<hr>

<p>バッチ処理には<a href="https://www.npmjs.com/package/imagesize">imagesize</a>パッケージを使って、オレオレGruntタスクとして書いてやった。Grunt使うとファイルのリストアップと非同期処理がラップされるので、こういう一括処理のツールを書き捨てる時にもすでに導入されているプロジェクトならちょっと使ってやると楽できる。</p>]]></content:encoded>
    </item>

    <item>
      <title>node-dns-prefetch</title>
      <link>http://hail2u.net/blog/webdesign/node-dns-prefetch.html</link>
      <description>毎回dns-prefetch Online Code Generatorからコピペはさすがに面倒そうなので、URLを指定するとそのページに含まれる外部リソースのドメインから&lt;link rel=&quot;dns-prefetch&quot;&gt;を生成するCLIツール、dns-prefetchを作成した。Node.jsからPhantomJSを使って書いたので、ドメイン抽出とかも簡単でよかった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-dns-prefetch.html</guid>
      <pubDate>Sat, 31 Jan 2015 01:28:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>毎回<a href="http://dnsprefetch.com/">dns-prefetch Online Code Generator</a>からコピペはさすがに面倒そうなので、URLを指定するとそのページに含まれる外部リソースのドメインから<code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code>を生成するCLIツール、<a href="https://github.com/hail2u/node-dns-prefetch">dns-prefetch</a>を作成した。Node.jsからPhantomJSを使って書いたので、ドメイン抽出とかも簡単でよかった。</p>

<pre><samp>$ <kbd>dns-prefetch &lt;URL&gt; [--xhtml]</kbd>
</samp></pre>

<p>npmを使ってインストールした後、ターミナルでURLを指定して実行するのみ。デフォルトではHTML文法で出力するので、XHTML文法で出力したい場合は<code>--xhtml</code>オプションを追加する。</p>

<pre><samp>$ <kbd>dns-prefetch http://hail2u.net/</kbd>
&lt;link href=&quot;//googleads.g.doubleclick.net&quot; rel=&quot;dns-prefetch&quot;&gt;
&lt;link href=&quot;//pagead2.googlesyndication.com&quot; rel=&quot;dns-prefetch&quot;&gt;
&lt;link href=&quot;//www.google-analytics.com&quot; rel=&quot;dns-prefetch&quot;&gt;
&lt;link href=&quot;//www.gstatic.com&quot; rel=&quot;dns-prefetch&quot;&gt;
</samp></pre>

<p>このウェブサイトに対して実行するとこのような結果になる(ユニーク化され、ソートされる)。さらなるリダイレクト先をたどるのはもうちょっと工夫が必要そうだ。</p>

<hr>

<p>本当はGruntやgulpから扱えると良いが、URLを指定して行う都合上、タスク・ランナーやビルド・ツールには向いていない気がするので、単独のCLIツールにした。タスク・ランナーやビルド・ツールへのプラグインとして作るのは不可能ではないが、ローカルサーバーを立てるなりする必要がある上に、プロジェクト側にちゃんとしたHTMLファイルが存在しないとならず、ちょっと面倒くさい。PhantomJS製のためインストール負荷が高いことやそんなに頻繁に更新する必要はないことも少しある。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
