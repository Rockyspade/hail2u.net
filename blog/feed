<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Wed, 25 Mar 2015 10:55:39 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>アプリケーションが使われる文脈</title>
      <link>http://hail2u.net/blog/software/context-of-an-application.html</link>
      <description>The best icon is a text labelという記事を読んだ。記事のタイトルからは、とにかく変なアイコンをやめて文字列にしろ！という風に感じられるが、実際には継続的なアプリケーションの利用によるユーザーの学習を期待せず、アプリケーションが使われる文脈を重視して選択しろという話のようだ。別の言い方をすれば、アイコンか文字列かではなく文脈だ、という話になるだろう。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/context-of-an-application.html</guid>
      <pubDate>Wed, 25 Mar 2015 10:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://thomasbyttebier.be/blog/the-best-icon-is-a-text-label">The best icon is a text label</a>という記事を読んだ。記事のタイトルからは、とにかく変なアイコンをやめて文字列にしろ！という風に感じられるが、実際には継続的なアプリケーションの利用によるユーザーの学習を期待せず、アプリケーションが使われる文脈を重視して選択しろという話のようだ。別の言い方をすれば、アイコンか文字列かではなく文脈だ、という話になるだろう。</p>

<p>パッと見では失敗していそうなアイコンだが、うまく機能している例としてTweetbotやTumblrのiOSアプリが例に挙げられている。これらはそれぞれTwitterのユーザーであることやTumblrのユーザーであることが前提となっているので、多少妙なアイコン、例えばTweetbotの@アイコンやTumblrのhi!アイコンなどもちゃんとユーザが理解でき、機能するということになる。</p>

<p>反対に機能していない例としてApple mailやInstagramのiOSアプリを例に挙げている。Apple mailでは新しくメールを書こうとした時に、封筒の形をしたアイコンと紙に鉛筆が重なったアイコンのどちらをクリックすべきかはっきりわからない。InstagramのiOSアプリでは友人に直接画像を送りつけたい時になぜか受信トレイのアイコンをクリックする必要がある。前者は学習難易度が高く(覚えても忘れる)、後者は学習することすら出来ない(機能へたどり着くことすら出来ない)可能性が高い。</p>

<p>難しいのはオリジンたるそういった文脈を創成するアプリケーションを作る時だ。文脈を参照する側ではなく作り出す側なので、そのアイコンはユーザーの学習を必須とするものになる。Facebookの新しいiOSアプリではハンバーガー・ボタンを排除し、ラベル付きでアイコンを表示することにより、アイコンの持つ意味合いを確定し、文脈の創成を実現していると言えそう。</p>

<hr>

<p>ハンバーガー・ボタンも含め、アイコンは描画領域の節約に多いに役立つ。しかしアイコン化で失われるものもまた多い。アプリケーションはもとよりウェブサイトでも、その利用される文脈を考慮して適切に利用していきたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>アクロイド殺し</title>
      <link>http://hail2u.net/blog/media/the-murder-of-roger-ackroyd.html</link>
      <description>本箱から発掘したので20冊くらいあるアガサ・クリスティーの再読周回に入った。6冊目のアクロイド殺しをちょうど読み終わった。オチ知ってても面白い。僕もラルフ大尉みたいに、殺人事件が起こりそうなくらいの遺産を血の繋がっていない人から自分の手を汚さずに貰いたい。</description>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/the-murder-of-roger-ackroyd.html</guid>
      <pubDate>Tue, 24 Mar 2015 15:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/4151300031/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4151300031&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="アクロイド殺し (ハヤカワ文庫―クリスティー文庫)" src="http://ecx.images-amazon.com/images/I/51MNFB472ML.jpg"></a>
</figure>

<p>本箱から発掘したので20冊くらいあるアガサ・クリスティーの再読周回に入った。6冊目の<a href="http://www.amazon.co.jp/gp/product/4151300031/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4151300031&amp;linkCode=as2&amp;tag=hail2unet-22">アクロイド殺し</a>をちょうど読み終わった。オチ知ってても面白い。僕もラルフ大尉みたいに、殺人事件が起こりそうなくらいの遺産を血の繋がっていない人から自分の手を汚さずに貰いたい。</p>

<p>アガサ・クリスティーは推理小説的な面ではそんなに好きではなくて、一番好きなのは<a href="http://www.amazon.co.jp/gp/product/4151300732/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4151300732&amp;linkCode=as2&amp;tag=hail2unet-22">チムニーズ館の秘密</a>のような、今風に言うのなら冒険サスペンスといった風合いの作品が好き。そのジャンルの大家という評価で、モーリス・ルブランと似てるかなと思う。ヴァン・ダインや初期のエラリー・クイーンと比べるのは、なんかこうちょっと違う感じがある。どっちも好きだけど。</p>

<p>手持ちの中から面白い順に読んでしまったので、残りの10冊以上が微妙なラインナップだ。</p>

<hr>

<p>この本だけ買い直したので、ハヤカワの再販版のクリスティー文庫のやつだった。そのため普通の文庫本より1cmくらい縦長で、手持ちの文庫本カバーが入らない。久々に何冊か読んでやっぱり面白かったので、持ってないアガサ・クリスティーの本、特に食わず嫌いっぽいミス・マープルのシリーズでも何冊か買おうかなと思ってたんだけど、今はこの変型のものしか手に入らないっぽい。そんなに読まないのでKindleで買うか。</p>

<p>あとBSで昔やってた名探偵ポワロのTVドラマのDVDが欲しくなった。あの髭むしりたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>MessageFormat</title>
      <link>http://hail2u.net/blog/coding/messageformat.html</link>
      <description>Pluralization for JavaScriptという名詞の複数形についての記事を読んで、MessageFormatという仕組みがあることを初めて知った。複数形や三単現、性別による言葉遣いの違いなどを言語ごとに定義しておき、出力する際にその定義を利用して自然な結果になるようにする仕組みのようだ。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/messageformat.html</guid>
      <pubDate>Mon, 23 Mar 2015 09:14:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://alistapart.com/article/pluralization-for-javascript">Pluralization for JavaScript</a>という名詞の複数形についての記事を読んで、<a href="http://userguide.icu-project.org/formatparse/messages">MessageFormat</a>という仕組みがあることを初めて知った。複数形や三単現、性別による言葉遣いの違いなどを言語ごとに定義しておき、出力する際にその定義を利用して自然な結果になるようにする仕組みのようだ。</p>

<p>MessageFormatの仕組み自体もわかりやすくて良かったが、記事に書かれているようにちょっとしたローカライズにおいても威力を発揮しそうなのが良さそうに思えた。昨今のウェブサイトやウェブアプリにおいては、完全な国際化やローカライズよりも重要なUIパーツの正確なローカライズがまず必要になっているので、そういう小さなところから使える仕組みであるMessageFormatはポイントが高いだろう。国際化はともかく、完全なローカライズくらいまではスケールすると思えるので、規模によっては使えないということもないはずだ。</p>

<p>日本で日本人として開発者っぽい何かをやっていると、和訳はともかくローカライズにほとんど興味を持てなくなってくる。日本語に直して理解するか、英語に直して公開するかのどちらかで気力が尽きるからだ。けれどこういったロジカルでシンプルな仕組みなら、とりあえず導入してL10nを見据えてみようかという気になるのかもしれない。<a href="http://formatjs.io/">Node.jsやHandlebars.jsに組み込んで使えるライブラリー</a>もあるようだし、ログ出力などローカライズとはあまり関係のないところからまずは使ってみたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>Media Queries Level 4におけるキーワード周囲の空白文字</title>
      <link>http://hail2u.net/blog/webdesign/surrounding-white-spaces-of-keywords-on-mediaqueries-4.html</link>
      <description>Media Queries Level 4の2014/06/05付けのWDでは、メディア特性を構成するための)や(とnotやand、orの間にひとつ以上の空白文字が必須になった。この変化が気になるのはCSS最小化ツールを作っている人くらいか。通常は半角空白なり改行なりを挟んで書いているだろうと思われるので、気にする必要はなさそうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/surrounding-white-spaces-of-keywords-on-mediaqueries-4.html</guid>
      <pubDate>Sun, 22 Mar 2015 14:22:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/">Media Queries Level 4の2014/06/05付けのWD</a>では、メディア特性を構成するための<code>)</code>や<code>(</code>と<code>not</code>や<code>and</code>、<code>or</code>の間にひとつ以上の空白文字が必須になった。この変化が気になるのはCSS最小化ツールを作っている人くらいか。通常は半角空白なり改行なりを挟んで書いているだろうと思われるので、気にする必要はなさそうだ。</p>

<p><a href="http://www.w3.org/TR/css3-mediaqueries/">Level 3</a>までは閉じ括弧とキーワードの間は空白文字は不要だった。</p>

<pre><code>@media (min-width: 100px)and (min-height: 100px) {}
</code></pre>

<p>このように<code>)</code>と<code>and</code>キーワードの間に空白文字がなくても良く、バリデーターも実装も許可してくれる。Level 4からは空白文字が必須になる。</p>

<pre><code>@media (min-width: 100px)<mark> </mark>and (min-height: 100px) {}
</code></pre>

<p>このように<code>and</code>キーワードの<em>前</em>にも空白文字を入れる。元々<code>and</code>キーワードの<em>後</em>の空白はCSSにおける関数の表記法との兼ね合いのために許可されていない。</p>

<figure>

<blockquote>

<p>Whitespace must be present between a &#39;)&#39; character and a ‘not’, ‘and’, or ‘or’ keyword, and between a ‘not’, ‘and’, or ‘or’ keyword and a &#39;(&#39; character.</p>
</blockquote>

<figcaption>— <cite><a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/#mq-syntax">3 Syntax</a></cite></figcaption>
</figure>

<p>仕様でもこのように明記されている。Level 3での曖昧さ(<q>having no space between ‘and’ and the expression is not allowed</q>)を排除したと考えると良さそうだ。</p>

<hr>

<p>CSSWringでは<a href="https://github.com/hail2u/node-csswring/commit/6c0e587c860165dc5d5b09b48c4b44e2ba64760e">特別扱いしていたのをしないように</a>して対応した。</p>]]></content:encoded>
    </item>

    <item>
      <title>麻のシーツ</title>
      <link>http://hail2u.net/blog/gadget/hemp-bed-sheet.html</link>
      <description>ついに麻のシーツを買った。といっても高級なものではなくて、無印良品の麻平織だけど。夏に向けてピッタリかなと、良品週間中ということで買った。そんなにすごく厚手というわけではないので、耐久性はちょっと不安だけど、麻なりの丈夫さだといいな。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/hemp-bed-sheet.html</guid>
      <pubDate>Sat, 21 Mar 2015 04:47:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/hemp-bed-sheet.jpg"><img alt="無印良品の麻平織ボックスシーツ・オフホワイト" src="/images/blog/hemp-bed-sheet.jpg"></a>
</figure>

<p>ついに麻のシーツを買った。といっても高級なものではなくて、<a href="http://www.muji.net/store/cmdty/detail/4548718199686">無印良品の麻平織</a>だけど。夏に向けてピッタリかなと、良品週間中ということで買った。そんなにすごく厚手というわけではないので、耐久性はちょっと不安だけど、麻なりの丈夫さだといいな。</p>

<p>麻のベッドリネン類は年間通して使えるけれど、冬は毛布を敷いたり掛けたりという工夫は必要みたいだ。今は<a href="/blog/misc/laying-out-the-blanket.html">そういう運用</a>になったので、あまり問題はなさそう。夏はきっと肌離れ的な点で今まで使っていた天竺綿のシーツよりも快適なはず。楽しみ。</p>

<p>買ったばかりというのもあるけど、すごく心地よい。永遠に寝れそう。枕カバーも変えたい気がしてきた。</p>]]></content:encoded>
    </item>

    <item>
      <title>max-widthを否定するクエリー</title>
      <link>http://hail2u.net/blog/webdesign/negation-of-max-width-query.html</link>
      <description>モバイル・ファーストが浸透して久しくなり、めっきりmin-widthクエリー以外を見かけることはなくなった。そんな中、not (max-width: 768px)という書き方を見かけて、なるほどなと思った。現状のブラウザーにおける実装(と安定した仕様)では768pxを含まずそれより大きいという表現がmin-widthでは書くことができないが、notキーワードとmax-widthを組み合わせることで実現できる。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/negation-of-max-width-query.html</guid>
      <pubDate>Fri, 20 Mar 2015 07:34:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>モバイル・ファーストが浸透して久しくなり、めっきり<code>min-width</code>クエリー以外を見かけることはなくなった。そんな中、<code>not (max-width: 768px)</code>という書き方を見かけて、なるほどなと思った。現状のブラウザーにおける実装(と安定した仕様)では<em><code>768px</code>を含まずそれより大きい</em>という表現が<code>min-width</code>では書くことができないが、<code>not</code>キーワードと<code>max-width</code>を組み合わせることで実現できる。</p>

<p>View Demo: <a href="/pub/test/616.html">Negation of max-width query</a></p>

<p>特定のデバイスや解像度を強く意識したクエリーの是非はとりあえず脇へ置いておいて、iPhone 5s以下やらiPad Airやら一般的なノートブックやらを意識してクエリーを書くことはままある。多くの場合はそれら特定のデバイスのサイズ<em>から</em>を区切りにしてクエリーを書くわけだが、それらのサイズ<em>まで</em>で書くとなると少し曖昧な記述になる。</p>

<pre><code>@media (min-width: 321px) {}
@media (min-width: 769px) {}
@media (min-width: 1025px) {}
</code></pre>

<p>つまりこのように<code>1px</code>足した値を使ってクエリーを書くわけだ。慣れればわかるとは言え微妙な感じは否定できない。</p>

<pre><code>@media not all and (max-width: 320px) {}
@media not all and (max-width: 768px) {}
@media not all and (max-width: 1024px) {}
</code></pre>

<p><code>not</code>キーワードと<code>min-width</code>と対になる<code>max-width</code>を組み合わせると、このようにも書けることになる。<code>all</code>などのメディア・タイプと共に指定してやる必要があり、<code>width</code>や<code>resolution</code>などといった具体的なメディア特性だけを否定することは出来ない……らしいが特に<a href="http://www.w3.org/TR/css3-mediaqueries/">Level 3仕様</a>でも<a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/">2014/06/05のLevel 4仕様のWorking Draft</a>でも触れられていない。CSS 2.1仕様との後方互換性のためそういう実装になっているのかもしれない。</p>

<hr>

<p>Media Queries Level 4 (Public Wrking Draft, 5 June 2014)では<code>width</code>クエリー他で<a href="http://www.w3.org/TR/2014/WD-mediaqueries-4-20140605/#mq-ranges">範囲指定</a>が可能になる予定で、それと同時により下・以下・以上・より上を区別して書くことができるようになる。この実装が広まるまでは<code>not</code>キーワードを利用して表現してやるというのも窮余の一策としてはまずまずなものだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>フレッツ光メンバーズクラブのポイントプログラム</title>
      <link>http://hail2u.net/blog/internet/flets-hikari-members-club-point-program.html</link>
      <description>フレッツ光では利用期間に応じて毎月ポイントが与えられる。そのポイントはメンバーズクラブのポイントプログラムで利用できる。僕はしばらく貯めたら使い勝手の良いiTunesギフトカードへ交換していたが、それができなくなった……どころかあらゆるギフト券や電子マネーへの交換が終了した。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/flets-hikari-members-club-point-program.html</guid>
      <pubDate>Thu, 19 Mar 2015 03:53:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://flets.com/">フレッツ光</a>では利用期間に応じて毎月ポイントが与えられる。そのポイントはメンバーズクラブの<a href="https://members-club.flets.com/pub/pages/pointmenu/">ポイントプログラム</a>で利用できる。僕はしばらく貯めたら使い勝手の良いiTunesギフトカードへ交換していたが、それができなくなった……どころかあらゆるギフト券や電子マネーへの交換が終了した。</p>

<p>残った交換先はどれもこれも魅力的ではない。強いて挙げるならクックパッドのプレミアムサービスのようなインターネット・サービスの支払いに当てるものくらいだ。それも利用している人だけだろう。事実上、フレッツ光の支払いに利用するしかなくなったと言える。</p>

<p>交換先が絞られると、それだけ死蔵されるポイントが増えることだろう。それはそのまま負債でもあるが、失効すれば帳消しになる。電子マネーなどへの交換を停止した理由は、繰り返されるハッキングによりポイントが盗まれる被害が続いたからというのが主なものだと信じたいが、そういったポイントの失効にも期待しているように勘ぐってしまう。</p>

<p>フレッツ光メンバーズクラブのポイントプログラムは事実上崩壊したと言っても良さそうだ。</p>

<hr>

<p>フレッツ光への支払いへ当てること自体は特にどうとも思わないが、とにかく作業が面倒くさいので、自動的に支払いに使うオプションを新設して欲しい。</p>]]></content:encoded>
    </item>

    <item>
      <title>クリティカルCSSの動的なインライン化</title>
      <link>http://hail2u.net/blog/webdesign/inlining-critical-css-dynamically.html</link>
      <description>Inlining critical CSS for first-time visitsという、クリティカルCSSを初回訪問時のみインラインに展開して、その後はインライン化せず予めキャッシュさせておいたフルセットのCSSを使うというアイディアについての記事を読んだ。実装はともかく、アイディアとして成立していないんじゃないかと思う。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/inlining-critical-css-dynamically.html</guid>
      <pubDate>Wed, 18 Mar 2015 06:34:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://adactio.com/journal/8504">Inlining critical CSS for first-time visits</a>という、クリティカルCSSを初回訪問時のみインラインに展開して、その後はインライン化せず予めキャッシュさせておいたフルセットのCSSを使うというアイディアについての記事を読んだ。実装はともかく、アイディアとして成立していないんじゃないかと思う。</p>

<p>クリティカルCSSをインライン化することのメリットは既に多くのウェブサイトでも取り上げられており、もちろんネタ元のGoogle PageSpeedでも<a href="https://developers.google.com/speed/docs/insights/PrioritizeVisibleContent#structure">項</a>が割かれている。ここでは特に触れないが、描画領域の大きさにかかわらず初期描画の高速化には大きなメリットがあるとは言えるだろう。上記リンク先の記事ではそれを動的に行うことで、2度目以降の訪問の時にはキャッシュ済みであるフルセットのCSSを使わせるようにし、効率的なキャッシュ運用と保守性を実現する実装について解説されている。</p>

<p>常にクリティカルCSSをインライン化している場合、1度目の訪問では以下のリソースがリクエストされる。</p>

<ol>
<li>インライン化されたクリティカルCSSを含むHTML (非キャッシュ)</li>
<li>クリティカルCSSを含まないCSS (非キャッシュ)</li>
</ol>

<p>そして2度目の訪問では以下のリソースがリクエストされる。</p>

<ol>
<li>インライン化されたクリティカルCSSを含むHTML (キャッシュ)</li>
<li>クリティカルCSSを含まないCSS (キャッシュ)</li>
</ol>

<p>対して記事の実装においては1度目の訪問の時は以下のリソースがリクエストされる。</p>

<ol>
<li>インライン化されたクリティカルCSSを含むHTML (非キャッシュ)</li>
<li>完全なCSS (非キャッシュ)</li>
</ol>

<p>そして2度目の訪問では以下のリソースがリクエストされる。</p>

<ol>
<li>HTML (<em>非キャッシュ</em>)</li>
<li>完全なCSS (キャッシュ)</li>
</ol>

<p>つまり記事の実装だと、2度目の訪問時にHTMLのキャッシュが効かない。その上、フルセットのCSSを読み込むのでそのパース時間も改善しない。インライン化しない場合と比べると、HTMLのキャッシュが効かないので<em>ページ読み込み時間は遅くなる</em>(3度目以降には追いつく)だろう。静的にインライン化する場合と比べても、CSSのパースに時間がかかるため<em>初期描画までの時間が遅くなる</em>(3度目以降も悪化したまま)。</p>

<p>保守性という点では多少見るべき点はあるが、同じようなアプローチを使ってタスク・ランナー経由で静的にHTMLをビルドした方が効率的だろう。CDNのようなシステムとの相性も考えると静的なHTML生成の方に軍配が上がる。</p>

<hr>

<p>クリティカルCSSのインライン化についてはまだ歴史が浅く、その目的と効果がはっきりと伝わっていないような印象を受ける。この技術の目的はページの読み込み時間の改善ではなく、むしろそれを悪化させてでもとにかく初期描画までの時間を短くすること、これくらいにとらえておくと良いのではないだろうか。そしてその最適化はその目的を崩さずに行われるべきなので、自然とクリティカルCSSを小さくするようなデザインへと帰結することになる。</p>

<p>僕があまりクリティカルCSSのインライン化に興味を持てないのは、ウェブサイトのデザインに大きな影響を与えすぎる点だ。インライン化を効果的に行うためには初期描画領域のビジュアル・デザインをとにかく必要最低限までに絞る必要がある。そのことは他のビジュアル・デザインとの兼ね合いという点でも情報設計という点でもウェブサイトのデザインに大きな影響を与えることだろう。ひとつの指標ではあって良いとは思うが、その性質上プライオリティーが高くなりやすく、他の指標を否定してしまいやすいと感じている。</p>]]></content:encoded>
    </item>

    <item>
      <title>CtrlPとGitのls-filesサブコマンド</title>
      <link>http://hail2u.net/blog/software/ctrlp-and-git-ls-files.html</link>
      <description>CtrlPのヘルプのカスタム・コマンドの項に記載があるように、Gitのls-filesサブコマンドを使ったカスタム・コマンドを定義すると、.gitignoreを考慮してファイルをリストアップすることができる。ただ常にこちらである必要はないので、Git管理下だけでそうなるようにしたい。その場合、ラッパー関数を作成して、その中でb:ctrlp_user_commandを設定してやると良さそうだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/ctrlp-and-git-ls-files.html</guid>
      <pubDate>Tue, 17 Mar 2015 07:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/ctrlpvim/ctrlp.vim/blob/51888616a29eeddc933d8ec0596bd13e83231b90/doc/ctrlp.txt#L295-L361">CtrlPのヘルプのカスタム・コマンドの項</a>に記載があるように、Gitの<code>ls-files</code>サブコマンドを使ったカスタム・コマンドを定義すると、<code>.gitignore</code>を考慮してファイルをリストアップすることができる。ただ常にこちらである必要はないので、Git管理下だけでそうなるようにしたい。その場合、ラッパー関数を作成して、その中で<code>b:ctrlp_user_command</code>を設定してやると良さそうだ。</p>

<p><a href="/blog/software/call-ctrlp-vim-based-on-git-status.html">Git配下のファイルかどうかでCtrlPを切り替える</a>で作成した関数を元にして、<code>v:shell_error</code>が<code>0</code>の時も特別視してやるようにすることで実装した。カスタム・コマンドはヘルプのまま、Gitリポジトリーのルートへ移動して<code>ls-files</code>サブコマンドを呼んでいる。</p>

<pre><code>nnoremap &lt;Leader&gt;f :call &lt;SID&gt;CallCtrlPBasedOnGitStatus()&lt;Return&gt;

function! s:CallCtrlPBasedOnGitStatus()
  if exists(&#39;b:ctrlp_user_command&#39;)
    unlet b:ctrlp_user_command
  endif

  let s:git_status = system(&#39;git rev-parse --is-inside-git-dir&#39;)

  if v:shell_error == 0
    let b:ctrlp_user_command = [&#39;.git&#39;, &#39;cd %s &amp;&amp; git ls-files&#39;]
    execute &#39;CtrlP&#39;
  elseif v:shell_error == 128
    execute &#39;CtrlPCurFile&#39;
  else
    execute &#39;CtrlP&#39;
  endif
endfunction
</code></pre>

<p>まずバッファー・ローカルの変数にカスタム・コマンドの設定があったら削除しておく。そうしないと変数の型の問題で、定義を上書き出来なかったりすることがあるからだ。</p>

<p>その後、Gitの<code>rev-parse</code>サブコマンドを<code>--is-inside-git-dir</code>オプションを指定して呼ぶことで、カレント・ディレクトリーがGit管理下かどうかをチェックする。一応標準出力は拾っておくが、判断は終了コードのみで行う。</p>

<p>終了コードが<code>0</code>の場合は<code>ls-files</code>サブコマンドを呼ぶようにバッファー・ローカルの変数を設定してやり、普通にCtrlPを呼ぶ。<code>128</code>は管理下でなかった場合なので、その時は編集中のファイルのディレクトリーを使ってCtrlPを呼ぶように<code>CtrlPCurFile</code>を呼ぶ。変な終了コードが返ってきた場合のフォールバックとして、カスタム・コマンドを設定せずにCtrlPを呼ぶようにもしておいた。</p>

<p>うまく動いている気がする。autocommandを使ってバッファーを読み込んだ時に<code>b:ctrlp_user_command</code>を設定しても良さそうだったが、バッファー開く度にGitが呼ばれるのはちょっとコストが高い。なのでCtrlPを呼ぼうとした時にフックするように作った。CtrlPをつかう頻度によってはautocommandの方が効率的かもしれない。</p>

<hr>

<p>ただし、WindowsのVimで<code>set shell=sh</code>かつ<code>set shellslash</code>している場合、CtrlPが<a href="https://github.com/ctrlpvim/ctrlp.vim/blob/51888616a29eeddc933d8ec0596bd13e83231b90/autoload/ctrlp.vim#L405">カスタム・コマンドを呼ぶ時</a>にカレント・ディレクトリーのパス情報をバックスラッシュに変換してしまうためうまく動かない。CtrlPの修正が必要になるようだ。僕はとりあえず<code>autoload/ctrlp.vim</code>の405行目をコメントアウトして凌いでみている。</p>

<hr>

<p>コマンドの短縮形ばかりで書かれているVimスクリプト読みづらいな。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSS MQPackerの行うソート</title>
      <link>http://hail2u.net/blog/webdesign/sorting-on-csmqpacker.html</link>
      <description>CSS MQPackerに加わったソート機能は完全なものではない。完全なものを実現するのが難しいこともあるが、必要とされていないからでもある。メインはmin-widthクエリーに絞り、それ以上は自前で用意してもらうというのは妥協であると同時に、僕の能力の限界でもある。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/sorting-on-csmqpacker.html</guid>
      <pubDate>Mon, 16 Mar 2015 04:04:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/hail2u/node-css-mqpacker">CSS MQPacker</a>に加わったソート機能は完全なものではない。完全なものを実現するのが難しいこともあるが、必要とされていないからでもある。メインは<code>min-width</code>クエリーに絞り、それ以上は自前で用意してもらうというのは妥協であると同時に、僕の能力の限界でもある。</p>

<p>メディア・クエリーにおいて<code>min-width</code>クエリーは以下のいずれかの書かれ方をする。</p>

<ol>
<li><code>(min-width: 100px)</code></li>
<li><code>(min-width: 100em)</code></li>
<li><code>(min-width: 100px) and (min-width: 200px)</code></li>
<li><code>not (min-width: 100px)</code></li>
<li><code>print and (min-width: 100px)</code></li>
<li><code>print, (min-width: 100px)</code></li>
</ol>

<p>CSS MQPackerのソート機能はこれらすべてを対象にするわけではない。</p>

<h2>シンプルなもの</h2>

<p>もちろん<code>min-width</code>クエリーのみのものは対象になる。この種類のクエリーには<code>screen</code>など主要なメディア・タイプを含むこともある。後述するが特別に無視されるのは<code>print</code>と同時に指定された場合だけだ。</p>

<p>単一の<code>min-width</code>クエリーが<code>px</code>単位を使って書かれている場合には話は単純で、それらの値を取り出して昇順にソートする。世の7割近くのメディア・クエリーはこれでカバーできるのではないかと思われる。</p>

<h2>単位の違い</h2>

<p><code>px</code>単位以外で書かれることももちろんあるし、混ざることもある……かもしれない(このウェブサイトでは混ざっている)。単位の違いは完全に吸収することは出来ない。CSS 2.1の時代からそうだが、CSSのみでは異なる単位間の完全な変換は行えないからだ。<code>v*</code>単位はもちろん、<code>pt</code>や<code>pc</code>も無理がある。それら対応していない単位を使っている場合には、例え<code>min-width</code>クエリーであってもソートの対象には含まれない。</p>

<ol>
<li><code>ch</code></li>
<li><code>em</code></li>
<li><code>ex</code></li>
<li><code>px</code></li>
<li><code>rem</code></li>
</ol>

<p>ソート対象に含まれる単位は以上の5つになる。これらの単位を<code>px</code>単位に変化した上で昇順にソートするというわけだ。<code>em</code>と<code>rem</code>は<code>16px</code>を基準に、<code>ch</code>と<code>ex</code>に関しては初期フォントをArialのNormalと仮定して変換している。</p>

<h2>複数のmin-width</h2>

<p>本当は意味が無いのだが、クエリーには<code>and</code>キーワードを使って複数の<code>min-width</code>クエリーが含まれることもあるかもしれない。<code>min-width</code>クエリーの場合、複数指定されるとその最も<em>大きい</em>値で発動することになる(<code>and</code>は論理積だからだ)。</p>

<p>そのため、複数の<code>min-width</code>クエリーが見つかった場合は、その中で最大の値を取り出し、それのみを使ってソートを行うことになる。</p>

<h2>否定のクエリー</h2>

<p>メディア・クエリーでは<code>not</code>キーワードを使ってそのクエリーを否定することができる。<code>min-width</code>クエリーの場合は<code>max-width</code>クエリーとほぼ同じような扱いになると考えて良いだろう。</p>

<p>これらはソートに含める必要はないので、無視する。</p>

<h2>printメディア・タイプ</h2>

<p>印刷向けスタイルシートはそれなりに需要が増えてきた。今はPDFで印刷するなども手軽に行えるようになったので、そこそこ提供しているウェブサイトも増えてきた印象だ。もちろん<code>min-width</code>クエリーと組み合わさって、用紙の大きさによって調整を行うこともあるだろう。</p>

<p>多くの場合はスクリーン向けと印刷向けのCSSを混ぜて書くことはないと思われるため、これも無視する。本当は<code>print</code>メディア・タイプを含むクエリーを特別扱いしてやると良いのだろうが、まだそこまでの需要はないだろう。</p>

<h2>クエリー・リスト</h2>

<p>メディア・クエリーでは複数のクエリーをリストにして指定することもできる。その場合、カンマ区切りで指定してやることになる。このカンマは論理和になるORと同じ意味を持つので、カンマで区切られたクエリーのいずれかにこれまでのルールに従い対象とするクエリーがあった場合、ソートされる。</p>

<p>例え他に<code>print</code>メディア・タイプを含むクエリーがあったとしても、だ。</p>

<hr>

<p>CSS MQPackerではこのようにしてソートの対象を選び出し、それらのみをソートする。対象ではない他のクエリーは、元のCSSファイルでの出現順を維持してまとめられる。また、ソートされたクエリーは他のクエリーの<em>前に</em>配置されるので、印刷向けCSSが意図せず前に来てしまうなどということは起こらない。</p>

<p>概ねうまく動作していることと思われる。バグはもちろん、対象を広げて欲しいなどといった要望は是非イシューを立てて欲しい。</p>

<hr>

<p>そのうち英語でリポジトリーのWikiにちゃんと書きたい。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
