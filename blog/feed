<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Mon, 5 Jan 2015 05:46:54 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>HTMLHintをSyntasticで使う</title>
      <link>http://hail2u.net/blog/software/htmlhint-in-syntastic.html</link>
      <description>重い腰を上げてVimでSyntasticを使うようにした。となるとHTMLHintを使いたいのだけど、対応してなかったので自分でチェッカー定義を書くところから始めた。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/htmlhint-in-syntastic.html</guid>
      <pubDate>Sun, 04 Jan 2015 08:58:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>重い腰を上げてVimで<a href="https://github.com/scrooloose/syntastic">Syntastic</a>を使うようにした。となると<a href="https://github.com/yaniswang/HTMLHint">HTMLHint</a>を使いたいのだけど、対応してなかったので自分でチェッカー定義を書くところから始めた。</p>

<figure>
  <img src="http://hail2u.net/images/blog/htmlhint-in-syntastic.png" alt="HTMLHintでのチェックの結果がガッターとバルーンヘルプで表示されている">

  <figcaption>Runnnig HTMLHint with Syntastic</figcaption>
</figure>

<p>今のところ<a href="https://github.com/scrooloose/syntastic/pull/1280">チェッカー定義を追加したプルリクエスト</a>が取り込まれる気配はない。</p>

<hr>

<p>Syntasticはそのままだと辛いことが多い気がする。汎用にした弊害か。CSSLintはルールをカスタマイズしづらいし、perlcriticはWindowsで死ぬ。そういったものをひとつひとつ潰すのは難しいし、好みの設定をできるようにすると保守できなくなる。適当なディレクトリーに置いたチェッカー定義を自動で読み込んでくれる(ビルトインのそれとバッティングしたら上書きしてくれる)機能などがあれば良いような気がした。ありそう。</p>

<h2>追記</h2>

<p>他のところにあるチェッカー定義は<a href="https://github.com/scrooloose/syntastic/wiki/Syntax-Checker-Guide#6-external-checkers">external checkers</a>という仕組みで実現できるようだ。こっちでやってみよう。</p>]]></content:encoded>
    </item>

    <item>
      <title>天空のドラゴン</title>
      <link>http://hail2u.net/blog/misc/dragon-in-the-sky.html</link>
      <description>おせちの残りを片付けた後、だらだら散歩しつつ、初売りをちょっと覗いたら人がたくさんいた。この街はいつのまにか正月に人が集まる側になったんだなと思った。特に買うものもないかなと思ってたが、惣菜屋の福袋を買った。その帰り道に空を見上げたらドラゴンが飛んでいるように見えた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dragon-in-the-sky.html</guid>
      <pubDate>Sat, 03 Jan 2015 07:17:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="浮かぶ雲がまるでドラゴンのような形に見える" src="http://hail2u.net/images/blog/dragon-in-the-sky.jpg">
</figure>

<p>おせちの残りを片付けた後、だらだら散歩しつつ、初売りをちょっと覗いたら人がたくさんいた。この街はいつのまにか正月に人が集まる側になったんだなと思った。特に買うものもないかなと思ってたが、惣菜屋の福袋を買った。その帰り道に空を見上げたらドラゴンが飛んでいるように見えた。</p>

<p>天空でも花嫁の方はやり残したことははぐれメタルを仲間にすることくらい。モンスターブローチの威力すごい。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150102.html</link>
      <description>去年割りと高い金払って買ったセーターの袖に毛玉が大量に出来ていた。ひとつひとつ取っていったら袖丈が半分くらいになった。しょうがないので長袖Tシャツの袖を切ってホッチキスで止めたところで、これじゃきちんと止まらないので洋裁屋でジッパーとか買ってこないと、とか考えたところで終わり。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150102.html</guid>
      <pubDate>Fri, 02 Jan 2015 04:40:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>去年割りと高い金払って買ったセーターの袖に毛玉が大量に出来ていた。ひとつひとつ取っていったら袖丈が半分くらいになった。しょうがないので長袖Tシャツの袖を切ってホッチキスで止めたところで、これじゃきちんと止まらないので洋裁屋でジッパーとか買ってこないと、とか考えたところで終わり。</p>

<p>買って気に入ったものがめちゃくちゃになる夢をよく見るようになった気がする。気がするというのはちゃんと覚えてないから。ブーツを買った後にもものすごい悪天候かなんかでブーツが濡れて溶けてなくなるみたいなのを見た気がする。夢の中でも大事にしたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>GitHub互換の見出しID</title>
      <link>http://hail2u.net/blog/coding/github-compatible-header-id.html</link>
      <description>gfmtoc (mdtocから名前を変えた)を作っている時にGitHub flavored Markdown (本当はHTML Pipeline)互換の見出しIDをNode.jsで生成する方法を考えていた。GitHubではRubyでサポートされているPOSIX文字クラスをユニコードへ対応させた\p{Word}を使っているので、それを作ればあとは簡単なようだ。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/github-compatible-header-id.html</guid>
      <pubDate>Thu, 01 Jan 2015 06:07:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/hail2u/node-gfmtoc">gfmtoc (mdtocから名前を変えた)</a>を作っている時にGitHub flavored Markdown (本当は<a href="https://github.com/jch/html-pipeline/">HTML Pipeline</a>)互換の見出しIDをNode.jsで生成する方法を考えていた。GitHubではRubyでサポートされているPOSIX文字クラスをユニコードへ対応させた<code>\p{Word}</code>を使っているので、それを作ればあとは簡単なようだ。</p>

<p><a href=https://github.com/ruby/ruby/blob/1026907467ea3d5441e1bfa95f5f37b431a684f3/doc/regexp.rdoc#character-properties">Rubyのソースコードにある正規表現のドキュメント</a>によると、以下のユニコード文字プロパティーのカテゴリーを組み合わせたものが<code>\p{Word}</code>ということのようだ。</p>

<ul>
<li><code>\p{L}</code>: Letter</li>
<li><code>\p{M}</code>: Mark</li>
<li><code>\p{N}</code>: Number</li>
<li><code>\p{Pc}</code>: Connector_Punctuation</li>
</ul>

<p>つまりこれらを連結した正規表現パターンを作れば良い。まともにやったら日が暮れるので、Node.jsでは<a href="https://www.npmjs.com/package/unicode-7.0.0">unicode-7.0.0</a>と<a href="https://www.npmjs.com/package/regenerate">regenerate</a>の両パッケージを使って生成してやる。</p>

<pre><code>var regenerate = require(&#39;regenerate&#39;);

var word = regenerate().add(
  require(&#39;unicode-7.0.0/<mark>properties/Any</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/L</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/M</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/N</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/Pc</mark>/code-points&#39;)
).remove(
  &#39;-&#39;,
  &#39; &#39;
);

console.log(word.toString());
</code></pre>

<p>ここでは否定形が欲しいので、Anyプロパティーを<code>add()</code>してから上記カテゴリーを<code>remove()</code>していく。最終的には特別視される<code>-</code>と<code> </code>もここでついでに削除しておく。gfmtocでは<a href="https://github.com/hail2u/node-gfmtoc/blob/master/lib/regexp-word.js">生成結果をファイルに保存したもの</a>をライブラリとして使っている。普通はそのまま書けば良い(毎回動的に生成させるととても遅いことには注意が必要)。あとはHTML Pipelineがやっていることをなぞるのみだ。</p>

<ol>
<li>小文字に変換</li>
<li><code>\p{Word}</code>と<code>-</code>、<code> </code> (半角空白)以外を削除</li>
<li>半角空白を<code>-</code>に置換</li>
<li>IDが被らないように数字を追加</li>
</ol>

<p>HTML Pipelineではこのような<a href="https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb">生成手順</a>になっているようだ。</p>

<pre><code>var h = {};

function genID(s, h) {
  var u = &#39;&#39;;
  var word = /.../g;
  s = s.toLowerCase();
  s = s.replace(word, &#39;&#39;);
  s = s.replace(/ /g, &#39;-&#39;);

  if (h[s] &gt; 0) {
    u = &#39;-&#39; + h[s];
  }

  if (!h[s]) {
    h[s] = 0;
  }

  h[s] += 1;

  return s + u;
}
</code></pre>

<p>確認した限りではうまくいっているようだ。<code>id</code>属性の値として使う場合はこのままで問題ないが、<code>href</code>属性の値として使う場合は<code>encodeURIComponent()</code>でURLエンコードしてやることを忘れない方が良い……ような気がするけど、最近のブラウザーはカシコイのでどっちでも良さそう。</p>]]></content:encoded>
    </item>

    <item>
      <title>はんぺんだて巻き</title>
      <link>http://hail2u.net/blog/misc/hanpen-datemaki.html</link>
      <description>だて巻き苦手とか言うと大人っぽいけど、そんなことは特になくおせちの中で好きなもののひとつ。だけどペッタペタに甘いのもさすがに辛くなってきたので、今年は作ってみるかと調べたり聞いたりしたところ、はんぺんで作ると楽でおいしいという話だった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/hanpen-datemaki.html</guid>
      <pubDate>Wed, 31 Dec 2014 04:53:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>だて巻き苦手とか言うと大人っぽいけど、そんなことは特になくおせちの中で好きなもののひとつ。だけどペッタペタに甘いのもさすがに辛くなってきたので、今年は作ってみるかと調べたり聞いたりしたところ、はんぺんで作ると楽でおいしいという話だった。</p>

<p>試しに<a href="http://www.kyounoryouri.jp/recipe/3275_%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%A0%E3%81%A6%E5%B7%BB%E3%81%8D.html">きょうの料理のスピードだて巻き</a>をそのままで作ったら5mmくらいのペラッペラのしか焼けなかったので、本番では倍の量にしてやったらうまく3cm近くまでなった。</p>

<table>
<thead>
<tr>
<th>材料</th>
<th style="text-align:right">分量</th>
</tr>
</thead>
<tbody>
<tr>
<td>はんぺん</td>
<td style="text-align:right">110g</td>
</tr>
<tr>
<td>卵</td>
<td style="text-align:right">4個</td>
</tr>
<tr>
<td>砂糖</td>
<td style="text-align:right">大さじ2</td>
</tr>
<tr>
<td>みりん</td>
<td style="text-align:right">大さじ1</td>
</tr>
</tbody>
</table>

<p>はんぺんは紀文の大判のものが一枚。これが塩分が多いような感じだったので塩は入れなかった。みりんも試しに作った時にきつかったような気がしたので、半分に。あとはひたすら<a href="http://www.amazon.co.jp/gp/product/B00ITGDH16/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00ITGDH16&amp;linkCode=as2&amp;tag=hail2unet-22">混ぜて</a>、型に入れ、180度に予熱したオーブンの下段で15分焼くだけ。焼き色がうまくつかなかったので、上段で仕上げれば良かったのかもしれない。</p>

<p>所要時間15分(+焼くのに15分)とは思えない手軽さとおいしさ。恵方巻きみたいに一本食いできそう。</p>]]></content:encoded>
    </item>

    <item>
      <title>HTML5における空の値の属性</title>
      <link>http://hail2u.net/blog/webdesign/html5-empty-value-attribute.html</link>
      <description>属性に空の値を指定する時は、例えばalt=&quot;&quot;などと書く。実は仕様のHTML文法にはもうひとつ書き方が用意されており、それはaltとのみ書くという形のものだ。確かにこう書けるし、真偽値を取る属性で属性のみ書く方法もこの文法規定がベースになっている。少し前に読んだalt属性の書き方ガイドといったような記事ではそのように触れられている。しかし僕は属性のみを書くのは真偽値を取る属性のみに限定した方が良いように考えている。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/html5-empty-value-attribute.html</guid>
      <pubDate>Tue, 30 Dec 2014 03:42:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>属性に空の値を指定する時は、例えば<code>alt=&quot;&quot;</code>などと書く。実は<a href="http://www.w3.org/TR/html5/syntax.html#attributes-0">仕様のHTML文法</a>にはもうひとつ書き方が用意されており、それは<code>alt</code>とのみ書くという形のものだ。確かにこう書けるし、<a href="http://www.w3.org/TR/html5/infrastructure.html#boolean-attributes">真偽値を取る属性</a>で属性のみ書く方法もこの文法規定がベースになっている。少し前に読んだ<a href="http://demosthenes.info/blog/969/The-Art-of-alt-Writing-Great-Descriptive-Text-For-Images"><code>alt</code>属性の書き方ガイドといったような記事</a>ではそのように触れられている。しかし僕は属性のみを書くのは真偽値を取る属性のみに限定した方が良いように考えている。</p>

<p>なぜなら空の値を指定する時に属性のみ書けば良いという文法を知る人が多分ほとんどいないだろうからだ。裏を返すと<code>checked=&quot;checked&quot;</code>を<code>checked</code>と略せるという誤解した知識で憶えた人が多いということで、実際僕もそうだった。確かに誤解なのだけど、もう広まりきってしまった誤解なので、それはそういうものとして触れない方が良いんじゃないかと思う。</p>

<p>そうでないと<code>alt</code>とのみ書けば良いという半端な知識から、まさかの<code>alt=&quot;alt&quot;</code>といった間違いに着地したりしてしまいそうだ。属性値のみを書くパターンは真偽値を取る属性のみに限り、それ以外では明示的に<code>&quot;&quot;</code>を指定してやるのがわかりやすい。仕様の誤解が修正されないという難点はあるけれども。</p>]]></content:encoded>
    </item>

    <item>
      <title>Drawic v2.8.0</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.8.0.html</link>
      <description>DrawicにFlickrやGoogle+、YouTube、PayPalのアイコンを追加してv2.8.0をリリースした。必要だったのはFlickrとGoogle+でそれ以外は数合わせ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.8.0.html</guid>
      <pubDate>Mon, 29 Dec 2014 05:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.github.io/drawic/"><img alt="Flickr Google+ PayPal YouTube" src="http://hail2u.net/images/blog/drawic-v2.8.0.png"></a>
</figure>

<p><a href="http://hail2u.github.io/drawic/">Drawic</a>にFlickrやGoogle+、YouTube、PayPalのアイコンを追加してv2.8.0をリリースした。必要だったのはFlickrとGoogle+でそれ以外は数合わせ。</p>

<hr>

<p>iPhoneで雑に撮った写真をDropboxに保存してたけれど、別に同期しなくてもいいようなものだなと思ったので、Instagramにでもしようかなと思ってた。でもInstagramでユーザー名が取れなかったので、Flickrを引っ張りだすことにした。Flickrアプリはインストールするためにストア切り替えたりとかするのが面倒だったけど、その後は快適に使えそうな感じがする。</p>]]></content:encoded>
    </item>

    <item>
      <title>“マークアップ”</title>
      <link>http://hail2u.net/blog/webdesign/mark-things-up.html</link>
      <description>クリスマスにTwitterで@glatyouと少しマークアップについてやりとりをした。そこではTwitterなのでだいぶ端折ったものの、だいたい伝わったとは思う。あわせて今年はHTML5勧告のタイミングだ。このようなマークアップについての考え方を述べるにはもってこいだろう。そこで僕の考えを文書としてまとめ、“マークアップ”するということ ～ HTML5勧告に寄せて ～というタイトルで公開した。この文書を持って今年のまとめとしたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/mark-things-up.html</guid>
      <pubDate>Sun, 28 Dec 2014 04:57:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>クリスマスにTwitterで<a href="https://twitter.com/glatyou">@glatyou</a>と少しマークアップについてやりとりをした。そこではTwitterなのでだいぶ端折ったものの、だいたい伝わったとは思う。あわせて今年はHTML5勧告のタイミングだ。このようなマークアップについての考え方を述べるにはもってこいだろう。そこで僕の考えを文書としてまとめ、<a href="http://hail2u.net/documents/markup.html">“マークアップ”するということ ～ HTML5勧告に寄せて ～</a>というタイトルで公開した。この文書を持って今年のまとめとしたい。</p>

<p>当該文書では、著作権表示という日本ではおよそ実践的でないものを例としたので、多少哲学的な側面が強い。他に良い例がうまく思いつかなかったのもあるし、元々のTwitterでのやりとりがそれだったのもある。他に例を考えるとするとトップニモドルのマークアップでも良かったかもしれない。</p>

<pre><code>&lt;footer&gt;
  &lt;nav&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#logo&quot;&gt;Back to Top&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;
&lt;/footer&gt;
</code></pre>

<p>このような間違いと冗長さが多分に含まれるが、ちょくちょく見かけるようなコードを起点にできる。</p>

<pre><code>&lt;footer&gt;&lt;a href=&quot;#top&quot;&gt;Back to Top&lt;/a&gt;&lt;/footer&gt;
</code></pre>

<p>そしてこう磨き上げるまでを書くのも悪くなかったかもしれない。思考の過程としてはほとんど同じなので、どうしてこうなるのかを考えてみるのも良いだろう。</p>

<p>本当は最後の項でテキトーに書かれたHTML文書が失ったものについてじっくりと書ければもっと完成度の高い文書になったことと思う。しかしそこまで書くとトピックが二分してしまいそうなことと、またその話かで終わってしまいそうな気がしたので、直接的な言葉すらも避けてぼかしておいた。アとかユとかUとかで始まる単語を想像してくれれば遠くないだろう。</p>

<p>このようなマークアップするための思考の元、<a href="https://github.com/hail2u/html-best-practices">HTML Best Practices</a>も参照するとわかりやすいはずだ。出す順が逆だともっと良かったような気がする。</p>

<hr>

<p>ここで予防線をいっぱい張っておきたいところだけれども、それはやめておく。もちろん僕は仕様側の人間ではないので、とか、あくまでも、とか、一般的には、とかいっぱい書きたい。</p>

<p>あ、<a href="http://www.w3.org/2014/10/html5-rec.html.ja">HTML5勧告</a>おめでとうございます。</p>]]></content:encoded>
    </item>

    <item>
      <title>ブラウザー・キャッシュの今</title>
      <link>http://hail2u.net/blog/webdesign/the-browser-cache-today.html</link>
      <description>元々「静的なファイルは限界までキャッシュしろ！」というような金言はそれほど重要視していなかった。The changing role of the browser cacheという記事では、開きっぱなしにされるタブと継続的デプロイをキーワードに、ブラウザー・キャッシュの役割が変化していることを解説している。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/the-browser-cache-today.html</guid>
      <pubDate>Sat, 27 Dec 2014 00:47:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>元々「静的なファイルは限界までキャッシュしろ！」というような金言はそれほど重要視していなかった。<a href="http://calendar.perfplanet.com/2014/the-changing-role-of-the-browser-cache/">The changing role of the browser cache</a>という記事では、開きっぱなしにされるタブと継続的デプロイをキーワードに、ブラウザー・キャッシュの役割が変化していることを解説している。</p>

<p>ブラウザー・キャッシュが再訪問に対して威力を発揮するのに対し、開きっぱなしにされるタブでは再訪問されることはなく、継続的デプロイされるアプリケーションではその効果は限定的なものにしかなりえない、という意見だ。納得の出来る意見ではある。</p>

<p>僕が元々こういった長期間のキャッシュに疑問を持っていたのも少し似ている。特に継続的デプロイの元では限定的な効果になることは自明だと考えていた。またいわゆる普通のウェブページにおいては再訪問という行為そのものが随分前から死滅したとも考えている。具体的にはソーシャル・ブックマークの普及後、一時的な消費に偏るようになってからそうなったと思っている。</p>

<p>一方で長期化のデメリットは迅速にキャッシュの更新が行き渡らないという点で明白だ。もちろんキャッシュをリフレッシュする、というか別に配信するテクニックがあり、それを採用するわけだけど、なんというか美しくない。デプロイされる間隔に対して適切なキャッシュ期限を試行錯誤する方が真っ当なんじゃないかという思いが強い。</p>

<p>ウェブのコンポーネント化が進むであろう今後は更に迅速なキャッシュの更新が求められるわけで、ブラウザー・キャッシュの長期化は忌避されていくようになるのかもしれない。</p>

<hr>

<p>今年から読み始めた<a href="http://calendar.perfplanet.com/">Performance Calendar</a>は過去ログもそれなりに面白そうなので、年末年始に読んでみようと思う。</p>]]></content:encoded>
    </item>

    <item>
      <title>スクロールバーの幅</title>
      <link>http://hail2u.net/blog/webdesign/scrollbar-width.html</link>
      <description>スクロールバーの幅を知りたいことはままある。CSSで拾えれば最高なのだけど……というところで、calc(100vw - 100%)で拾えることがわかった。ただこれで拾えるかどうかはその要素の親に依存するので、いつでもどこでも使えるわけではない。せめてJavaScriptでは扱えるようにしてみたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/scrollbar-width.html</guid>
      <pubDate>Fri, 26 Dec 2014 04:24:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>スクロールバーの幅を知りたいことはままある。CSSで拾えれば最高なのだけど……というところで、<code>calc(100vw - 100%)</code>で拾えることがわかった。ただこれで拾えるかどうかはその要素の親に依存するので、いつでもどこでも使えるわけではない。せめてJavaScriptでは扱えるようにしてみたい。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/604.html">Get Scrollbar Width with JavaScript</a></p>

<p>ボタンをクリックするとスクロールバーの幅がダイアログで表示される。オーバーレイのスクロールバーの場合は<code>0px</code>になり、そうでない場合はスクロールバーの幅が返る。<code>body</code>要素の幅が<code>100%</code>であることが条件になるが、まず大丈夫だろう。</p>

<p>仕組みは単純なもので<code>width</code>プロパティーを<code>calc(100vw - 100%)</code>にした要素を<code>body</code>要素の子に突っ込んで、計算済みスタイルを拾うというだけだ。<code>overflow</code>プロパティーを切り替え要素の幅を比べる古くからあるものと比べるとコードはわかりやすく短い。その半面、<code>vw</code>単位と<code>calc()</code>関数への対応が必要と敷居は少し高い。</p>

<hr>

<p>そのうち全てオーバーレイ・スクロールバーになりそうではあるので、その暁には無駄な知識になる。是非なってほしい。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
