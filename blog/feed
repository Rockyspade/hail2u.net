<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <copyright>Copyright &#x00a9; 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <lastBuildDate>Wed, 22 Oct 2014 03:32:56 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>POSSE: Publish Own Site, Syndicate Elsewhere</title>
      <link>http://hail2u.net/blog/internet/posse.html</link>
      <description>POSSEは「自分のとこで公開して、他のとこへ配信しよう！」というようなやり方。コンテンツの所有権や、サード・パーティーのサービスへの依存度、安定したURLとそれに伴うオリジナルの発見性の高さ、検索性などの点で利点があるとされている。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/posse.html</guid>
      <pubDate>Wed, 22 Oct 2014 03:32:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://indiewebcamp.com/POSSE"><img alt="Publish Own Site, Syndicate Elsewhere" src="http://hail2u.net/images/blog/posse.png"></a>
</figure>

<p><a href="http://indiewebcamp.com/POSSE">POSSE</a>は「自分のとこで公開して、他のとこへ配信しよう！」というようなやり方。コンテンツの所有権や、サード・パーティーのサービスへの依存度、安定したURLとそれに伴うオリジナルの発見性の高さ、検索性などの点で利点があるとされている。</p>

<p>大体のことはこのウェブサイトのドメインに集約してるので、一部はPOSSEと言って良さそう。ブックマークやTwitterでだらだら書いてるようなのは<a href="http://indiewebcamp.com/PESOS">PESOS</a>でやってることになるので、これもPOSSEにしたい。けどブックマークのタグやTwitterのリプライとかの扱いが面倒そうで、これで良いかという感じで妥協している。</p>]]></content:encoded>
    </item>

    <item>
      <title>Modularized Normalize.scssのテスト</title>
      <link>http://hail2u.net/blog/coding/testing-normalize-scss.html</link>
      <description>Normalize.cssがv3.0.2に更新されていたので、Modularized Normalize.scssも更新した。変更点はmenu要素の追加とIE10でのa要素の背景削除がbackground-colorプロパティーのみに変わったことで、大きな変化はない。で、追随したv3.0.2をリリース後、テストを少し書き換えた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/testing-normalize-scss.html</guid>
      <pubDate>Tue, 21 Oct 2014 04:10:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/necolas/normalize.css">Normalize.css</a>がv3.0.2に更新されていたので、<a href="https://github.com/hail2u/normalize.scss">Modularized Normalize.scss</a>も更新した。変更点は<code>menu</code>要素の追加とIE10での<code>a</code>要素の背景削除が<code>background-color</code>プロパティーのみに変わったことで、大きな変化はない。で、追随したv3.0.2をリリース後、テストを少し書き換えた。</p>

<p>Modularized Normalize.scssのテストは以下のような単純なものになっている。</p>

<ol>
  <li>最新版のNormalize.cssのリリース・ファイルをダウンロード</li>
  <li>Sassを使ってリポジトリーからビルド</li>
  <li>両者を圧縮</li>
  <li>文字列として比較</li>
</ol>

<p>これでオリジナルのリリース・ファイルとSassでビルドしたものがCSSとして一致するかを確認している。完全なものではないけど、きちんと動作するものをビルド可能かどうかは確認できる。</p>

<p>しかし、今までは圧縮する時にいわゆるバナー・コメント(ライセンスなどが書かれている消すべきではないコメント)を残していた。そのためバージョン番号をインクリメントしてからじゃないと、バージョン番号が一致せずテストが通らなかった。リリースを自動化しているのにも関わらず、手作業でバージョン番号を上げてからテストし、また戻すとかいう頭の悪い作業が必要だった。</p>

<p>よくよく考えたらテストの時だけコメントを全削除すれば良いだけなので、内部で使っている<code>grunt-contrib-cssmin</code>の<code>options</code>で<code>keepSpecialComments: 0</code>にして解決した。</p>

<pre><code>cssmin: {
  test: {
    options: {
      keepSpecialComments: 0,
    },

    expand: true,
    filter: &#39;isFile&#39;,
    src: [&#39;tmp/*.css&#39;]
  }
}
</code></pre>

<p>これでいつでもちゃんとテストできるようになった。</p>]]></content:encoded>
    </item>

    <item>
      <title>Feedlyでのフィードの分類</title>
      <link>http://hail2u.net/blog/rss/reading-in-feedly.html</link>
      <description>Feedlyでは今は亡きGoogle Readerや不死鳥のごとく蘇った(蘇る予定の)livedoor Readerのように全文表示の状態でサクサク読むのはUI的にもパフォーマンス的にも難しい。読む必要があるフィードとそうでないフィードを分類することは、Feedlyではより重要だと言える。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>RSS</category>
      <guid isPermaLink="true">http://hail2u.net/blog/rss/reading-in-feedly.html</guid>
      <pubDate>Mon, 20 Oct 2014 04:02:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://feedly.com/">Feedly</a>では今は亡き<a href="http://www.google.com/reader/about/">Google Reader</a>や不死鳥のごとく蘇った(蘇る予定の)<a href="http://reader.livedoor.com/">livedoor Reader</a>のように全文表示の状態でサクサク読むのはUI的にもパフォーマンス的にも難しい。読む必要があるフィードとそうでないフィードを分類することは、Feedlyではより重要だと言える。</p>

<h2>Collectionを使う</h2>

<figure>
  <img alt="★と☆を使ってCollectionを作成すると、サイドバーにわかりやすい形でフィードが整理される" src="http://hail2u.net/images/blog/feedly-rating-collection.png">
</figure>

<p>Collectionはフォルダー分けやタグ付けと似ている機能で、登録したフィードを分類する仕組み。複数のCollectionに所属できるので、タグ付けと言った方がわかりやすいかもしれないが、タグはタグで別にそういう機能がある。</p>

<p>ldRのレーティングのような仕組みは、レーティングっぽい名前でCollectionを作成するだけで実現できる。Collectionのソート順はドラッグ・アンド・ドロップで入れ替えられるので、ソート順は特に考慮する必要はない。絵文字や全角記号は通らない……と思いきやその場ではうまく表示されないことがあるものの<kbd>F5</kbd>で再読み込みするとちゃんと表示されるので、わかりやすく★★★☆☆などという名前でCollectionを作ったりすることもできないことはない。</p>

<h2>Must Readを使う</h2>

<figure>
  <img alt="フィードの登録状態を編集できる画面には、Must Readというフラグの有効・無効を切り替えられるチェックボックスが、タイトルのすぐ下に表示されている" src="http://hail2u.net/images/blog/feedly-edit-subscription.png">
</figure>

<p>もうひとつのMust Readは各フィードを登録する時などにつけることができるフラグ。これを有効にしたフィードがひとつでもあると、☆のアイコン付きでMust Readsという項目がサイドバーに作成されるので、そこからアクセスすることになる。</p>

<p>僕はこっちでやっている。Must ReadsだけをFull Articlesにして、それを消化した後、残りの未読をCardsでざっと流し読む。暇じゃなさそうな時はMust Readsを消化したら残りは全部既読にするようにしてたりして、未読が残らないように。</p>

<hr>

<p>ldR終了記念の記事として書いていた部分がなくなったらこんなことしか書くことなくなった。</p>]]></content:encoded>
    </item>

    <item>
      <title>SCSS Lintでbower_componentsディレクトリーを無視する</title>
      <link>http://hail2u.net/blog/software/ignoreing-bower_components-directory-in-scss-lint.html</link>
      <description>SCSS Lintでは**/*.scssなどといった指定でカレント・ディレクトリー以下のSCSSファイルを一気にチェックできる。けどBowerでインストールしたSassパーシャルなどは通らないことが多いので、bower_componentsディレクトリーは無視する方が効率が良い。その場合は設定ファイルでexcludeを使う。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/ignoreing-bower_components-directory-in-scss-lint.html</guid>
      <pubDate>Sun, 19 Oct 2014 15:41:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/causes/scss-lint">SCSS Lint</a>では<code>**/*.scss</code>などといった指定でカレント・ディレクトリー以下のSCSSファイルを一気にチェックできる。けど<a href="http://bower.io/">Bower</a>でインストールしたSassパーシャルなどは通らないことが多いので、<code>bower_components</code>ディレクトリーは無視する方が効率が良い。その場合は設定ファイルで<a href="https://github.com/causes/scss-lint#excluding-files"><code>exclude</code></a>を使う。</p>

<pre><code>exclude:
  - &#39;**/bower_components/**&#39;
  - &#39;**/node_modules/**&#39;
</code></pre>

<p><a href="https://npmjs.org/">npm</a>でインストールすることも間々あると思うので、ついでに無視しておくと良さそう。ドット・ディレクトリーは無視されないと思うけど、<code>.sass-cache</code>には<code>*.scss</code>はないのであまり必要ない気がする。</p>

<p>グローバル的に動作するであろう<code>~/.scss-lint.yaml</code>に書いておくと更に楽。</p>

<hr>

<p>JSONを書かされる毎日だと、YAMLの書きやすさが心地良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>Digg Deeper</title>
      <link>http://hail2u.net/blog/internet/digg-deeper.html</link>
      <description>DiggにはDigg Deeperという機能がある。連携したソーシャル・ネットワークで複数回シェアされたURLをメールで送ってくれるというもの。メールの他にiOSアプリでの通知やDigg Readerでも読むことができる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/digg-deeper.html</guid>
      <pubDate>Sat, 18 Oct 2014 02:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://digg.com/">Digg</a>には<a href="http://blog.digg.com/post/91454524841/digg-deeper">Digg Deeper</a>という機能がある。連携したソーシャル・ネットワークで複数回シェアされたURLをメールで送ってくれるというもの。メールの他にiOSアプリでの通知や<a href="https://digg.com/reader">Digg Reader</a>でも読むことができる。</p>

<p>フォローしている人をそれなりに厳選しているほど、教えられるURLは興味と合致する確率が高くなる。しかしトリガーは所詮複数回シェアされたというだけに過ぎないので、そもそも見逃しにくかったりする。加えて上澄みの上澄みといった類いのURLなので、それほど発見のあるURLではない可能性が高い。</p>

<p>そのためプッシュかそれに準じるような形で読んでもあまり面白くない。</p>

<p>ただDigg Readerで見る場合はちょっと良いのかなとも思う。RSSリーダーを見る過程で前日や今週といったスパンで話題になったことを思い出せることになる。メールだと見て終わりだが、RSSリーダーの一部だとストックされるので振り返りに使いやすいんではないかなと感じた。</p>

<hr>

<p>僕は<a href="https://feedly.com/">Feedly</a>を使っているので、どうにかしてDigg Deeperを低コストでFeedlyのSaved for laterに流したい。Gmailのフィルターで転送やIFTTTでGmail読むのが良さそうかなと思ったけど、URLが簡単に拾えるような形でないので、どちらもちょっと無理そう。GmailからTumblrに流して、そのRSS経由でFeedlyというのは可能そうだけど、専用のTumblrアカウントが必要で微妙。API待ちか。</p>]]></content:encoded>
    </item>

    <item>
      <title>定義ごとにまとめたルールセット</title>
      <link>http://hail2u.net/blog/webdesign/declaration-just-once.html</link>
      <description>CSS, DRY, and Code Optimizationという記事を読んだ。この記事ではメンテナンス性を重視したCSSの最適化について書かれている。いわゆる自然な書き方、つまりHTMLの構造をストレートに反映させたルールセットごとに定義(プロパティーと値のセット)を書いていくよりも、定義ごとにルールセットを作成してそれにセレクターを複数割り当てていく方が優れているという。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/declaration-just-once.html</guid>
      <pubDate>Fri, 17 Oct 2014 03:54:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://meiert.com/en/blog/20141009/css-dry-and-optimization/"><img alt="Declaration Just Once" src="http://hail2u.net/images/blog/declaration-just-once.png"</a>
</figure>

<p><a href="http://meiert.com/en/blog/20141009/css-dry-and-optimization/">CSS, DRY, and Code Optimization</a>という記事を読んだ。この記事ではメンテナンス性を重視したCSSの最適化について書かれている。いわゆる自然な書き方、つまりHTMLの構造をストレートに反映させたルールセットごとに定義(プロパティーと値のセット)を書いていくよりも、定義ごとにルールセットを作成してそれにセレクターを複数割り当てていく方が優れているという。</p>

<p>具体的なまとめ方は<a href="https://developers.google.com/speed/articles/optimizing-css">CSS: Using every declaration just once</a>というGoogleのドキュメントに詳しい。タイトルの通り、同じ定義が二度と出てこないように書いていくようだ。</p>

<p>サイズ的なメリットはともかくとして、メンテナンス性という面では確かに良さそうではある。CSSにおける保守は、定義の修正と追加が大半を占めるので、定義がユニークであるとどこをどう直せば良いのかすぐにわかるだろう。</p>

<p>デメリットとしては自然でない書き方であることもそうだが、メンテナンス性においても若干の不安はある。クラス名のリネームはぎりぎり何とかなるだろうが、既存のルールセットと多くを共有するような新たな要素を追加した場合、その要素を表現するセレクターを各ルールセットに追加していく必要がある。これはかなりの注意を必要とする作業な上、機械化もしづらい。</p>

<hr>

<p>印象としては、修正や更新には強いものの、追加や削除に弱く、スケールしないんじゃないかなというものだ。この記事の著者であるJens Meiertは<a href="http://meiert.com/en/blog/20091118/useful-universal-usable-unobtrusive/">コンパクトなCSSを好むような人</a>だと思うので、そういう視点でのものでもありそうだ。小規模のウェブサイトには向いた書き方なのかもしれない。</p>]]></content:encoded>
    </item>

    <item>
      <title>静的ファイルのみのホスティング</title>
      <link>http://hail2u.net/blog/internet/static-file-only-hosting.html</link>
      <description>ここしばらく使わせやすい静的ファイルのみをホスティングしてくれるサービスを探している。理想としては特定のローカル・ディレクトリーがそのまま公開されるようなサービスだ。FTPフォルダー的なものを実現するクライアントまで用意されているサービスだと言っても良い。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/static-file-only-hosting.html</guid>
      <pubDate>Thu, 16 Oct 2014 02:13:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ここしばらく使わせやすい静的ファイルのみをホスティングしてくれるサービスを探している。理想としては特定のローカル・ディレクトリーがそのまま公開されるようなサービスだ。FTPフォルダー的なものを実現するクライアントまで用意されているサービスだと言っても良い。</p>

<p><a href="https://pages.github.com/">GitHub Pages</a>は僕の中では理想に近く、自分で使う分にはまったく問題ないが、誰かに使わせようとすると途端に敷居が高くなる。</p>

<ul>
<li>Gitのインストールとその利用の仕方</li>
<li>GitHubのアカウントの取得と設定</li>
<li>GitHub Pagesの作成と更新</li>
</ul>

<p>このあたりの仕組みを教えないとならない。これらは一部を自動化するような仕組みを作って提供することも可能だが、そういうものは当初は良くても後々自分か赤の他人の首を絞めることになることはまず間違いないだろう。</p>

<p>世の中には例えば<a href="https://www.dropbox.com/">Dropbox</a>の一部ディレクトリーをそのまま公開してくれるようなサービスはある。これは説明のしやすさや導入の敷居という点では及第点であると言えそうだ。そういったサービスとの連携を設定済みのDropboxアカウントを作成し、そのアカウントでログインしてもらうようにすれば良いだけだからだ。</p>

<p>ただDropboxをそれ専用にしてしまうことになるのはなかなか厳しい。GitHubと違いかなりの確率で個人的に使っている人はいることだろう。それぞれのアカウントでホスティングを行ってくれるサービスとの連携を設定してもらうというのは、日本のサービスではないことから説明の時点でかなり面倒であるし、理解してもらうのは至難だろう。別に専用のアカウントで作業してくれというのは不可能ではないが、その妥当性を説明するのもまた難しい。</p>

<p>サービスの継続性などに目を瞑っても、こういったイマドキのホスティング環境はまだまだ<em>使わせる</em>というレベルに至ったものではないんじゃないかと思う。</p>

<hr>

<p>そんなわけでいわゆるCGIやPHPなどが動かない静的ファイルのみの普通のホスティング・サービスをそこそこ使わせていたりしている。古き良きFTPフォルダーなどを使ってシームレスに連携する方法を教えるのはあまり難しくなく、そうでないその他の方法も枯れたシステムなので安心して使わせることができる。ミラーリングなど複雑なことをさせることは無理があるが、ファイルの追加や削除、編集などに関してはまず問題は起きない。</p>

<p>けれどもやはり様々な不安は残る。特に古いシステムなので、動くことは動く程度の解でしかないことは安心からは程遠い。何か良いソリューションを探し求める日々は当分続くことになるだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>GitHubのwebhooks経由でのPubSubHubbubによるフィードの更新通知</title>
      <link>http://hail2u.net/blog/internet/publishing-feed-via-pubsubhubbbub-using-github-webhooks.html</link>
      <description>PubSubHubbubでフィードの更新通知を行う場合、当然RSSやらが更新された後に行う必要がある。GitHub Pagesにウェブサイトをホスティングさせている場合、ビルドにどれくらい時間がかかるかは不定なので、ローカルで行うことは難しい。しかし、当該リポジトリでwebhookをうまく作成してやると、ビルド完了後に自動で更新通知を行わせることが出来るようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/publishing-feed-via-pubsubhubbbub-using-github-webhooks.html</guid>
      <pubDate>Wed, 15 Oct 2014 00:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://en.wikipedia.org/wiki/PubSubHubbub">PubSubHubbub</a>でフィードの更新通知を行う場合、当然RSSやらが更新された後に行う必要がある。<a href="https://pages.github.com/">GitHub Pages</a>にウェブサイトをホスティングさせている場合、ビルドにどれくらい時間がかかるかは不定なので、ローカルで行うことは難しい。しかし、当該リポジトリでwebhookをうまく作成してやると、ビルド完了後に自動で更新通知を行わせることが出来るようだ。</p>

<p>GitHubリポジトリへの<code>push</code>とGitHub Pagesのビルドには一定でないラグがどうしてもある。<a href="http://jekyllrb.com/">Jekyll</a>を使っているかどうかが一番大きいが、それだけでもないので、何分経てばビルドが終わり、RSSが更新されているかは確実には言えない。かといってその確認をポーリングで行うのはコストが高い。</p>

<p>そこで確実にビルド後に更新通知を行えるように、リポジトリで設定できるwebhook (Settings→Webhooks &amp; Services)のトリガーのひとつである<em>Page build</em>を利用する。ただし、リファレンス実装のPubSubHubbubハブはGitHubのwebhooksが送るデータは解釈できないし、またwebhook側の設定でも通知するデータをカスタマイズすることはできないので、真っ当に利用しようとする場合はプロクシーを作る必要があることになる。</p>

<p>しかし、運が良いことに<a href="https://pubsubhubbub.appspot.com/">GoogleのPubSubHubbubハブ</a>や<a href="https://superfeedr.com/">Superfeedrで作成したハブ</a>は<code>POST</code>だけでなく<em><code>GET</code>でもpublishできる</em>ので、作成するwebhookのPayload URLで<code>hub.url</code>パラメーターの値としてRSS等のURLを指定してやればちゃんと更新を通知することができる。</p>

<pre>https://pubsubhubbub.appspot.com/publish?<mark>hub.mode=publish</mark>&amp;<mark>hub.url=http://example.com/feed</mark></pre>

<p>GoogleのPubSubHubbubハブへ通知する場合はこのようなURLを指定すれば良い。Content-Typeは<code>application/x-www-form-urlencoded</code>に、Secretは空のまま、トリガーの設定はLet me select individual events.を選択してPage buildのみにチェックを入れれば良いだろう。</p>

<p>正常に動いているかは当該webhookのログでは確認できないが、最低限<code>204</code>が返ってきていることだけは確認しておくと良い。実際に通知がうまく言っているかどうかはPubSubHubbubへ対応している<a href="https://feedly.com/">Feedly</a>などのクライアントで確認するしかないと思う。</p>

<p>このウェブサイトのRSSとFeedlyで確認した限りではきちんと動いてるようだ。少なくとも直近3つの記事を公開した時は1分以内にFeedlyで読めるようになっていた。</p>]]></content:encoded>
    </item>

    <item>
      <title>GitHub Pagesへ移行した</title>
      <link>http://hail2u.net/blog/internet/hello-github-pages.html</link>
      <description>好みの問題でJekyllはどうしても使う気になれないのでビルド・システムはそのままに、ホスティング先をGitHub Pagesに移動した。DNS設定もTTL通り5分で反映され、www付きのリダイレクトもうまくいっているようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/hello-github-pages.html</guid>
      <pubDate>Tue, 14 Oct 2014 10:12:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="GitHub Pages" src="http://hail2u.net/images/blog/hello-github-pages.png">
</figure>

<p>好みの問題で<a href="http://jekyllrb.com/">Jekyll</a>はどうしても使う気になれないのでビルド・システムはそのままに、ホスティング先を<a href="https://pages.github.com/">GitHub Pages</a>に移動した。DNS設定もTTL通り5分で反映され、www付きのリダイレクトもうまくいっているようだ。</p>

<p>ビルド・システムは変えないと決めたので、今まではrsyncでリモート・サーバーにミラーしていたのを、そのまま<code>build</code>という名前のサブディレクトリーにミラーするように変える方法にした。その後常に<code>gh-pages</code>ブランチをチェックアウトしている<code>build</code>ディレクトリーで全追加(<code>add --all</code>)してからコミット、そして<code>push</code>するという形で公開する。</p>

<ol>
<li>記事ファイルの作成</li>
<li>ウェブサイト管理用リポジトリー(プライベート)にコミット</li>
<li>HTMLとRSS、およびサイトマップの生成</li>
<li>rsyncで必要なファイルだけサブディレクトリーにミラー</li>
<li><a href="https://github.com/hail2u/hail2u.net">ウェブサイト公開用リポジトリー</a>にコミット</li>
</ol>

<p>このようなフローがGruntで自動実行され、ウェブログの記事はさっくりと公開される。</p>

<h2>ドメインの設定</h2>

<p>wwwの無いいわゆるエイペックス・ドメインはAレコードで設定した。<a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/">Tips for configuring an A record with your DNS provider</a>によると、昔と違って今は複数のIPアドレスを割り当ててやる必要があるようで、それだけには注意した。</p>

<pre><samp>C:&gt; <kbd>nslookup hail2u.net</kbd>
権限のない回答:
名前:    hail2u.net
Addresses:  192.30.252.153
          192.30.252.154
</samp></pre>


<p>www付きでのアクセスをwww無しへリダイレクトさせたい場合は、更にwwwサブドメインをCNAMEを使って<code>hail2u.github.io.</code>に割り当ててやるだけで良いようだ。そうすると対象リポジトリに置かれた<code>CNAME</code>ファイルの中身に従ってGitHub側が良きに計らってくれるようになっている。</p>

<hr>

<p>色々あーでもないこーでもないと考えたりしてる中で、デプロイに使っているオレオレGruntタスクが総入れ替えみたいな感じになった。</p>]]></content:encoded>
    </item>

    <item>
      <title>git grepをVimで使う</title>
      <link>http://hail2u.net/blog/software/using-git-grep-with-vim.html</link>
      <description>Gitのgrepサブコマンドは通常Gitリポジトリーでしか使えない。しかし--no-indexオプションを付けると、Gitリポジトリーではないディレクトリーでも検索できる(もちろんGitリポジトリーでも)。Vimからももちろん使えるので、ackちょっと遅い、ag入れるのが面倒くさい、MSYS上で使ってるとjvgrepの出力が稀におかしい、などの理由でgrepに戻ったりしてる人はgit grepを使うのも良さそう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/using-git-grep-with-vim.html</guid>
      <pubDate>Mon, 13 Oct 2014 00:59:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Gitの<code>grep</code>サブコマンドは通常Gitリポジトリーでしか使えない。しかし<code>--no-index</code>オプションを付けると、Gitリポジトリーではないディレクトリーでも検索できる(もちろんGitリポジトリーでも)。Vimからももちろん使えるので、<a href="http://beyondgrep.com/">ack</a>ちょっと遅い、<a href="http://geoff.greer.fm/ag/">ag</a>入れるのが面倒くさい、MSYS上で使ってると<a href="https://github.com/mattn/jvgrep">jvgrep</a>の出力が稀におかしい、などの理由でgrepに戻ったりしてる人は<code>git grep</code>を使うのも良さそう。</p>

<pre><code>set grepprg=git\ grep\ --no-index\ -I\ --line-number
</code></pre>

<p><code>grepformat</code>を編集しないで済ませるためには<code>--line-number</code>オプションを追加して、行番号を表示させる必要がある。僕はバイナリ・ファイルを無視する<code>-I</code>オプションも合わせて追加しておいた。パフォーマンスをあげるために<code>--no-color</code>オプションを付けるのも良さそう。</p>

<hr>

<p>Gitの<code>grep</code>サブコマンドだと、グロブの指定をせずにデフォルトで再帰的に下層ディレクトリーを検索してくれるのも楽。検索対象を絞りたい場合はglob(7)に従った形で指定したり、<code>--max-depth</code>オプションを追加して制限したりするだけなので、わかりにくいということはなさそう。agのオプションは覚えられる気しないけど、これなら大丈夫っぽい。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
