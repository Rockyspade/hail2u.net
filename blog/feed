<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <copyright>Copyright &#x00a9; 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <lastBuildDate>Mon, 15 Dec 2014 08:29:43 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>ロボ娘のアーキテクチャ</title>
      <link>http://hail2u.net/blog/media/roboko-no-architecture.html</link>
      <description>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。ロボ娘のアーキテクチャは真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/roboko-no-architecture.html</guid>
      <pubDate>Mon, 15 Dec 2014 08:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4812475295&amp;linkCode=as2&amp;tag=hail2unet-22"><img src="http://ecx.images-amazon.com/images/I/51VOJEjEU1L.jpg" alt="ロボ娘のアーキテクチャ 　① (バンブーコミックス)"></a>
</figure>

<p>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。<a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4812475295&amp;linkCode=as2&amp;tag=hail2unet-22">ロボ娘のアーキテクチャ</a>は真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</p>

<p>眼帯が欲しい。</p>

<hr>

<p>4コマは好きでよく読む。わりと何でも読む。けど二極化して長いので、山東ユカの書くやつみたいなのが増えて三極化して欲しい。いわゆる青年誌とかで連載されてる4コマやショートものみたいなのがこれにあたる。専門誌に連載されてるものと違う、絶妙な暗さみたいなのがあるやつ。</p>]]></content:encoded>
    </item>

    <item>
      <title>Gitで最新のタグをチェックアウト</title>
      <link>http://hail2u.net/blog/software/git-checkout-latest-tag.html</link>
      <description>最新のタグを知りたいことがたまにある。その時はgit describe --tagsで調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、describe --tagsがハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、--abbrev=0を加えると消えることがわかった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/git-checkout-latest-tag.html</guid>
      <pubDate>Sun, 14 Dec 2014 09:21:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>最新のタグを知りたいことがたまにある。その時は<code>git describe --tags</code>で調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、<code>describe --tags</code>がハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、<code>--abbrev=0</code>を加えると消えることがわかった。</p>

<p>具体的には以下のようなコマンドをターミナルで実行すれば良い。</p>

<pre><samp>$ <kbd>git checkout $(git describe --tags <mark>--abbrev=0</mark>)</kbd>
</samp></pre>

<p>主に、何かしらをビルドする時のタスクで使っている。事前に最新のタグをチェックアウトさせることによって、常に安定版がデプロイされるように制御することができる。</p>]]></content:encoded>
    </item>

    <item>
      <title>MinifyしてからConcat</title>
      <link>http://hail2u.net/blog/webdesign/minify-then-concat.html</link>
      <description>配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は壊れる可能性を否定できないことは意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫をソース・マップを維持することを前提にこのウェブサイトで実験し始めた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/minify-then-concat.html</guid>
      <pubDate>Sat, 13 Dec 2014 07:13:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は<a href="https://github.com/gruntjs/grunt-contrib-copy">壊れる可能性を否定できないこと</a>は意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫を<em>ソース・マップを維持すること</em>を前提にこのウェブサイトで実験し始めた。</p>

<p>JavaScriptファイルのビルドをGruntでやるとして、最小化についてはソース・マップのサポートは問題ないので、いつも通り<a href="https://github.com/gruntjs/grunt-contrib-copy">grunt-contrib-copy</a>と<a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a>を使うことにする。最後に連結する時にソース・マップを維持できるのかというのが最大の問題だったが、7月にソース・マップのサポートが<a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-copy</a>へ入っていたため、結果的にはこれを使うだけで良かった。</p>

<p>タスクの手順的には以下のようになる。</p>

<ol>
<li>一時ディレクトリーを掃除</li>
<li>一時ディレクトリーへソースとなるファイルのコピー<ul>
<li>非ライブラリーはそのファイルのみをコピー</li>
<li>ライブラリーはソース・マップ・ファイルを含めてコピー</li>
</ul>
</li>
<li>非ライブラリーのファイルのみをソース・マップ付きで最小化</li>
<li>プロダクションのファイルを連結して作成</li>
<li>公開ディレクトリーへソース・マップ・ファイルを含めてコピー</li>
</ol>

<p>これを踏まえて、Bowerでインストールした<code>lib-a.min.js</code>と<code>lib-b.min.js</code>、そして自分で書いた<code>foo.js</code>と<code>bar.js</code>を最小化してから連結し、最終的に<code>main.min.js</code>を作るとする。タスクの設定は以下のようになることだろう。</p>

<pre><code>module.exports = function (grunt) {
  grunt.initConfig({
    clean: {
      // `tmp/`ディレクトリーを掃除するタスク
      main: {
        src: ['tmp/**/*']
      }
    },

    concat: {
      // 最小化済みのファイルをソース・マップ付きで連結するタスク
      js: {
        options: {
          seperator: &#39;;&#39;,
          sourceMap: true,
          sourceMapStyle: &#39;link&#39;
        },

        files: {
          &#39;tmp/main.min.js&#39;: [
            &#39;tmp/lib-a.min.js&#39;,
            &#39;tmp/lib-b.min.js&#39;,
            &#39;tmp/foo.min.js&#39;,
            &#39;tmp/bar.min.js&#39;
          ]
        }
      }
    },

    copy: {
      // プロダクション向けに公開ディレクトリーへコピーするタスク
      js: {
        cwd: &#39;tmp/&#39;,
        dest: &#39;build/js/&#39;,
        expand: true,
        src: [
          &#39;**/*.js&#39;,
          &#39;**/*.js.map&#39;
        ]
      },

      // 一時ディレクトリーへ必要なファイルをコピーするタスク
      // 最小化済みのライブラリーは元ファイルとソース・マップ・ファイルも
      prejs: {
        files: {
          &#39;tmp/bar.js&#39;: &#39;src/js/bar.js&#39;,
          &#39;tmp/foo.js&#39;: &#39;src/js/foo.js&#39;,
          &#39;tmp/lib-a.js&#39;: &#39;bower_component/lib-a/dist/lib-a.js&#39;,
          &#39;tmp/lib-a.min.js&#39;: &#39;bower_component/lib-a/dist/lib-a.min.js&#39;,
          &#39;tmp/lib-a.min.js.map&#39;: &#39;bower_component/lib-a/dist/lib-a.min.js.map&#39;,
          &#39;tmp/lib-b.js&#39;: &#39;bower_component/lib-a/dist/lib-b.js&#39;,
          &#39;tmp/lib-b.min.js&#39;: &#39;bower_component/lib-b/dist/lib-b.min.js&#39;,
          &#39;tmp/lib-b.min.js.map&#39;: &#39;bower_component/lib-b/dist/lib-b.min.js.map&#39;
        }
      }
    },

    uglify: {
      options: {
        preserveComments: &#39;some&#39;,
        sourceMap: true
      },

      // まだ最小化されていないファイルをソース・マップ付きで最小化するタスク
      main: {
        cwd: &#39;tmp/&#39;,
        dest: &#39;tmp/&#39;,
        expand: true,
        ext: &#39;.min.js&#39;,
        src: [
          &#39;**/*.js&#39;,
          &#39;!**/*.min.js&#39;
        ]
      }
    }
  });

  grunt.loadNpmTasks(&#39;grunt-contrib-clean&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-copy&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);

  grunt.registerTask(&#39;build:js&#39;, [
    &#39;clean&#39;,
    &#39;copy:prejs&#39;,
    &#39;uglify&#39;,
    &#39;concat:js&#39;,
    &#39;copy:js&#39;
  ]);
};
</code></pre>

<p><code>concat:js</code>と<code>copy:prejs</code>以外はほぼポータブルなタスク設定になっている。これで<code>grunt build:js</code>と実行すると、最終的に<code>build/js/</code>ディレクトリーへ以下のようにファイルが作成される。</p>

<ul>
<li><mark>bar.js</mark></li>
<li>bar.min.js</li>
<li>bar.min.js.map</li>
<li><mark>foo.js</mark></li>
<li>foo.min.js</li>
<li>foo.min.js.map</li>
<li><mark>lib-a.js</mark></li>
<li>lib-a.min.js</li>
<li>lib-a.min.js.map</li>
<li><mark>lib-b.js</mark></li>
<li>lib-b.min.js</li>
<li>lib-b.min.js.map</li>
<li><mark>main.min.js</mark></li>
<li><mark>main.min.js.map</mark></li>
</ul>

<p>中間のソース・マップ・ファイルはちゃんとまとめられているので、実際にはマークされているファイルだけあれば良い。しかし設定が汎用性のない複雑なものになってしまうので、全部コピーしておく方が面倒がないだろう。そうでなければソース・マップ・ファイルへ<code>sourcesContent</code>で元ソースを含めてしまうのが良い。この辺りはもうちょっと運用しないとどうするのが最良なのかは見えてこなさそうだ。</p>

<hr>

<p>欠点はあまりない。最小化後に連結するという観点の考察がウェブにはまだないので手探りでやることになるのが一番の壁だろう。取るに足りないとは思うが、最終ファイルが数バイトから数十バイト増えることは挙げておく。</p>

<p>利点としては、ライブラリーのライセンスや著作権者情報など消すべきでないものが確実に残ることと、ライブラリーが動作が確認されている状態のままで連結されることが挙げられる。消すべきでないものが残るということは、つまりビルド・タスク側でいわゆるバナーなどと呼ばれている先頭のコメントのことを考えなくて良いということでもある。</p>

<p>欠点と比較する限り、得られるものは大きいと言える。</p>]]></content:encoded>
    </item>

    <item>
      <title>InkscapeのCLIを利用してSVGからPNGへ変換</title>
      <link>http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</link>
      <description>InkscapeにはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけどSVG Advent Calendar 2014の12日目の記事ということにしておこう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</guid>
      <pubDate>Fri, 12 Dec 2014 02:52:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://inkscape.org/">Inkscape</a>にはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけど<a href="http://www.adventar.org/calendars/366">SVG Advent Calendar 2014</a>の12日目の記事ということにしておこう。</p>

<p>例えば<code>in.svg</code>を幅256ピクセルのPNGファイルとして<code>out.png</code>に変換したいとする。Inkscapeの実行ファイルのディレクトリーへパスが通っているとすると、以下のようなオプションで実行すれば変換される。</p>

<pre><samp>$ <kbd>inkscape --without-gui --export-width=256 --file=in.svg --export-png=out.png</kbd>
</samp></pre>

<p><code>--without-gui</code>でGUIの起動を無効にし、<code>--export-width</code>で幅を(高さはアスペクト比を維持してくれる)、<code>--file</code>で変換元のSVGファイルを、そして<code>--export-png</code>で変換先のPNGファイル名を指定する。複数ファイルの変換などについては無理なようだが、実用上はあまり問題ないようにも思える。Inkscape v0.91-pre.3できちんと変換できることを確認した。</p>

<p>Windows版では<code>inkscape.exe</code>にはCLIがないが、同じ場所にある<code>inkscape.com</code>がコマンド・プロンプト用の実行ファイルになっているので、パスさえ通せばこのままでちゃんと使える。</p>

<hr>

<p>自動化目的だったので<a href="http://hail2u.net/pub/grunt-svg2png.js">svg2pngという名前のGruntタスク</a>を書いてみたりもした(使い始めた)。もっと雑に一対多で変換できるような設定を書けると良さそう。</p>]]></content:encoded>
    </item>

    <item>
      <title>ららぽーと</title>
      <link>http://hail2u.net/blog/misc/lalaport.html</link>
      <description>来年10月くらいにオープンするらしいららぽーとは順調に工事が進んでいるらしく、ほぼ建物の外観は見えてきた。駅からは私鉄側からも屋根付きのペドウェイでまっすぐいけるようだ。これも半分くらいもうできてる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/lalaport.html</guid>
      <pubDate>Thu, 11 Dec 2014 07:33:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="巨大クレーン3台で建築が進むららぽーとの様子" src="http://hail2u.net/images/blog/lalaport.jpg">
</figure>

<p>来年10月くらいにオープンするらしい<a href="http://www.mitsuifudosan.co.jp/corporate/news/2014/0605_01/">ららぽーと</a>は順調に工事が進んでいるらしく、ほぼ建物の外観は見えてきた。駅からは私鉄側からも屋根付きのペドウェイでまっすぐいけるようだ。これも半分くらいもうできてる。</p>

<p>この大規模商業施設自体には思うところはあまりない(期待はしてる)のだけど、交通環境が激変しそうなことが不安だ。電車か、圏央道から246へ降り相模川を渡って……というメインのアクセスはともかく、問題は市内南部など246側でない方からのアクセスだ。実は駅周辺には車で線路(3つある)を渡る道路がない。東か西に大きく回りこまないと渡ることができない。</p>

<p>そして、なかなか開発が進むことのなかった駅なので、周辺の道路はとても幅が狭い。それでも西側はそこそこ広いが、東側は4tトラックがすれ違えるか怪しいような道路ばかりだ。歩道もほとんどなく、もしここの交通量が増えたら恐ろしそうだと強く感じる。</p>

<p>商業施設の周辺道路も整備されているが、どれもあまり広くなく、かといって歩道が広いとか自転車専用レーンがあるとかでもない。素人考えでは捌けなさそうな気がするがそうでもないのだろうか。</p>

<hr>

<p>市立図書館も一時閉館し、TSUTAYAプロデュースのスタバ付きへ退化する作業が始まった。これも来年オープンだそうだ。これら今開発されている地域は耕作放棄されたコスモス畑か田んぼしかなかったので、まったく思い入れはない。にも関わらず急激に変わり始めててちょっとついていけないなどと年寄り臭いことを思った。</p>]]></content:encoded>
    </item>

    <item>
      <title>風呂の床</title>
      <link>http://hail2u.net/blog/misc/bathroom-floor.html</link>
      <description>タイルだった風呂の床が、分厚い断熱層にアクリル・コーティングされたFRPが重ねられた床に変わった。うちのは石目ホワイトグレー。暖かい……のは全体的に断熱する仕組みになった(+ 暖房が付いた)からではあるんだけど、やはりタイルは冷たかったと思う。みんなの床 Advent Calendarの10日目。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/bathroom-floor.html</guid>
      <pubDate>Wed, 10 Dec 2014 04:09:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="アクリル・コーティングされた断熱床材" src="http://hail2u.net/images/blog/bathroom-floor.jpg">
</figure>

<p>タイルだった風呂の床が、<a href="http://www.noritz.co.jp/product/bathroom/riz/color03.html">分厚い断熱層にアクリル・コーティングされたFRPが重ねられた床</a>に変わった。うちのは石目ホワイトグレー。暖かい……のは全体的に断熱する仕組みになった(+ 暖房が付いた)からではあるんだけど、やはりタイルは冷たかったと思う。<a href="http://www.adventar.org/calendars/539">みんなの床 Advent Calendar</a>の10日目。</p>

<p>老いさらばえかけたおっさんなのでタイルより滑りにくいのはすごい安心。表面に弾力はないけれど、断熱材の方が柔らかいので万一滑ってもある程度はショックを吸収してくれる模様。</p>

<p>アクリルのコーティングは硬度8Hと謳われていて、余程のものを落とさない限りは傷つくことはまずないという。8Hとか言われると反射的にスマホの液晶フィルムを思い出してそこそこ割れそうな感じがしたけど、落とす方じゃないから大丈夫みたいだ。</p>

<p>やはり傷がつかないというのは掃除の点で非常に魅力的。CMで浴室のカビをきれいにとか何十年にも渡って放映されていることからもわかるけど、風呂のカビと戦うのはなかなかの忍耐と根性が必要。そのあたりから解放されることに！石目で汚れが目立たたないところは良し悪し。</p>

<hr>

<p>こういう機能性の高いものはハイエンドが存在して一般に降りてくるものと思ってたんだけど、超高級マンションなどの広い風呂場用にはこういった床はおろか、壁もあまり存在しないらしい。そういうところではほぼタイル一択になり、掃除で死ぬという話。狭い風呂で良かった。</p>]]></content:encoded>
    </item>

    <item>
      <title>HTMLの属性を書く順序</title>
      <link>http://hail2u.net/blog/webdesign/html-attribute-order.html</link>
      <description>CSSの定義をアルファベット順にした後、HTMLの属性を書く順序についてずっと考えていた。アルファベット順だとわかりやすいが、非常に読み解きづらくなる。そういった点での読みやすさだけでなく、必須属性を書き忘れないようにもできたら良いのかなと色々考えている。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/html-attribute-order.html</guid>
      <pubDate>Tue, 09 Dec 2014 02:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://hail2u.net/blog/webdesign/i-changed-my-mind-in-2014.html">CSSの定義をアルファベット順に</a>した後、HTMLの属性を書く順序についてずっと考えていた。アルファベット順だとわかりやすいが、非常に読み解きづらくなる。そういった点での読みやすさだけでなく、必須属性を書き忘れないようにもできたら良いのかなと色々考えている。</p>

<p>今のところ以下のような順序が良さそうだと感じている。</p>

<ol>
<li><code>id</code>属性</li>
<li><code>class</code>属性</li>
<li><code>style</code>属性</li>
<li>他属性をアルファベット順で</li>
<li>WAI-ARIA (<code>role</code>属性と<code>aria-*</code>属性)</li>
<li><code>data-*</code>属性</li>
<li>Microdata (<code>item*</code>属性)</li>
</ol>

<p><code>id</code>属性と<code>class</code>属性を先頭にするのはCSSとの兼ね合いで、これらだけ知りたいというケースが多いからだ。使われることが多い<code>class</code>が前の方が効率的だろうと思われるが、一意に確定される<code>id</code>の強さを先頭にすることで表現したい。<code>style</code>属性を使うなら<code>class</code>と離して書くのは良くなさそうなのでこれらに続けて書く。できる限り使わない方が良いのは言うまでもない。</p>

<p>続けて普通の属性をアルファベット順で書くようにする。必須属性の位置が安定しないため、書き忘れを防げないようだが、必須かどうか自体が安定していない。そこで全体的な順序をアルファベット順に固定することで、必須属性が欠けている時に違和感が生じるように、という考えでこうした。</p>

<p>さらにHTML要素の振る舞いを変更または最適化することになるWAI-ARIAの属性を書いていき、最後に補完的な意味合いの強い<code>data-*</code>属性とMicrodataを追加する。</p>

<hr>

<p>条件が多すぎるので他の人が受け入れられるようなものではなさそうだ。アルファベット順、ただし<code>class</code>属性だけ先頭にするという辺りが落とし所として無難に思える。</p>]]></content:encoded>
    </item>

    <item>
      <title>TKGを食べた</title>
      <link>http://hail2u.net/blog/misc/tkg-20141208.html</link>
      <description>かき混ぜてからかける派、かけたあとは混ぜない組。醤油は気分。茶碗よりも丼でやりたい。というよりも卵をご飯にかけるという所業を結構大きくなってから吉野家の牛丼で覚えたので、かき混ぜてからかけるし丼でやる。TKG Advent Calendar 2014ももう8日目か。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/tkg-20141208.html</guid>
      <pubDate>Sun, 07 Dec 2014 23:58:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img src="http://hail2u.net/images/blog/tkg-20141208.jpg" alt="内側が赤、外側が黒の塗丼に白いご飯が盛られ、その上へよくかき混ぜられた卵がかけられている">
</figure>

<p>かき混ぜてからかける派、かけたあとは混ぜない組。醤油は気分。茶碗よりも丼でやりたい。というよりも卵をご飯にかけるという所業を結構大きくなってから吉野家の牛丼で覚えたので、かき混ぜてからかけるし丼でやる。<a href="http://www.adventar.org/calendars/342">TKG Advent Calendar 2014</a>ももう8日目か。</p>]]></content:encoded>
    </item>

    <item>
      <title>クラス名の命名規定</title>
      <link>http://hail2u.net/blog/webdesign/css-class-naming-rule.html</link>
      <description>pixivのCSSで使われるクラス名ルールという命名規則の記事を読んでいた。初見では大規模だとBEMの衝突が絶対に起きない書き方の方が優れているように思えた。しかし衝突するであろうことに警報を出すという形にゆるくすることで、開発者たちに自由を与えるというような目的でこうなっているようだ。ちょっと興味深い。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/css-class-naming-rule.html</guid>
      <pubDate>Sun, 07 Dec 2014 02:20:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://less.carbonfairy.org/post/104312752301">pixivのCSSで使われるクラス名ルール</a>という命名規則の記事を読んでいた。初見では大規模だとBEMの衝突が絶対に起きない書き方の方が優れているように思えた。しかし衝突するであろうことに警報を出すという形にゆるくすることで、開発者たちに自由を与えるというような目的でこうなっているようだ。ちょっと興味深い。</p>

<p>規模が大きくなると制約を厳しくして安定性を重視する一辺倒だったが、こういう自由さをうまく提供しようという考え方をすることはあまりなかった。具体的にも、変更されることがあまりない、またはわかっている人だけが行うひとまとまりのルートにのみ特殊な命名(<code>_</code>で始める)というのはバランスが良さそうに思える。</p>

<p>コードだけを見てみるとうまくいっているというのは少し驚く。<code>_</code>で始まるところはあまり触らない人と<code>_</code>で始まるところを触る人、と人的リソースが能力や職掌に応じてうまく振り分けられているのかなと想像してる。プリプロセッサーありきという印象もあるが、それはもう問題にはならなそうだ。</p>

<p>CSSにもモジュール化、そしてその先のコンポーネント化の波は来ている。最右翼はBEMのような制約の厳しい命名規則であることは間違いなさそうだが、過渡期の今こそチームにあった命名規則を考えるべきなのかもしれない。</p>]]></content:encoded>
    </item>

    <item>
      <title>木曜日のポエム</title>
      <link>http://hail2u.net/blog/misc/thursday-poem.html</link>
      <description>今年は木曜日に内向的な性格の強い記事、ざっくり言うとポエムなどと揶揄されるような記事を書くようにしていた。週で考えるとタイミングとしては良かったような気がする。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/thursday-poem.html</guid>
      <pubDate>Sat, 06 Dec 2014 00:58:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>今年は木曜日に内向的な性格の強い記事、ざっくり言うとポエムなどと揶揄されるような記事を書くようにしていた。週で考えるとタイミングとしては良かったような気がする。</p>

<p>月～火は情報の収集に偏りやすく、ポエムのようなものは消費されにくい傾向にあると思う。金～日はそもそも文章をじっくり読まれるようなタイミングでないことが多い。水～木あたりが良いのかなというところで、週末よりだとストレスからシリアスに捉えられる可能性が高いのではないかと木曜にした。</p>

<p>当初は以下のような点を意識して、金曜日にしていた。</p>

<ul>
<li>あまりシリアスに捉えられないように</li>
<li>そもそも読まれないように</li>
<li>フィードを購読している人には読まれるように</li>
</ul>

<p>世迷い事のようなものなのでシリアスに捉えられると困る、というような考えだった。ポエムのようなものは素に近いので、シリアスに捉えられて否定されると辛いとかそういうことでもあったように思う。</p>

<p>しかし春頃から、ポエムのようなものはシリアスに捉えられて初めてその空気感のような曖昧な部分が伝わるのかもしれないと考えるようになった。以降は週末までに拡散し切るであろう木曜に公開するようになっていった。</p>

<hr>

<p>来年も続けよう。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
