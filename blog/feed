<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <copyright>Copyright &#x00a9; 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <lastBuildDate>Tue, 28 Oct 2014 08:58:49 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>GitHub PagesとContent-Typeヘッダー</title>
      <link>http://hail2u.net/blog/internet/github-pages-and-content-type-header.html</link>
      <description>GitHub Pagesでは未知のファイルはapplication/octet-streamで配信される。未知のファイルとは未知の拡張子を持つファイルと拡張子を持たないファイルの二つに分けられる。例えばこのウェブサイトのRSSフィードは拡張子なしのfeedというファイルのため、適切なContent-Type (application/rss+xml)で配信されていない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/github-pages-and-content-type-header.html</guid>
      <pubDate>Tue, 28 Oct 2014 08:58:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>GitHub Pagesでは未知のファイルは<code>application/octet-stream</code>で配信される。未知のファイルとは未知の拡張子を持つファイルと拡張子を持たないファイルの二つに分けられる。例えばこのウェブサイトのRSSフィードは拡張子なしの<code>feed</code>というファイルのため、適切なContent-Type (<code>application/rss+xml</code>)で配信されていない。</p>

<p>Content-Typeの制御はファイルの拡張子でのみ行うことにGitHub Pagesではなっている。RSSならば<code>.rss</code>、Atomなら<code>.atom</code>という拡張子である必要があるということだ。バックエンド(<a href="https://www.fastly.com/">Fastly</a>？)でそうなっているためな気がするが、ちょっと不自由なところがある。</p>

<p>ごく一部のRSSリーダーは適切なContent-Typeが返ってこない場合に購読できなかったり新着が読めなくなったりするようだ。Content-Typeを無視しろとまでは思わないが、せめて<code>application/octet-stream</code>は解釈を試みて欲しいと思う。</p>

<hr>

<p>今のところURLを維持したまま直す方法がないのでこのままにしておく。Content-Type以外にもCache-Controlといったパフォーマンスに直結するヘッダーも変更したいと感じることも多く、ホスティング自体は静的ファイルのみだが、<code>.htaccess</code>的なものは使えるレンタル・サーバーが欲しいなという気持ちが強まってきた。</p>]]></content:encoded>
    </item>

    <item>
      <title>aspect-ratio特性</title>
      <link>http://hail2u.net/blog/webdesign/aspect-ratio-feature.html</link>
      <description>ビューポートが16:9以上かどうかの判定にaspect-ratioを使って行おうとしていた。が、min-aspect-ratio: 16/9でうまく動かず、もしや未実装かとあーでもないこーでもないと色々やってたら、単にmax-aspect-ratioでやるべきなだけだった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/aspect-ratio-feature.html</guid>
      <pubDate>Mon, 27 Oct 2014 05:15:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ビューポートが16:9以上かどうかの判定に<code>aspect-ratio</code>を使って行おうとしていた。が、<code>min-aspect-ratio: 16/9</code>でうまく動かず、もしや未実装かとあーでもないこーでもないと色々やってたら、単に<code>max-aspect-ratio</code>でやるべきなだけだった。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/599.html">Detect viewport ratio is 16:9+ or not</a></p>

<p><code>aspect-ratio</code>特性では<a href="http://www.w3.org/TR/css3-mediaqueries/#values"><code>&lt;ratio&gt;</code>という種類の値</a>で指定する。この<code>&lt;ratio&gt;</code>は<code>正の整数/正の整数</code>でしか書くことができない。しかし、<code>min-</code>か<code>max-</code>プリフィックスをつける場合、比率として少数化した値で扱われる。そのため16:9より縦の比率が大きい16:10や16:12にマッチさせたい場合は、<code>max-</code>プリフィックスを使う必要がある。</p>

<p><code>aspect-ratio</code>特性を使ったメディア・クエリーの式は縦幅を分母とした分数で記述し、プリフィックスはそれを少数に変換して考える。こう覚えておくと良さそう。</p>

<hr>

<p>16:9<em>以上</em>という考え方自体が間違っているのかもしれない。縦横比は横幅が基準という印象を持っていて、それに従うと<em>以上</em>で良いと思っていた。けれども縦幅が分母、つまり基準になるこのようなケースもあるようだ。</p>

<p>またこの調査の過程で<code>min-height: 56.25vw</code>とかでも良いんじゃないかと考え、試したのもデモに載せておいた。<code>56.25vw</code>は<code>100vw / 16 * 9</code>で計算した答えで、ビューポートの横幅が<code>100vw</code>で参照できることを利用してる。けれどもFirefox 33と35では動いたものの、Chrome 38 (と40)やInternet Explorer 11 (と12)では動かなかった。これら動かないブラウザーでは、どうも<code>vw</code>単位そのものがメディア・クエリーの式では扱えないみたいだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>靴擦れとキズパワーパッド</title>
      <link>http://hail2u.net/blog/misc/shoe-sore-and-band-aid-active-flex.html</link>
      <description>新しい靴を買っておろしたら、10数年ぶりくらいに靴擦れになった。踵とかではなくて右の薬指の上。指にできたのは記憶になくて、こんなところにもできるんだ……という感じだった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/shoe-sore-and-band-aid-active-flex.html</guid>
      <pubDate>Sun, 26 Oct 2014 03:39:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>新しい靴を買っておろしたら、10数年ぶりくらいに靴擦れになった。踵とかではなくて右の薬指の上。指にできたのは記憶になくて、こんなところにもできるんだ……という感じだった。</p>

<p>で、数年ぶりに絆創膏的なものを貼ろうとしたら<a href="http://www.amazon.co.jp/gp/product/B000FQNKKQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000FQNKKQ&linkCode=as2&amp;tag=hail2unet-22">BAND-AIDのキズパワーパッド</a>のストックがあったので初めて使った。すごいっていうのは聞いていたんだけど、普通の絆創膏からの進化っぷりが想像以上にすごくて驚いた。密着性がものすごい上に完全防水なので、風呂でも貼りっぱなしで済んだのはすごく良かった。治るまでこのままでよさそう。</p>

<p>靴擦れ用というものもあるみたいなので、踵とかにできたら買ってみよう。</p>]]></content:encoded>
    </item>

    <item>
      <title>Clean CSSと@importのインライン展開</title>
      <link>http://hail2u.net/blog/webdesign/processing-at-import-directive-with-clean-css.html</link>
      <description>最近のClean CSSには@importで参照しているCSSを読み込んでインライン展開する機能がある。この機能を使うとGitやBowerを使ってNormalize.cssやTwitter Bootstrapをローカルにダウンロードし(、リネームし)ておいて……などとしなくて済むので、CSSライブラリーの管理の手間がだいぶ減る。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/processing-at-import-directive-with-clean-css.html</guid>
      <pubDate>Sat, 25 Oct 2014 08:23:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>最近の<a href="https://github.com/jakubpawlowicz/clean-css">Clean CSS</a>には<code>@import</code>で参照しているCSSを読み込んでインライン展開する機能がある。この機能を使うとGitや<a href="http://bower.io/">Bower</a>を使って<a href="http://necolas.github.io/normalize.css/">Normalize.css</a>や<a href="http://getbootstrap.com/">Twitter Bootstrap</a>をローカルにダウンロードし(、リネームし)ておいて……などとしなくて済むので、CSSライブラリーの管理の手間がだいぶ減る。</p>

<p>デフォルトで有効になっているので、普通に書くだけで展開される。</p>

<pre><code>@import url(&#39;http://necolas.github.io/normalize.css/latest/normalize.css&#39;);
</code></pre>

<p>は、</p>

<pre><code>/*! normalize.css v3.0.2 | MIT License | git.io/normalize */html{...
</code></pre>

<p>と展開され、更に圧縮される。Normalize.cssのように最新版を参照するURLが用意されていれば、バージョンの管理も不要になる。</p>

<p>Clean CSSには他に相対パスを解決する仕組みなども用意されているので、CSSにおける静的リソースのほぼ全てをうまいこと管理できるようになっている。</p>

<hr>

<p>ただし<code>//</code>で始まるURLでCSSを参照すると例外を吐いて落ちるバグがあったり、すべての<code>@import</code>ディレクティブが処理されることには注意が必要かも。前者は致命的っぽいけどWindows限定のような気もする(ドライブレター！)。後者は処理して欲しくない<code>@import</code>ディレクティブが必要なことは稀なので、あまりハマらない。</p>

<p>処理して欲しくない<code>@import</code>ディレクティブというのは、例えばUAで振り分けて返すCSSを変えているようなURLを参照しているケース。具体的には<a href="http://www.google.com/fonts">Google Fonts</a>のCSSとか。最近のChromeに対してはたまにWOFF2も参照するCSSを返したり、古いブラウザーに対しては忘れた方が良さそうなフォーマットを参照するCSSを返す。Clean CSSに対してはTTFを参照するCSSを返してしまう。</p>

<p>このような些細な問題はあるけど、ライブラリー管理にBower等を使ってディレクトリーやファイルのレイアウトに四苦八苦するくらいならClean CSSをうまく使ってやった方が良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>無意味なアイキャッチ画像</title>
      <link>http://hail2u.net/blog/webdesign/meaningless-eyecatch.html</link>
      <description>ここのところ、このウェブログの記事にアイキャッチ画像があることが多い。そんな中、大きな画像がファースト・ビューにあることについてのツイートを見て、確かに大きな画像のおかげで読みたくなくなることもあるなと考えさせられた。このウェブログでも少なくとも無意味な(昨日の記事のような)アイキャッチ画像は止めようと決めた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/meaningless-eyecatch.html</guid>
      <pubDate>Fri, 24 Oct 2014 02:13:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ここのところ、このウェブログの記事にアイキャッチ画像があることが多い。そんな中、<a href="https://twitter.com/aereal/status/525129759718531072">大きな画像がファースト・ビューにあることについてのツイート</a>を見て、確かに大きな画像のおかげで読みたくなくなることもあるなと考えさせられた。このウェブログでも少なくとも無意味な(昨日の記事のような)アイキャッチ画像は止めようと決めた。</p>

<p>タイトルの繰り返しになるような無意味と言えるアイキャッチ画像をわざわざ作って追加していたのは、CSSでタイトルと画像を摩り替えて表示しようとかいう思惑があったように思う。でも実際には対応していないので、無意味になっていた。</p>

<p>増やしたきっかけはリンクや引用が主のライトな記事をここにも書くようになったことだ。その時に本文からのみリンクを張るよりも、画像を作成して大きくリンクを張った方がわかりやすいだろうとして画像を作るようになり、それが他の記事にも波及してしまった。そういったライトな記事での画像はアイキャッチではなくリンクのためなので、一定の意味があるように思う。</p>

<p>もうちょっと考えて画像作るようにしよう。</p>

<hr>

<p>ところで、アイキャッチ画像の狙いはコンテンツを続けて読んでもらうことなので、アイキャッチ画像によりユーザーの滞在時間が長くなっていれば効果があると言えそうだ。このウェブログでの効果を10記事ずつを使って調べてみることにする。</p>
<figure>
  <table>
    <thead>
      <tr>
        <th>アイキャッチ画像</th>
        <th>平均滞在時間</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>あり</th>
        <td align="right"><time>02:48.5</time></td>
      </tr>
      <tr>
        <th>なし</th>
        <td align="right"><time>03:32.2</time></td>
      </tr>
    </tbody>
  </table>

  <figcaption>Google Analyticsによる10記事ずつの調査</figcaption>
</figure>

<p>画像がない記事の方が26%ほど、秒数にしておよそ43.7秒長く滞在しているようだ。差がないことくらいは覚悟していたけれども、これくらい差が出るとは思っていなかった。技術的な話題によっていることもあり、調査数を増やす(より過去の記事も対象にする)とユーザーに偏りが出るのでもっと差が出そうだ。</p>

<p>画像のあるなしは記事の内容にも左右されているので一概には言えないが、このウェブログではアイキャッチ画像の効果は高くない、むしろマイナスという結論になりそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>コンテンツの責任</title>
      <link>http://hail2u.net/blog/blog/responsibility-of-contents.html</link>
      <description>POSSEのようなやり方は主にコンテンツの所有権を明確に自分に帰属させようという目的を持って選択される。所有権の明確化は、同時にコンテンツの責任が自分にあることも明確にされることでもある。逆に言うとPOSSEのようなやり方が流行らないのは、そういった責任を放棄したいと考えている人が多いからなのかもしれない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Blog</category>
      <guid isPermaLink="true">http://hail2u.net/blog/blog/responsibility-of-contents.html</guid>
      <pubDate>Thu, 23 Oct 2014 04:17:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="Responsibility of Contents" src="http://hail2u.net/images/blog/responsibility-of-contents.png">
</figure>

<p><a href="http://indiewebcamp.com/POSSE">POSSE</a>のようなやり方は主にコンテンツの所有権を明確に自分に帰属させようという目的を持って選択される。所有権の明確化は、同時にコンテンツの責任が自分にあることも明確にされることでもある。逆に言うとPOSSEのようなやり方が流行らないのは、そういった責任を放棄したいと考えている人が多いからなのかもしれない。</p>

<p>コンテンツに対しての責任はその提供者が持つべきものではある。しかし味方よりも敵の方が圧倒的に多いインターネットでは、責任を持つことを前提にするとかなりの覚悟や諦めが必要になる。揚げ足をとられて終わりくらいならまだ良く、大抵の場合は注目されたらどんな羽目に陥るかわかったものではない。</p>

<p>投稿したコンテンツがすぐに消えたりそのうち消えるようなサービスが人気を誇る理由もこのあたりにあるのではないかと考えている。利用しているユーザーがコンテンツの責任についてどれくらい意識しているかはわからないが、少なくとも公開され続けることによるリスクを負いたくないと思っていても不思議ではない。</p>

<p>責任がとれそうもないことを投稿・公開することが間違っていると言えばそれは確かにそういう面もある。しかしそれはリスクをまったく負いたくない年寄りの論理と言えるとも思う。違う世代の新しい媒体での行動に、自分の世代の古い媒体での行動基準で否定するのはナンセンスだ。</p>

<hr>

<p>でも僕が半ばPOSSEのようなやり方を通しているのは責任がどうとかではない。フローで流れてしまう場に自分の意見らしきものを投稿するのは、言いっ放しになりやすく好きではないというような理由に過ぎない。</p>]]></content:encoded>
    </item>

    <item>
      <title>POSSE: Publish Own Site, Syndicate Elsewhere</title>
      <link>http://hail2u.net/blog/internet/posse.html</link>
      <description>POSSEは「自分のとこで公開して、他のとこへ配信しよう！」というようなやり方。コンテンツの所有権や、サード・パーティーのサービスへの依存度、安定したURLとそれに伴うオリジナルの発見性の高さ、検索性などの点で利点があるとされている。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/posse.html</guid>
      <pubDate>Wed, 22 Oct 2014 03:32:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://indiewebcamp.com/POSSE"><img alt="Publish Own Site, Syndicate Elsewhere" src="http://hail2u.net/images/blog/posse.png"></a>
</figure>

<p><a href="http://indiewebcamp.com/POSSE">POSSE</a>は「自分のとこで公開して、他のとこへ配信しよう！」というようなやり方。コンテンツの所有権や、サード・パーティーのサービスへの依存度、安定したURLとそれに伴うオリジナルの発見性の高さ、検索性などの点で利点があるとされている。</p>

<p>大体のことはこのウェブサイトのドメインに集約してるので、一部はPOSSEと言って良さそう。ブックマークやTwitterでだらだら書いてるようなのは<a href="http://indiewebcamp.com/PESOS">PESOS</a>でやってることになるので、これもPOSSEにしたい。けどブックマークのタグやTwitterのリプライとかの扱いが面倒そうで、これで良いかという感じで妥協している。</p>]]></content:encoded>
    </item>

    <item>
      <title>Modularized Normalize.scssのテスト</title>
      <link>http://hail2u.net/blog/coding/testing-normalize-scss.html</link>
      <description>Normalize.cssがv3.0.2に更新されていたので、Modularized Normalize.scssも更新した。変更点はmenu要素の追加とIE10でのa要素の背景削除がbackground-colorプロパティーのみに変わったことで、大きな変化はない。で、追随したv3.0.2をリリース後、テストを少し書き換えた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/testing-normalize-scss.html</guid>
      <pubDate>Tue, 21 Oct 2014 04:10:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/necolas/normalize.css">Normalize.css</a>がv3.0.2に更新されていたので、<a href="https://github.com/hail2u/normalize.scss">Modularized Normalize.scss</a>も更新した。変更点は<code>menu</code>要素の追加とIE10での<code>a</code>要素の背景削除が<code>background-color</code>プロパティーのみに変わったことで、大きな変化はない。で、追随したv3.0.2をリリース後、テストを少し書き換えた。</p>

<p>Modularized Normalize.scssのテストは以下のような単純なものになっている。</p>

<ol>
  <li>最新版のNormalize.cssのリリース・ファイルをダウンロード</li>
  <li>Sassを使ってリポジトリーからビルド</li>
  <li>両者を圧縮</li>
  <li>文字列として比較</li>
</ol>

<p>これでオリジナルのリリース・ファイルとSassでビルドしたものがCSSとして一致するかを確認している。完全なものではないけど、きちんと動作するものをビルド可能かどうかは確認できる。</p>

<p>しかし、今までは圧縮する時にいわゆるバナー・コメント(ライセンスなどが書かれている消すべきではないコメント)を残していた。そのためバージョン番号をインクリメントしてからじゃないと、バージョン番号が一致せずテストが通らなかった。リリースを自動化しているのにも関わらず、手作業でバージョン番号を上げてからテストし、また戻すとかいう頭の悪い作業が必要だった。</p>

<p>よくよく考えたらテストの時だけコメントを全削除すれば良いだけなので、内部で使っている<code>grunt-contrib-cssmin</code>の<code>options</code>で<code>keepSpecialComments: 0</code>にして解決した。</p>

<pre><code>cssmin: {
  test: {
    options: {
      keepSpecialComments: 0,
    },

    expand: true,
    filter: &#39;isFile&#39;,
    src: [&#39;tmp/*.css&#39;]
  }
}
</code></pre>

<p>これでいつでもちゃんとテストできるようになった。</p>]]></content:encoded>
    </item>

    <item>
      <title>Feedlyでのフィードの分類</title>
      <link>http://hail2u.net/blog/rss/reading-in-feedly.html</link>
      <description>Feedlyでは今は亡きGoogle Readerや不死鳥のごとく蘇った(蘇る予定の)livedoor Readerのように全文表示の状態でサクサク読むのはUI的にもパフォーマンス的にも難しい。読む必要があるフィードとそうでないフィードを分類することは、Feedlyではより重要だと言える。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>RSS</category>
      <guid isPermaLink="true">http://hail2u.net/blog/rss/reading-in-feedly.html</guid>
      <pubDate>Mon, 20 Oct 2014 04:02:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://feedly.com/">Feedly</a>では今は亡き<a href="http://www.google.com/reader/about/">Google Reader</a>や不死鳥のごとく蘇った(蘇る予定の)<a href="http://reader.livedoor.com/">livedoor Reader</a>のように全文表示の状態でサクサク読むのはUI的にもパフォーマンス的にも難しい。読む必要があるフィードとそうでないフィードを分類することは、Feedlyではより重要だと言える。</p>

<h2>Collectionを使う</h2>

<figure>
  <img alt="★と☆を使ってCollectionを作成すると、サイドバーにわかりやすい形でフィードが整理される" src="http://hail2u.net/images/blog/feedly-rating-collection.png">
</figure>

<p>Collectionはフォルダー分けやタグ付けと似ている機能で、登録したフィードを分類する仕組み。複数のCollectionに所属できるので、タグ付けと言った方がわかりやすいかもしれないが、タグはタグで別にそういう機能がある。</p>

<p>ldRのレーティングのような仕組みは、レーティングっぽい名前でCollectionを作成するだけで実現できる。Collectionのソート順はドラッグ・アンド・ドロップで入れ替えられるので、ソート順は特に考慮する必要はない。絵文字や全角記号は通らない……と思いきやその場ではうまく表示されないことがあるものの<kbd>F5</kbd>で再読み込みするとちゃんと表示されるので、わかりやすく★★★☆☆などという名前でCollectionを作ったりすることもできないことはない。</p>

<h2>Must Readを使う</h2>

<figure>
  <img alt="フィードの登録状態を編集できる画面には、Must Readというフラグの有効・無効を切り替えられるチェックボックスが、タイトルのすぐ下に表示されている" src="http://hail2u.net/images/blog/feedly-edit-subscription.png">
</figure>

<p>もうひとつのMust Readは各フィードを登録する時などにつけることができるフラグ。これを有効にしたフィードがひとつでもあると、☆のアイコン付きでMust Readsという項目がサイドバーに作成されるので、そこからアクセスすることになる。</p>

<p>僕はこっちでやっている。Must ReadsだけをFull Articlesにして、それを消化した後、残りの未読をCardsでざっと流し読む。暇じゃなさそうな時はMust Readsを消化したら残りは全部既読にするようにしてたりして、未読が残らないように。</p>

<hr>

<p>ldR終了記念の記事として書いていた部分がなくなったらこんなことしか書くことなくなった。</p>]]></content:encoded>
    </item>

    <item>
      <title>SCSS Lintでbower_componentsディレクトリーを無視する</title>
      <link>http://hail2u.net/blog/software/ignoreing-bower_components-directory-in-scss-lint.html</link>
      <description>SCSS Lintでは**/*.scssなどといった指定でカレント・ディレクトリー以下のSCSSファイルを一気にチェックできる。けどBowerでインストールしたSassパーシャルなどは通らないことが多いので、bower_componentsディレクトリーは無視する方が効率が良い。その場合は設定ファイルでexcludeを使う。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/ignoreing-bower_components-directory-in-scss-lint.html</guid>
      <pubDate>Sun, 19 Oct 2014 15:41:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/causes/scss-lint">SCSS Lint</a>では<code>**/*.scss</code>などといった指定でカレント・ディレクトリー以下のSCSSファイルを一気にチェックできる。けど<a href="http://bower.io/">Bower</a>でインストールしたSassパーシャルなどは通らないことが多いので、<code>bower_components</code>ディレクトリーは無視する方が効率が良い。その場合は設定ファイルで<a href="https://github.com/causes/scss-lint#excluding-files"><code>exclude</code></a>を使う。</p>

<pre><code>exclude:
  - &#39;**/bower_components/**&#39;
  - &#39;**/node_modules/**&#39;
</code></pre>

<p><a href="https://npmjs.org/">npm</a>でインストールすることも間々あると思うので、ついでに無視しておくと良さそう。ドット・ディレクトリーは無視されないと思うけど、<code>.sass-cache</code>には<code>*.scss</code>はないのであまり必要ない気がする。</p>

<p>グローバル的に動作するであろう<code>~/.scss-lint.yaml</code>に書いておくと更に楽。</p>

<hr>

<p>JSONを書かされる毎日だと、YAMLの書きやすさが心地良い。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
