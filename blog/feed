<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <copyright>Copyright &#x00a9; 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <lastBuildDate>Wed, 15 Oct 2014 00:56:02 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" type="application/rss+xml" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>GitHubのwebhooks経由でのPubSubHubbubによるフィードの更新通知</title>
      <link>http://hail2u.net/blog/internet/publishing-feed-via-pubsubhubbbub-using-github-webhooks.html</link>
      <description>PubSubHubbubでフィードの更新通知を行う場合、当然RSSやらが更新された後に行う必要がある。GitHub Pagesにウェブサイトをホスティングさせている場合、ビルドにどれくらい時間がかかるかは不定なので、ローカルで行うことは難しい。しかし、当該リポジトリでwebhookをうまく作成してやると、ビルド完了後に自動で更新通知を行わせることが出来るようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/publishing-feed-via-pubsubhubbbub-using-github-webhooks.html</guid>
      <pubDate>Wed, 15 Oct 2014 00:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://en.wikipedia.org/wiki/PubSubHubbub">PubSubHubbub</a>でフィードの更新通知を行う場合、当然RSSやらが更新された後に行う必要がある。<a href="https://pages.github.com/">GitHub Pages</a>にウェブサイトをホスティングさせている場合、ビルドにどれくらい時間がかかるかは不定なので、ローカルで行うことは難しい。しかし、当該リポジトリでwebhookをうまく作成してやると、ビルド完了後に自動で更新通知を行わせることが出来るようだ。</p>

<p>GitHubリポジトリへの<code>push</code>とGitHub Pagesのビルドには一定でないラグがどうしてもある。<a href="http://jekyllrb.com/">Jekyll</a>を使っているかどうかが一番大きいが、それだけでもないので、何分経てばビルドが終わり、RSSが更新されているかは確実には言えない。かといってその確認をポーリングで行うのはコストが高い。</p>

<p>そこで確実にビルド後に更新通知を行えるように、リポジトリで設定できるwebhook (Settings→Webhooks &amp; Services)のトリガーのひとつである<em>Page build</em>を利用する。ただし、リファレンス実装のPubSubHubbubハブはGitHubのwebhooksが送るデータは解釈できないし、またwebhook側の設定でも通知するデータをカスタマイズすることはできないので、真っ当に利用しようとする場合はプロクシーを作る必要があることになる。</p>

<p>しかし、運が良いことに<a href="https://pubsubhubbub.appspot.com/">GoogleのPubSubHubbubハブ</a>や<a href="https://superfeedr.com/">Superfeedrで作成したハブ</a>は<code>POST</code>だけでなく<em><code>GET</code>でもpublishできる</em>ので、作成するwebhookのPayload URLで<code>hub.url</code>パラメーターの値としてRSS等のURLを指定してやればちゃんと更新を通知することができる。</p>

<pre>https://pubsubhubbub.appspot.com/publish?<mark>hub.mode=publish</mark>&amp;<mark>hub.url=http://example.com/feed</mark></pre>

<p>GoogleのPubSubHubbubハブへ通知する場合はこのようなURLを指定すれば良い。Content-Typeは<code>application/x-www-form-urlencoded</code>に、Secretは空のまま、トリガーの設定はLet me select individual events.を選択してPage buildのみにチェックを入れれば良いだろう。</p>

<p>正常に動いているかは当該webhookのログでは確認できないが、最低限<code>204</code>が返ってきていることだけは確認しておくと良い。実際に通知がうまく言っているかどうかはPubSubHubbubへ対応している<a href="https://feedly.com/">Feedly</a>などのクライアントで確認するしかないと思う。</p>

<p>このウェブサイトのRSSとFeedlyで確認した限りではきちんと動いてるようだ。少なくとも直近3つの記事を公開した時は1分以内にFeedlyで読めるようになっていた。</p>]]></content:encoded>
    </item>

    <item>
      <title>GitHub Pagesへ移行した</title>
      <link>http://hail2u.net/blog/internet/hello-github-pages.html</link>
      <description>好みの問題でJekyllはどうしても使う気になれないのでビルド・システムはそのままに、ホスティング先をGitHub Pagesに移動した。DNS設定もTTL通り5分で反映され、www付きのリダイレクトもうまくいっているようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/hello-github-pages.html</guid>
      <pubDate>Tue, 14 Oct 2014 10:12:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="GitHub Pages" src="http://hail2u.net/images/blog/hello-github-pages.png">
</figure>

<p>好みの問題で<a href="http://jekyllrb.com/">Jekyll</a>はどうしても使う気になれないのでビルド・システムはそのままに、ホスティング先を<a href="https://pages.github.com/">GitHub Pages</a>に移動した。DNS設定もTTL通り5分で反映され、www付きのリダイレクトもうまくいっているようだ。</p>

<p>ビルド・システムは変えないと決めたので、今まではrsyncでリモート・サーバーにミラーしていたのを、そのまま<code>build</code>という名前のサブディレクトリーにミラーするように変える方法にした。その後常に<code>gh-pages</code>ブランチをチェックアウトしている<code>build</code>ディレクトリーで全追加(<code>add --all</code>)してからコミット、そして<code>push</code>するという形で公開する。</p>

<ol>
<li>記事ファイルの作成</li>
<li>ウェブサイト管理用リポジトリー(プライベート)にコミット</li>
<li>HTMLとRSS、およびサイトマップの生成</li>
<li>rsyncで必要なファイルだけサブディレクトリーにミラー</li>
<li><a href="https://github.com/hail2u/hail2u.net">ウェブサイト公開用リポジトリー</a>にコミット</li>
</ol>

<p>このようなフローがGruntで自動実行され、ウェブログの記事はさっくりと公開される。</p>

<h2>ドメインの設定</h2>

<p>wwwの無いいわゆるエイペックス・ドメインはAレコードで設定した。<a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/">Tips for configuring an A record with your DNS provider</a>によると、昔と違って今は複数のIPアドレスを割り当ててやる必要があるようで、それだけには注意した。</p>

<pre><samp>C:&gt; <kbd>nslookup hail2u.net</kbd>
権限のない回答:
名前:    hail2u.net
Addresses:  192.30.252.153
          192.30.252.154
</samp></pre>


<p>www付きでのアクセスをwww無しへリダイレクトさせたい場合は、更にwwwサブドメインをCNAMEを使って<code>hail2u.github.io.</code>に割り当ててやるだけで良いようだ。そうすると対象リポジトリに置かれた<code>CNAME</code>ファイルの中身に従ってGitHub側が良きに計らってくれるようになっている。</p>

<hr>

<p>色々あーでもないこーでもないと考えたりしてる中で、デプロイに使っているオレオレGruntタスクが総入れ替えみたいな感じになった。</p>]]></content:encoded>
    </item>

    <item>
      <title>git grepをVimで使う</title>
      <link>http://hail2u.net/blog/software/using-git-grep-with-vim.html</link>
      <description>Gitのgrepサブコマンドは通常Gitリポジトリーでしか使えない。しかし--no-indexオプションを付けると、Gitリポジトリーではないディレクトリーでも検索できる(もちろんGitリポジトリーでも)。Vimからももちろん使えるので、ackちょっと遅い、ag入れるのが面倒くさい、MSYS上で使ってるとjvgrepの出力が稀におかしい、などの理由でgrepに戻ったりしてる人はgit grepを使うのも良さそう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/using-git-grep-with-vim.html</guid>
      <pubDate>Mon, 13 Oct 2014 00:59:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Gitの<code>grep</code>サブコマンドは通常Gitリポジトリーでしか使えない。しかし<code>--no-index</code>オプションを付けると、Gitリポジトリーではないディレクトリーでも検索できる(もちろんGitリポジトリーでも)。Vimからももちろん使えるので、<a href="http://beyondgrep.com/">ack</a>ちょっと遅い、<a href="http://geoff.greer.fm/ag/">ag</a>入れるのが面倒くさい、MSYS上で使ってると<a href="https://github.com/mattn/jvgrep">jvgrep</a>の出力が稀におかしい、などの理由でgrepに戻ったりしてる人は<code>git grep</code>を使うのも良さそう。</p>

<pre><code>set grepprg=git\ grep\ --no-index\ -I\ --line-number
</code></pre>

<p><code>grepformat</code>を編集しないで済ませるためには<code>--line-number</code>オプションを追加して、行番号を表示させる必要がある。僕はバイナリ・ファイルを無視する<code>-I</code>オプションも合わせて追加しておいた。パフォーマンスをあげるために<code>--no-color</code>オプションを付けるのも良さそう。</p>

<hr>

<p>Gitの<code>grep</code>サブコマンドだと、グロブの指定をせずにデフォルトで再帰的に下層ディレクトリーを検索してくれるのも楽。検索対象を絞りたい場合はglob(7)に従った形で指定したり、<code>--max-depth</code>オプションを追加して制限したりするだけなので、わかりにくいということはなさそう。agのオプションは覚えられる気しないけど、これなら大丈夫っぽい。</p>]]></content:encoded>
    </item>

    <item>
      <title>白の無地Tシャツ</title>
      <link>http://hail2u.net/blog/gadget/white-plain-t-shirt.html</link>
      <description>GAPのClassic.Tがついに終息したらしく、店頭から消えた。新しいEssential crewneckは薄くなってる上にちょっと肌触りが違う感じがする。生地の厚さや着丈、首の開き具合、丈夫さ、タグ無し、そして値段などさまざまな点でGAPのClassic.Tは気に入っていたので、これと同じくらい気に入る白の無地Tシャツを探すのは大変そう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/white-plain-t-shirt.html</guid>
      <pubDate>Sun, 12 Oct 2014 00:07:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://www.gap.co.jp/">GAP</a>のClassic.Tがついに終息したらしく、店頭から消えた。新しいEssential crewneckは薄くなってる上にちょっと肌触りが違う感じがする。生地の厚さや着丈、首の開き具合、丈夫さ、タグ無し、そして値段などさまざまな点でGAPのClassic.Tは気に入っていたので、これと同じくらい気に入る白の無地Tシャツを探すのは大変そう。</p>

<p>商品の性格的にも値段的にも試着しづらいので、勘で買うしかないのが精神衛生上良くない。少し前に公開されていた<a href="http://www.houyhnhnm.jp/series/008356.html">Houyhnhnmの無地Tシャツ特集</a>を見たりしてみたけど、まったくピンと来ない。そのうちHanesのJapan Fitとかを騙されて買ってしまいそう。</p>

<p>一生買い続けるつもりだったくらい気に入ってたものが消えると言葉にならないくらい辛い。</p>]]></content:encoded>
    </item>

    <item>
      <title>Mobile Safari 8でposition: fixedした擬似要素が完全に位置が固定されない</title>
      <link>http://hail2u.net/blog/webdesign/fixed-pseudo-element-on-mobile-safari-8.html</link>
      <description>Style GuideをMobile Safari 8で確認していて気づいたのだけど、擬似要素をposition: fixedした場合、スクロールしている最中は位置が変化しないようだ。つまりスクロールを止めた後で位置がアップデートされるので、他のブラウザーのように完全に位置が固定されない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/fixed-pseudo-element-on-mobile-safari-8.html</guid>
      <pubDate>Sat, 11 Oct 2014 01:01:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt=".elm::before { position: fixed }" src="http://hail2u.net/images/blog/fixed-pseudo-element-on-mobile-safari-8.png">
</figure>

<p><a href="http://hail2u.net/about/style-guide/">Style Guide</a>をMobile Safari 8で確認していて気づいたのだけど、擬似要素を<code>position: fixed</code>した場合、スクロールしている最中は位置が変化しないようだ。つまりスクロールを止めた後で位置がアップデートされるので、他のブラウザーのように完全に位置が固定されない。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/598.html">Fixed Pseudo Element on Mobile Safari 8</a></p>

<p>デモでは見出しと概要に続く「Lorem Ipsum」という文字列が擬似要素として仕込んである。これを同時に<code>position: fixed</code>で位置固定しているが、Mobile Safari 8ではスクロール中は位置が変化しないので、画面外にスクロールアウトしてしまう。スクロールを止めると位置固定で期待される位置に改めて描画される。</p>

<p>擬似要素ではない場合は今まで通り完全に位置が固定される。</p>

<hr>

<p>パフォーマンスの向上を受けてか<a href="http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal/">Mobile Safari 8でJavaScriptでのスクロール・イベントの扱いが少し変わったこと</a>は注目されているが、CSSでは場合によっては似たようなことがまだ起こるようだ。</p>

<p>回避方法はまったく思いつかない。ただバグだとは思うので、そのうち直りそうではある。それまでは擬似要素と位置固定の組み合わせは鬼門と覚えておいた方が良さそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>pre要素での折り返し</title>
      <link>http://hail2u.net/blog/webdesign/wrapping-in-pre-element.html</link>
      <description>長らくpre要素で折り返されるようにしていたが、少し前に折り返さずにスクロールバーを表示するように変更した。主な理由は狭い画面では折り返されると読めたものではないということがはっきりとわかったからだ。しかしそこそこ広い画面では折り返された方が読みやすいし、見た目の収まりも良い。つまりメディアクエリでうまいこと分岐すると良いようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/wrapping-in-pre-element.html</guid>
      <pubDate>Thu, 09 Oct 2014 22:44:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>長らく<code>pre</code>要素で折り返されるようにしていたが、少し前に折り返さずにスクロールバーを表示するように変更した。主な理由は狭い画面では折り返されると読めたものではないということがはっきりとわかったからだ。しかしそこそこ広い画面では折り返された方が読みやすいし、見た目の収まりも良い。つまりメディアクエリでうまいこと分岐すると良いようだ。</p>

<p>このウェブサイトではコンテンツが収まるような幅という基準でレイアウトを切り替えているので、<code>pre</code>要素への折り返しの適用もそこで分岐することにした。</p>

<pre><code>pre {
  overflow-x: auto;
}

@media (min-width: 39.118rem) {
  pre {
    overflow-x: visible;
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
}
</code></pre>

<p>このようにするとデフォルトでは<code>overflow-x: scroll</code>によって横スクロールで表示させるようになる(ブラウザーとOSによってはスクロールバーが表示される)。<code>39.118rem</code> (色々な計算に基づくものなので中途半端な数字になっている)を超えると、<code>overflow-x</code>プロパティーが規定値の<code>visible</code>に戻り、<code>white-space</code>と<code>overflow-wrap</code>プロパティーによりURLのような折り返されにくい文字列も含め折り返されるように変化する。</p>

<hr>

<p>モバイル機器では横スクロールは自然に行える作業なので、横にはみ出していたら横にスワイプするというのはもはやユーザーも学習しえたのではないかと思う。<a href="http://hail2u.net/blog/webdesign/horizontal-overflowed-navigation.html">Appleのウェブサイトでグローバル・ナビゲーションに採用されたこと</a>も後押ししてくれる。と、思う。</p>

<p>そう考えて横スクロールを強制する形にした(戻した)のだけど、<code>overflow-x</code>により横スクロールバーが表示されると非常にうっとうしいことも思い出した。特にWindowsではいまだ自動非表示スクロールバーに確実にする方法が無いので、読み進める方向と直交する方向にUIウィジェットがどっかと居座るのはかなり厳しい。</p>

<p>それぞれに向いた表示を両立するためには、メディアクエリで適切に分岐するのが良いのではないかと考えてこうしてみた。</p>]]></content:encoded>
    </item>

    <item>
      <title>反論</title>
      <link>http://hail2u.net/blog/misc/refutation.html</link>
      <description>好きなものや気に入っているものについて否定された時に、そうじゃないだろと反論したい気になるのはわかる。しかし、往々にして反論のための論理で食ってかかることが多く、それでは溝を広げる結果にしかならない。溝を埋めることは難しいが、食ってかかってわざわざ溝を広げる必要もない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/refutation.html</guid>
      <pubDate>Thu, 09 Oct 2014 12:32:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="Face with No Good Gesture" src="http://hail2u.net/images/blog/refutation.png">
</figure>

<p>好きなものや気に入っているものについて否定された時に、そうじゃないだろと反論したい気になるのはわかる。しかし、往々にして反論のための論理で食ってかかることが多く、それでは溝を広げる結果にしかならない。溝を埋めることは難しいが、食ってかかってわざわざ溝を広げる必要もない。</p>

<p>反論のための論理で展開される記事でありがちなのは、否定された点についてすべて反論するような形のものだ。対象のトピックについて気に入ってはいてもパーフェクトであることはまずないので、それらのいくつかは自分が今までまったく気にしていなかった点や我慢していた点が必ず含まれるはずだ。そういった点に対しても反論しようとすると、反論のポイントがずれやすい。</p>

<p>そういった反論は埋めたい溝とは見当違いのところを埋めようとする作業に他ならない。そのため溝を埋めるどころか、周辺の味方に迷惑をかけることになる。</p>

<p>そのような記事は、最終的に反論することそのものが主眼に置かれた記事という印象になりやすい。そういう印象の記事は、たとえ書かれた反論のいくつかに見るべきところがあっても、読者が適切に消化することは難しくなる。下手をするとトピックについて好意的に考えていた読者を混乱させて、ネガティブな印象を与えてしまうことになる。</p>

<p>近頃は溝を埋めるのではなく溝を飛び越えてもらおうと、魅力的に演出するような形で記事が書かれることが多くなった。反論のための記事よりは形としてはまだ良いが、こちらは飛び越えてもらった後に幻滅される危険性があり、結果としてはもっと厳しいものになる。狙いとしては5人飛び越えてもらって2人残ればいいというようなものなのだろうけれども、見方を変えると3人の相容れない人々を作り出すことになる。</p>

<hr>

<p>反論や誘導といった自分の都合に近いものを主眼に置いて記事を書くと、それに振り回される人々や振り回された人々の周囲にいる人々をただただ疲弊させる結果になる。と言うと近いだろうと思う。</p>

<p>とにかく何かを否定するのはすごく難しいので、よほどの事情が無い限りはしないことにしている。</p>]]></content:encoded>
    </item>

    <item>
      <title>検索ボックスのグローバル・フッターへの組み込み</title>
      <link>http://hail2u.net/blog/webdesign/searchbox-in-footer.html</link>
      <description>検索ボックスを復活させた後、置いただけだったのをグローバル・フッターへ組み込んだ。バランスのため制作者名の位置を左に動かしたり、グローバル・フッターの文字サイズが小さくなっているのを考慮して、検索ボックスの余白を調節したりもした。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/searchbox-in-footer.html</guid>
      <pubDate>Wed, 08 Oct 2014 10:27:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="広い画面では左から製作者名、ライセンス情報などのリンク、検索ボックスと一直線に横に並ぶようになった" src="http://hail2u.net/images/blog/searchbox-in-footer.png">
</figure>

<p>検索ボックスを復活させた後、置いただけだったのをグローバル・フッターへ組み込んだ。バランスのため制作者名の位置を左に動かしたり、グローバル・フッターの文字サイズが小さくなっているのを考慮して、検索ボックスの余白を調節したりもした。</p>

<p>検索ボックスがグローバル・フッターにあることは特におかしくはないけど、アクセス性という点で大きな問題があったりはする。あらゆるブラウザーに<code>role=&quot;search&quot;</code>の要素へ簡単にフォーカスを当てられる仕組みとかがあれば良いけど、ないものはないし、あってもきっと使われない。グローバル・ヘッダーに置く方が、ユーザーの経験則からアクセス性は良いのは間違いなさそう。</p>

<p>ただ文章量が多いとはいえこういった個人規模のウェブサイトではさほど頻繁に検索したいと思われるわけではない(実際にあまり使われてない)ので、プライオリティはかなり低い。そのためグローバル・ヘッダーにどーんと設置してもスペースの無駄遣いと言って良い。</p>

<p>グローバル・ヘッダーに虫眼鏡のアイコンだけを置き、それをクリック(タッチ)すると検索ボックスがオーバーレイ表示されるようなアプローチは、その両者の間を取ったもの。最近よく見かける。しかし、これはこれでアクセス性の悪さはわずかに改善はされるけど、ステップが増えるので解消されるわけじゃない。実装の意外な面倒さを考えるとものすごく微妙な感じがする。</p>

<hr>

<p>ということでこのウェブサイトではグローバル・フッターに組み込み、ユーザーの学習能力と想像力に期待することにした。フォームのスタイルと配置のことを考えてると時間がいくらあっても足らない。</p>]]></content:encoded>
    </item>

    <item>
      <title>予期せぬ問題</title>
      <link>http://hail2u.net/blog/misc/unexpected-problem.html</link>
      <description>予期せぬ問題が起き、その問題はまったく手が出せない類の問題で、ただいたずらに疲弊した。問題がどのようなものかもはっきりとはわからないため、まず専門家に確認してもらって問題をちゃんと明確にしなければならないので、それまでもやもやが続く。このような問題が起きることをまったく予期していなくて、ストレスがすごい。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/unexpected-problem.html</guid>
      <pubDate>Tue, 07 Oct 2014 01:19:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>予期せぬ問題が起き、その問題はまったく手が出せない類の問題で、ただいたずらに疲弊した。問題がどのようなものかもはっきりとはわからないため、まず専門家に確認してもらって問題をちゃんと明確にしなければならないので、それまでもやもやが続く。このような問題が起きることをまったく予期していなくて、ストレスがすごい。</p>

<p>台風で明らかにダメージをうけたのは初めての経験で、こういう自分に原因が無い突発的な問題はかなり辛い。19号が来る前に解決できそうもないので、なんとか応急処置をしてもらって乗り切り、その後うまくなんとかなることを祈るしかない。</p>

<p>出来れば安価に。</p>]]></content:encoded>
    </item>

    <item>
      <title>カラースキーム</title>
      <link>http://hail2u.net/blog/software/colorscheme-2014-10-06.html</link>
      <description>カラースキームはPhotoshopのスウォッチで管理する事がほとんど。多くのツールで対応されている業界標準というだけの理由で、特にこの形式そのものがすごく便利というわけじゃない。とりあえずどう表示させても潰れることがまずないSVGで作ってみたけど、あまり意味なさそう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/colorscheme-2014-10-06.html</guid>
      <pubDate>Mon, 06 Oct 2014 10:00:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="2014/10/06現在のこのウェブサイトのカラースキーム" src="http://hail2u.net/images/blog/colorscheme-2014-10-06.svg">
</figure>

<p>カラースキームはPhotoshopのスウォッチで管理する事がほとんど。多くのツールで対応されている業界標準というだけの理由で、特にこの形式そのものがすごく便利というわけじゃない。とりあえずどう表示させても潰れることがまずないSVGで作ってみたけど、あまり意味なさそう。</p>

<p><code>rect</code>要素の幅・高さ・水平位置・垂直位置の全てで<code>%</code>を使って自在に拡大縮小できるようにした上で、<code>shape-rendering</code>プロパティーで<code>crispEdges</code>を指定することで境界のシャープさを維持させ、色が潰れないように。</p>

<pre><code>&lt;svg&gt;
  &lt;defs&gt;
    &lt;style&gt;&lt;![CDATA[
      rect {
        shape-rendering: crispEdges;
      }
    ]]&gt;&lt;/style&gt;
  &lt;/defs&gt;
  &lt;rect style=&quot;fill:#3C3330&quot; width=&quot;20%&quot; height=&quot;12.5%&quot;  x=&quot;0%&quot;  y=&quot;0%&quot;/&gt;
  ...
&lt;/svg&gt;
</code></pre>

<hr>

<p>簡単なHTMLにインライン・スタイルで表を作って、開発者ツールで開くとかのが良さそうな気がしてきた。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
