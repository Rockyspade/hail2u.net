<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Mon, 20 Apr 2015 05:01:28 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>SVGフィルターの利用</title>
      <link>http://hail2u.net/blog/webdesign/using-svg-filters.html</link>
      <description>SVGフィルターの参照はCSSからurl()関数で行うことができるわけだが、やはりそのフィルターが定義されたSVGファイルが外部ファイルというのは使い勝手が悪い。今のところCSSとして書けるようになる予定はなさそうなので、どうやってSVGファイルを他のファイルへ埋め込んでやるかということになりそうだ。具体的には、HTMLドキュメントへインラインSVGとして埋め込んでも、CSSファイルへData URLとして埋め込んでも可能なようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/using-svg-filters.html</guid>
      <pubDate>Mon, 20 Apr 2015 05:01:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>SVGフィルターの参照はCSSから<code>url()</code>関数で行うことができるわけだが、やはりそのフィルターが定義されたSVGファイルが外部ファイルというのは使い勝手が悪い。今のところCSSとして書けるようになる予定はなさそうなので、どうやってSVGファイルを他のファイルへ埋め込んでやるかということになりそうだ。具体的には、HTMLドキュメントへインラインSVGとして埋め込んでも、CSSファイルへData URLとして埋め込んでも可能なようだ。</p>

<h2>インラインSVG</h2>

<p>SVGはそのままインラインでHTMLドキュメントへ埋め込むことができるので、特に問題はない。Chrome 42とFirefox 37では共に正常に反映されているようだ。</p>

<p>View Demo: <a href="/pub/test/622-1.html">Inline SVG</a></p>

<pre><code>.test {
  filter: url(&#39;#foo&#39;);
}
</code></pre>

<p>フィルターへの参照はファイル名なしのURL識別子のみで行う。こちらも特に難しいところはない。</p>

<p>注意するところはインラインに埋め込んだSVGが空白でレンダリングされてしまうので、<code>svg</code>要素の<code>height</code>と<code>width</code>属性の値を<code>0</code>にしておくことくらいだろう。CSSで<code>display: none</code>するとフィルターごと消える結果になるようで、フィルターをかけた要素が真っ白になる。</p>

<h2>Data URL</h2>

<p>さほど長いファイルでもないのでData URL化しても問題ない。普通にData URL化して最後にURL識別子を追加するだけだ。SVGOなどを使ってData URL化する場合、デフォルトでID属性が削除されてしまうことには気をつけておいた方が良い。</p>

<p>View Demo: <a href="/pub/test/622-2.html">Data URL</a></p>

<pre><code>.test {
  filter: url(&#39;image/svg+xml,%3Csvg%20...%3C%2Fsvg%3E#foo&#39;);
}
</code></pre>

<p>しかし残念ながらChrome 42ではプロトコル・ミスマッチでエラーになり、フィルターが適用されない。現状では使えないという結論にはなるが、将来的には改善されそうな気配はあるため、覚えておいても損はない。この書き方と参照の仕方だとCSSファイル内で完結するという大きなメリットがあるからだ。</p>

<hr>

<p>結局のところ、今は外部SVGファイルを参照するというのが一番安定、確実だと言える。しかしながらこの辺りの仕様はセキュリティーと実装の兼ね合いで流動的なところなので、ふと気づくともっとすっきりとしたやり方でできるようになるかもしれない。そういう点も踏まえて、これでいいやではなく様々なアプローチは考えておくべきだとは言えそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>色覚異常を再現するSVGフィルター</title>
      <link>http://hail2u.net/blog/webdesign/color-blindness-emulation-svg-filter.html</link>
      <description>多くのウェブ制作者達が色覚異常について考えることはまずない。せいぜいコントラストを確保したり、リンクの下線を消さないようにしたりすることで、グレースケールでもそれなりに識別できるように注意するくらいだろう。それで十分とも言えそうではあるが、それ以上考えようにも取っ掛かりがないためそれで止まっているとも言える。その取っ掛かりとして色覚異常を再現するSVGのフィルターを作った。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/color-blindness-emulation-svg-filter.html</guid>
      <pubDate>Sun, 19 Apr 2015 00:41:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/color-blindness-emulation-svg-filter.png"><img alt="同じ画像をいくつかの色覚異常をエミュレートするSVGフィルターを通して加工したサンプル" src="/images/blog/color-blindness-emulation-svg-filter.png"></a>
</figure>

<p>多くのウェブ制作者達が色覚異常について考えることはまずない。せいぜいコントラストを確保したり、リンクの下線を消さないようにしたりすることで、グレースケールでもそれなりに識別できるように注意するくらいだろう。それで十分とも言えそうではあるが、それ以上考えようにも取っ掛かりがないためそれで止まっているとも言える。その取っ掛かりとして色覚異常を再現するSVGのフィルターを作った。</p>

<p>Download: <a href="https://github.com/hail2u/color-blindness-emulation">Color Blindness Emulation</a></p>

<p><code>filters.svg</code>に含まれる8つのフィルターは、そのアルゴリズムはともかく、<code>feColorMatrix</code>要素を使ったごく簡単なものだ。</p>

<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;svg
  xmlns=&quot;http://www.w3.org/2000/svg&quot;
  version=&quot;1.1&quot;&gt;
  &lt;defs&gt;
    &lt;filter id=&quot;protanopia&quot;&gt;
      &lt;feColorMatrix
        in=&quot;SourceGraphic&quot;
        type=&quot;matrix&quot;
        values=&quot;<mark>0.567, 0.433, 0,     0, 0
                0.558, 0.442, 0,     0, 0
                0,     0.242, 0.758, 0, 0
                0,     0,     0,     1, 0</mark>&quot;/&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
&lt;/svg&gt;
</code></pre>

<p>このような行列によってProtanopia (1型2色覚/赤色盲)はエミュレートすることができる。</p>

<p>利用はFirefox 35以降やChrome 18以降、Safari 6以降ならばCSS経由で行える。<a href="http://www.w3.org/TR/filter-effects/#FilterProperty"><code>filter</code>プロパティー</a>(Internet Explorerで実装されている独自の<code>filter</code>プロパティーとは違うもの)で<code>url()</code>を使ってSVGファイルを参照すれば良い。</p>

<p>View Demo: <a href="/pub/test/622.html">Color Blindness Emulator with Filter Effects via CSS</a></p>

<p>デモではPlaceIMGの画像をそれぞれフィルターをかけて色覚異常の状態をエミュレーションしている。画像によっては違いがわかりづらいが、色覚異常のタイプと画像によって大きく結果が異なるということがわかるということでもあるだろう。再読み込みすれば様々な画像で確認できるので試してみると良い。Chromeではフィルターを適用する処理がかなり重いようで、CPUを占領してしまうことには留意して欲しい。</p>

<pre><code>.protanopia {
  filter: url(&#39;622.svg#protanopia&#39;);
}
</code></pre>

<p><code>filter</code>プロパティーでは<code>blur()</code>などの組み込み関数を使う以外にも、このようにSVGの<code>filter</code>要素として定義したフィルターを<code>url()</code>を使って参照することができる。具体的には予めSVGの<code>filter</code>要素にIDを振っておき、URL識別子で参照することになる。他にも参照する方法はあるが、少しややこしく挙動も微妙なためここでは触れない。</p>

<hr>

<p>最終的にはこれを使って任意のウェブページを色覚異常をエミュレートした形で確認するツールを作りたい。そういったツールを使って常に確認するべきだとは思わないが、そういったツールを一度体験するだけでも色覚異常者が見ている世界について少しだけ知識を得ることができるはずだ。</p>

<p>視覚障害者と違い、メディア・タイプで判別できない世界であることもまた難しい点だ。視覚障害者へはそれなりにまともにマークアップして、CSSをうまく切り分けてやるだけでベースラインは確保できそうだが、色覚異常者へはそういうアプローチでは届くことはない。カラー・スキームの制作にもう一つ考慮すべきことが加わることは間違いない。</p>

<p>例えばこのウェブサイトではブルーがメイン・カラーとなっているが、仮にこれに加えて所々でイエローを使っていたりすると、Tritanopia (3型2色覚/青色盲)の人にはブルーはグレーに、イエローはピンク(に近い色)に見えるため、ピンクに見える部分がメイン・カラー、すなわちリンク等に誤解されてしまうかもしれない。</p>

<p>これはもちろん極端な例だが、そういったことがわかるかもしれないツールがあることは、取っ掛かりとしては悪くはないはずだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>Gillette Proglide Flexball</title>
      <link>http://hail2u.net/blog/gadget/gillette-proglide-flexball.html</link>
      <description>ジレットから新しく出たフレックスボールが良さそうだという話なので、ちょうど替刃が切れるタイミングということもあって、ホルダーごと買った。口角の辺りや顎の付け根あたりがずいぶんと剃りやすくなったような気がする。傑作っぽい。ボールの部分のアシンメトリーなデザインも好き。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/gillette-proglide-flexball.html</guid>
      <pubDate>Sat, 18 Apr 2015 15:37:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/B00RCK5W72/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00RCK5W72&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="ジレット プログライド フレックスボール マニュアルホルダー 替刃2個付" src="http://ecx.images-amazon.com/images/I/51Gly8ctAsL.jpg"></a>
</figure>

<p>ジレットから新しく出た<a href="http://www.amazon.co.jp/gp/product/B00RCK5W72/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00RCK5W72&amp;linkCode=as2&amp;tag=hail2unet-22">フレックスボール</a>が良さそうだという話なので、ちょうど替刃が切れるタイミングということもあって、ホルダーごと買った。口角の辺りや顎の付け根あたりがずいぶんと剃りやすくなったような気がする。傑作っぽい。ボールの部分のアシンメトリーなデザインも好き。</p>

<p>フレックスボールの効果は、今まで何回か滑らせないと剃れなかったところが1回か2回できれいに剃ることができるようになったことと、凹凸の激しいところでもそのまま剃ることができるようになったことに集約できそう。それだけなんだけど、格段に良くなったような印象。</p>

<p>今のところ商品的な欠点はまったくないのだけど、ホルダーを置いておくためのケースが自立するものではなくなってしまったのがすごく残念。古いケースにははまらないので、新しいケースのまま平らな状態で置くか、ペン立て的なものに立てて置くかする必要がある。あとCM。</p>

<hr>

<p>4/30までAmazonで300円引きで買えるキャンペーンをやっている。古いモデルのホルダーを使っている人も替え刃はそのまま使えるので、良い機会な気がする。マニュアルホルダーの方だと安くて替刃が2個付いててお得感高い。</p>]]></content:encoded>
    </item>

    <item>
      <title>Chrome 42におけるフォント設定とlang属性</title>
      <link>http://hail2u.net/blog/webdesign/font-preference-and-lang-attribute-on-chrome-42.html</link>
      <description>Chrome 42でこのウェブサイトの日本語部分が変わってしまった(かもしれない)。内部的な標準フォント設定が変わったことにもよるが、それだけではない。設定で指定したSans SerifフォントがCSSのsans-serif汎用ファミリーに反映されなくもなった。lang属性がある要素のみで再現する。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/font-preference-and-lang-attribute-on-chrome-42.html</guid>
      <pubDate>Fri, 17 Apr 2015 02:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Chrome 42でこのウェブサイトの日本語部分が変わってしまった(かもしれない)。内部的な標準フォント設定が変わったことにもよるが、それだけではない。設定で指定したSans SerifフォントがCSSの<code>sans-serif</code>汎用ファミリーに反映されなくもなった。<code>lang</code>属性がある要素のみで再現する。</p>

<p>View Demo: <a href="/pub/test/621.html">lang=&quot;ja&quot;, font-family, and Chrome 42</a></p>

<p>例えばWindowsでは仮にChromeの設定(<code>chrome://settings/fonts</code>)からSans SerifフォントをＭＳ Ｐゴシックや游ゴシックなどに変更していた場合、<code>lang=&quot;ja&quot;</code>を指定している最初のセクションのみChrome内部で設定されている日本語標準フォントであるメイリオになってしまう。OS Xでも同じ挙動になる。条件は<code>lang</code>属性というだけで、Googleの検索結果ページなどでも同様の現象は起こる。</p>

<p>挙動としてはInternet Explorerに似ている。Internet Explorerではフォントの変更は可能だが、その変更はCSS等でフォントが指定されていない要素にのみ反映される。そのため多くの場合、<code>sans-serif</code>汎用ファミリーは常に内部で設定されている日本語標準フォントであるメイリオ(Windows 8以降)またはＭＳ Ｐゴシック(Windows 7以下)で表示される。</p>

<p>多くのウェブページで<code>lang</code>属性が適切に指定されるようになりつつある現状だと、ChromeでもInternet Explorerと同じようにフォント設定が反映されなくなったと言って良いだろう。</p>

<hr>

<p>GoogleのURLを例にして<a href="https://code.google.com/p/chromium/issues/detail?id=477033">イシュー</a>は立てておいた。すぐに返答があり、<code>lang</code>属性がある場合、通常のフォント設定からは触ることができない内部的なフォント設定を利用することになったので、WontFixということのようだ。その内部的なフォント設定を変えたい場合は<a href="https://chrome.google.com/webstore/detail/advanced-font-settings/caclkomlalccbpcdllchkeecicepbmbm">Advanced Font Settings</a>を使えば可能ではあるということらしい(変更できることは確認した)。</p>

<p>しかしこの実装のままだと、<code>lang</code>属性が適切に指定されたウェブページでフォント設定がほとんど意味を成さなくなってしまう。ユーザーの設定に委ねようと日本語フォントを指定せずにおいていても、常に内部的なフォント設定が強制的に使われることになるという点も好みではない。単純に<code>sans-serif</code>汎用ファミリーがフォント設定で指定したフォントと内部的なフォント設定を連結したものに展開されれば解決しそうだけど、それではダメなのだろうか。</p>

<p>この仕様によってどういう問題があるのかうまく説明できなくてもどかしい。設定で変えたフォントがほとんど使われないみたいな状態が正しいとはどうしても思えない。最悪の場合<code>lang</code>属性を使うのはやめましょうと言う人が出てきたりするかもしれないとか大げさなことを言いたくなってしまう。そんなことはもちろんないと思うが。</p>]]></content:encoded>
    </item>

    <item>
      <title>我慢の期間</title>
      <link>http://hail2u.net/blog/software/patience-time.html</link>
      <description>MovableTypeとWordPressとJekyllとHugoや、Gruntとgulp、SassとLESSとStylus、果てはjQueryなどの話はスケールやパターンを変えて繰り返される。その話はあたかも特定の何かに依存することが良くないとか新しいこっちのがすごいぞというように結論づけられることが多くて、僕にはちょっと頷けないこともあったりする。大切なのは何を解決しようとしていたかを忘れないことだと思う。複雑化しそうな場合にそこから先へ踏み込まずに我慢する期間がいるとかかも。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/patience-time.html</guid>
      <pubDate>Thu, 16 Apr 2015 15:10:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>MovableTypeとWordPressとJekyllとHugoや、Gruntとgulp、SassとLESSとStylus、果てはjQueryなどの話はスケールやパターンを変えて繰り返される。その話はあたかも特定の何かに依存することが良くないとか新しいこっちのがすごいぞというように結論づけられることが多くて、僕にはちょっと頷けないこともあったりする。大切なのは何を解決しようとしていたかを忘れないことだと思う。複雑化しそうな場合にそこから先へ踏み込まずに我慢する期間がいるとかかも。</p>

<p>GNU makeでいいじゃん的な結論はそれは確かにビルドという点ではそうなんだけど、Gruntが解決しようとしていたのはそこじゃない。npmという生態系の中で完結させやすいタスク実行環境を手軽に用意することができることで、それ以上でもそれ以下でもない。実行速度以外にも腐臭を放つAPIやプラグイン間で一貫性のない設定方法など多くの欠点があるものの、ユーザーが解決したかった問題はそれなりにうまく解決できてる(よね？)。</p>

<p>一方gulpはGruntが抱えてしまっている実行速度の遅さとプラグインのnpmパッケージからの乖離という問題を解決しようとしたもの。その反面Node.jsにおけるStreamという概念の高い理解を要求するようになってしまった。Node.jsで開発するわけじゃないウェブサイト制作者にとってはほぼgulpのためだけに必要となるもので、Node.jsという生態系には素晴らしいものではあるけれど、実際に利用する層とは微妙にミスマッチだとも思う。</p>

<p>Sassの利用は今使えるCSSに足りないものを補完することが主な目的なわけだけれども、特に<code>@extend</code>という強力な仕組みのおかげ(せい)でCSSに無い概念を持ち込むことに成功してしまった。僕達が解決したかったもの以上の力を持つツールになってしまったということで、それによってCSSというレベルでは不必要と思われる複雑化が日常化してしまった。</p>

<p>WordPressやjQueryは……もう忘れたけど、なんとなく炎上した時にどうとかInternet Explorer 6がどうとかのことを想像してくれれば解決したかったものは多分そこにある。</p>

<hr>

<p>こういった何かを解決するためのツールは、万能ではないことはもちろんだけど、解決したい何か<em>以外</em>にも魅力的な機能があったり、解決するために犠牲になった部分があったりしてしまう。自分が作ったツールじゃないのでそりゃそうだといえばそうなんだけど。そういった目の前に美味しそうにぶら下がってるけど実際には不必要な便利さや、自分が解決したい問題とはあまり関係ない欠点に惑わされずに、常に自分が何を解決したかったのかを忘れないことが大切なんじゃないかなと強く思う。</p>

<p>あるツールを使っていて欠点に気づくことは良くあるけど、その欠点を解決した同じようなツールが必ずしも自分の解決したかった問題とスケールや運用においてマッチしているとは限らない。もちろん問題が解決されていればそれで良く、新しいツールを学ぶ必要はないというわけではなく、目新しい機能や関係のない改善に惑わされずにツールの学習を積み重ねていくことが必要だということ。そしてその学習の間には、現実の問題を解決するために現状に踏みとどまり我慢する期間がそれなりに必要になると思う。僕にとってはSCSSやGruntはまさにこの期間にあったりする。結構長い。</p>]]></content:encoded>
    </item>

    <item>
      <title>応答していない表</title>
      <link>http://hail2u.net/blog/webdesign/un-responsive-tables.html</link>
      <description>Responsive Tables in Pure CSSという記事を読んだ。狭い画面での表のレンダリングに問題があって、それを解決したいということは勿論わかるのだけど、これはないなという感想しか残らない。表は行と列の交点でデータを把握でき、その上下左右と簡単に比較できるというためのものであって、そういった機能を破壊してビューポートに収めようというのはもはやレスポンシブではない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/un-responsive-tables.html</guid>
      <pubDate>Wed, 15 Apr 2015 02:05:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://techblog.livingsocial.com/blog/2015/04/06/responsive-tables-in-pure-css/">Responsive Tables in Pure CSS</a>という記事を読んだ。狭い画面での表のレンダリングに問題があって、それを解決したいということは勿論わかるのだけど、これはないなという感想しか残らない。表は行と列の交点でデータを把握でき、その上下左右と簡単に比較できるというためのものであって、そういった機能を破壊してビューポートに収めようというのはもはやレスポンシブではない。</p>

<p>レスポンシブ・ウェブ・デザインが広まってから何度もこの類いのものを見せられてきた。もしこのように各行を展開して表示したいようなコンテンツであるのなら、<code>dl</code>要素を使うべきで、それを広い画面ではコンパクトに表のようにデザインするべきだろう。逆に表である必要があるのなら、変にセルが縮まったりしないように調節し、横にスクロールして閲覧できるようにするべきだ。</p>

<p>ただ確かにモバイル機器のブラウザーでの表の閲覧には難がある。せめて<code>th</code>を使ったら上端と左端のセルは固定してスクロールできる仕組みが組み込みで用意されてたりすると良いのかなと思うがなかなか難しい。しかしそれをどうにかしようとして表としての機能を失わせるのは本末転倒だろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSSで月の満ち欠け</title>
      <link>http://hail2u.net/blog/webdesign/css-lunar-phase.html</link>
      <description>月の満ち欠けは球体に光を当てた結果のもので、円を円でカットするようなものではない。CSSでは立体を立体としては扱うのは難しいので、それを平面として捉え、半円を円で膨らませたり押し出したりすることで近いものにすることが可能になりそうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/css-lunar-phase.html</guid>
      <pubDate>Tue, 14 Apr 2015 00:20:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/css-lunar-phase.png"><img alt="新月から新月へ" src="/images/blog/css-lunar-phase.png"></a>
</figure>

<p>月の満ち欠けは球体に光を当てた結果のもので、円を円でカットするようなものではない。CSSでは立体を立体としては扱うのは難しいので、それを平面として捉え、半円を円で膨らませたり押し出したりすることで近いものにすることが可能になりそうだ。</p>

<p>View Demo: <a href="/pub/test/620.html">Lunar Phase</a></p>

<p>CSSグラデーションで作った半円に、<code>border-radius</code>で作った半楕円を組み合わせることで実現している。月齢15以上の場合は半円を逆転させる。地球と太陽と月の位置関係から平面で捉えると、半円を基本にするということであっている(と思う)。</p>

<p>例えば月齢5の場合は以下の様なCSSで構成されている。</p>

<pre><code>.moon {
  border-radius: 51%;
  height: 3rem;
  overflow: hidden;
  position: relative;
  width: 3rem;
}

.phase5 {
  background-image: linear-gradient(to right, #ff0 0, #ff0 50%, #000 50%, #000 100%);
}
</code></pre>

<p><code>.moon</code>が基本の月で、それに前述のとおりCSSグラデーションで半円になるように色を塗っておく。左から明るくなっていく。</p>

<pre><code>.moon::before,
.moon::after {
  content: &#39;&#39;;
  display: block;
  height: 100%;
  position: absolute;
}

.moon::before {
  border-top-left-radius: 3rem 200%;
  border-bottom-left-radius: 3rem 200%;
  right: 50%;
}

.moon::after {
  border-top-right-radius: 3rem 200%;
  border-bottom-right-radius: 3rem 200%;
  left: 50%;
}
</code></pre>

<p><code>.moon</code>の擬似要素が影と光になる。影も光も半楕円にする必要があるので、<code>border-*-radius</code>プロパティーでちゃんと半円かつ幅を変えた場合もきれいな半楕円にスケールするように、全体単位と%を組み合わせて調節してやる。</p>

<pre><code>.phase5::before {
  background-color: #000;
  width: 33.333%;
}
</code></pre>

<p>月齢5だと擬似要素は影として扱われるので、<code>#000</code>で塗る。そして月齢15で満月なので、その1/3ほど影が後退することになることから幅を<code>33.333%</code>に減らしてやっている。</p>

<p>こういう風に、形を実現するだけでなく、現実世界の状態をある程度反映させた形でCSSによってエミュレートするのは頭の体操になる。</p>

<hr>

<p>Sassをつかうとミックスイン化できるが二度と使わないので書くのはやめた。そして記事を書いてから気づいたけれど、北半球だと月は右から明るくなるんだった……。頭の体操になっていない。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150409.html</link>
      <description>HTML10を書いている。HTML10ではすべての要素がモジュール化されていて、HTML Section Module version 10などと仕様書がある。それとは別にHTML Article Section Module version 10とかHTML Strong Text Module version 10などもあり、コアの仕様書にはdiv要素とspan要素のみ定義されている。そのため世のウェブサイトはすべてdivとspan要素で出来ており、モジュール化された要素を利用するマークアッパーは原理主義者として公安にマークされ、外出もままならない。食料を買いに行こうと外に出ようとし、玄関前で警備している人に「今日はまだHTML書いていません」と宣誓したところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150409.html</guid>
      <pubDate>Mon, 13 Apr 2015 01:18:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>HTML10を書いている。HTML10ではすべての要素がモジュール化されていて、HTML Section Module version 10などと仕様書がある。それとは別にHTML Article Section Module version 10とかHTML Strong Text Module version 10などもあり、コアの仕様書には<code>div</code>要素と<code>span</code>要素のみ定義されている。そのため世のウェブサイトはすべて<code>div</code>と<code>span</code>要素で出来ており、モジュール化された要素を利用するマークアッパーは原理主義者として公安にマークされ、外出もままならない。食料を買いに行こうと外に出ようとし、玄関前で警備している人に「今日はまだHTML書いていません」と宣誓したところで目が覚めた。</p>

<p>うっかり<code>div</code>要素を書いてしまい、原理主義者の仲間から裏切り者として追われ始めるみたいな続きの夢ならちょっと見たい。</p>]]></content:encoded>
    </item>

    <item>
      <title>ソーシャル・ボタンの色</title>
      <link>http://hail2u.net/blog/webdesign/social-button-color.html</link>
      <description>ウェブサイトにソーシャル・ボタンを設置する際にその色はどうすると良いのかは悩みどころだ。効果的であることとビジュアル・デザインとの兼ね合いという二つの点から考えないとならないからだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/social-button-color.html</guid>
      <pubDate>Sun, 12 Apr 2015 12:25:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/social-button-color.png"><img alt="Facebook/Tumblr/Twitter/Pinterest" src="/images/blog/social-button-color.png"></a>
</figure>

<p>ウェブサイトにソーシャル・ボタンを設置する際にその色はどうすると良いのかは悩みどころだ。効果的であることとビジュアル・デザインとの兼ね合いという二つの点から考えないとならないからだ。</p>

<h2>対応するソーシャル・ネットワークのテーマカラー</h2>

<p>もっとも認識されやすいのは対応するソーシャル・ネットワークを象徴する色でボタンを作成することだ。認識されやすさはその利用につながるので、マーケティングの面から重視するのならばこうすべきだろう。もちろん元々その色で作成されているであろう公式のウィジェットを使うのが望ましい。</p>

<h2>ウェブサイトのテーマカラー</h2>

<p>ソーシャル・ネットワークを象徴する色で作成する場合と比べて認識度では劣るが、コンテンツとの差異を確保した上で、何らかのアクションを起こすことのできるものだとは理解されやすい。リンクやナビゲーションとは差異をつけづらいので、それらとは大きさや形(他では使っていないシェイプにするなど)でより識別しやすくする必要がある。</p>

<h2>無彩色</h2>

<p>無彩色で作成されたボタンはどんなビジュアル・デザインにも馴染みやすい。<code>:hover</code>で色を変える工夫なども通用しなくなりつつあるので、何らかの形でアピールすることはまず無理だと意識しておく必要がある。つまりそれを越えて認識出来る人であるところの常連向けに置いておくという程度にしか役には立たないだろう。</p>

<hr>

<p>ソーシャル・ボタンの効果とビジュアル・デザインとの馴染みやすさは、ほぼ両立できない。インターネットというものがウェブサイト同士がつながって成り立っていることを考えると、それぞれの対応するソーシャル・ネットワークを象徴するカラーで作成した方が望ましいのではないかと思う。もしかすると無彩色で作り、それをアニメーションさせれば両立できるかもしれないが、かなりの挑戦になることだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>ボルディエ</title>
      <link>http://hail2u.net/blog/misc/bordier.html</link>
      <description>パリみやげのボルディエのバターをパンにつけて食べてる。まずは海藻入りのやつから。食べたことなかったのでわかめみたいな感じの味がしちゃうのかと思ったけど、塩気がちょっと特徴的という程度だった。ただこれがバターかみたいな感動があってすごかった。それが600円くらいで半ポンド以上買える(250gで4.5€)とかフランスすごい。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/bordier.html</guid>
      <pubDate>Sat, 11 Apr 2015 14:23:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/bordier-beurre-de-baratte-aux-algues.jpg"><img alt="ボルディエの海藻入りバター" src="/images/blog/bordier-beurre-de-baratte-aux-algues.jpg"></a>
</figure>

<p>パリみやげの<a href="http://www.lebeurrebordier.com/">ボルディエ</a>のバターをパンにつけて食べてる。まずは海藻入りのやつから。食べたことなかったのでわかめみたいな感じの味がしちゃうのかと思ったけど、塩気がちょっと特徴的という程度だった。ただこれがバターかみたいな感動があってすごかった。それが600円くらいで半ポンド以上買える(250gで4.5€)とかフランスすごい。</p>

<p>ボルディエの海藻バターはBS1かなんかのTV番組ですごい昔に見て、ブリキっぽい桶に入れた牛乳を古い木で出来たプロペラみたいなヘラを人力で回して作っていたような記憶がある。ぐるぐる回してバターを作るみたいなの発禁になった絵本で虎がバターになるのしか知らなかった。それ以来ずっと一度食べてみたいなーと思ってたけど、日本ではエシレ以上に扱いがない。怪しげな並行輸入くらいでしか見つからない気がした。新宿の伊勢丹とか銀座の松屋とかいけばあるのかな。</p>

<hr>

<p>エシレのバターもおみやげでもらった。成城石井とか丸井で50gの丸いやつが500円以上で売ってるけど、これも現地だと200円しないくらいだったとか。</p>

<p>バターの摂り過ぎで病気になっても悔いはない程度にどちらもうまい。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
