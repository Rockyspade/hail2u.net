<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <copyright>Copyright &#x00a9; 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <webMaster>hail2u@gmail.com (Kyo Nagashima)</webMaster>
    <lastBuildDate>Wed, 24 Dec 2014 01:05:10 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>URLUtils.hash (location.hash)とその返す値</title>
      <link>http://hail2u.net/blog/webdesign/urlutils-hash-and-its-returning-value.html</link>
      <description>URLUtilsインターフェイスのブラウザーにおける実装であるLocationオブジェクトのhashプロパティーによりURLのフラグメント識別子(と#)を取得・代入できる。最近のブラウザーは非ASCII文字列もURLエンコードせずに扱えるようになっているが、この辺りの挙動がFirefoxだけ少し違うようだ。それはhashプロパティーの返す値で、常にデコードされた形で返ってくるようになっている。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/urlutils-hash-and-its-returning-value.html</guid>
      <pubDate>Wed, 24 Dec 2014 01:05:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><code>URLUtils</code>インターフェイスのブラウザーにおける実装である<code>Location</code>オブジェクトの<code>hash</code>プロパティーによりURLのフラグメント識別子(と<code>#</code>)を取得・代入できる。最近のブラウザーは非ASCII文字列もURLエンコードせずに扱えるようになっているが、この辺りの挙動がFirefoxだけ少し違うようだ。それは<code>hash</code>プロパティーの返す値で、常にデコードされた形で返ってくるようになっている。</p>

<p>例えば適当なウェブページで開発者ツール(的なもの)を開き、コンソール(などと呼ばれてるもの)で以下を実行してみる。</p>

<pre><samp>&gt; <kbd>location.hash = &#39;#&#39; + &#39;あいうえお&#39;</kbd>
&lt; &quot;#あいうえお&quot;
&gt; <kbd>location.hash</kbd>
&lt; &quot;#あいうえお&quot;
&gt; <kbd>location.hash = &#39;#&#39; + encodeURIComponent(&#39;あいうえお&#39;)</kbd>
&lt; &quot;#%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A&quot;
&gt; <kbd>location.hash</kbd>
&lt; &quot;#%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A&quot;
</samp></pre>

<p>Chrome 39やInternet Explorer 11ではこのようになる。<code>location.hash</code>に代入した文字列はそのまま返ってくるだけだ。対してFirefox 34ではURLエンコードした文字列を代入した場合、デコードされて返ってくる。</p>

<pre><samp>&gt; <kbd>location.hash = &#39;#&#39; + &#39;あいうえお&#39;</kbd>
&lt; &quot;#あいうえお&quot;
&gt; <kbd>location.hash</kbd>
&lt; &quot;#あいうえお&quot;
&gt; <kbd>location.hash = &#39;#&#39; + encodeURIComponent(&#39;あいうえお&#39;)</kbd>
&lt; &quot;#%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A&quot;
&gt; <kbd>location.hash</kbd>
&lt; &quot;#あいうえお&quot;
</samp></pre>

<p>もちろん開発者ツール上だけでなく通常のスクリプト上でも同じなので、この辺りを扱う場合はそれなりの注意が必要になる。常にURLエンコードされているのかどうかを意識するべきということだ。</p>

<p>例えば今のGitHubではこの辺りを使って<code>id</code>属性の重複避けと<code>hashchange</code>イベントの監視によるページ内ジャンプを実装している。しかし、URLエンコード済み(<code>href</code>属性の値)とそうでないもの(<code>id</code>属性の値)が混ざっているため、日本語の見出しではChrome 39やInternet Explorer 11だと比較に失敗してページ内ジャンプがうまく動かない。</p>

<hr>

<p>どちらかというとFirefoxの挙動の方が開発者に優しいとは言えるかもしれない。常にデコードされていると想定できるので、二重にエンコードしてしまうことやデコードし忘れということがない。しかしその一方でURLエンコードされた文字列とそうでない文字列が含まれたフラグメント識別子を元に戻すことができないという欠陥もある。<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=483304">Bug 483304</a>でかなり昔から議論されているようだ。</p>

<p><a href="https://url.spec.whatwg.org/">URL仕様</a>では、とにかくフラグメント識別子は<a href="https://url.spec.whatwg.org/#fragment-state">必要ならURLエンコードされているべき</a>となっている。そして<a href="https://url.spec.whatwg.org/#dom-urlutils-hash"><code>URLUtils</code>インターフェイスの<code>hash</code>プロパティー</a>でもゲッターは<code>#</code>と連結して返せというだけになっているので、勝手にデコードして返すのはバグと言って良さそう。</p>]]></content:encoded>
    </item>

    <item>
      <title>:target擬似クラスとHistory API</title>
      <link>http://hail2u.net/blog/webdesign/target-pseudo-class-and-history-api.html</link>
      <description>:target擬似クラスではフラグメント識別子と一致する要素に対してスタイルを当てることができる。これを利用するとCSSだけでインタラクティブにデザインを変更することが可能になる。一方History APIではページの遷移なくフラグメント識別子を含め、アクセス中のURLを書き換えることができる。では:target擬似クラスで有効になっているスタイルは、History APIでフラグメント識別子を変更した場合に動的に切り替わってくれるだろうか。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/target-pseudo-class-and-history-api.html</guid>
      <pubDate>Tue, 23 Dec 2014 15:20:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><code>:target</code>擬似クラスではフラグメント識別子と一致する要素に対してスタイルを当てることができる。これを利用するとCSSだけでインタラクティブにデザインを変更することが可能になる。一方History APIではページの遷移なくフラグメント識別子を含め、アクセス中のURLを書き換えることができる。では<code>:target</code>擬似クラスで有効になっているスタイルは、History APIでフラグメント識別子を変更した場合に動的に切り替わってくれるだろうか。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/603.html">:target and history.replaceState()</a></p>

<p>デモ・ページではEnable #test:targetをクリックするとURLに<code>#test</code>というフラグメント識別子が追加される。<code>#test:target</code>セレクターを通して、文字色を緑にするようにしてあるので、クリック後文章が緑になることだろう。Disable #test:target by history.replaceState()ボタンを押すと<code>history.replaceState()</code>を使ってURLからフラグメント識別子が削られる。ここで文字色が緑から黒になればCSSにも反映されることになる。</p>

<p>しかし、だいたいのブラウザーで緑のままなので、<code>history.replaceState()</code>によるフラグメント識別子の変更に<code>:target</code>擬似クラスは応じてくれないようだ。もしかするとどこかでこういう挙動になるべきと決まっているのかもしれないが、残念ながら僕には見つけられなかった。</p>

<hr>

<p><code>:target</code>擬似クラスを使ったオーバーレイのフルスクリーン・ナビゲーションを作ろうかなという過程で、CSSだけだと消せないためどうしてやろうかと考えていて、History APIを使ってみたらダメだった、という過程で発見した。「珍」というほどではないが、直感的な動作とは思えないので<a href="http://www.adventar.org/calendars/341">CSS珍百景 Advent Calendar 2014</a>の19日目として提供しておく。</p>

<p>対策はそれほど難しくはない。<code>location.hash = &#39;&#39;</code>でフラグメント識別子を空にし、<code>:target</code>擬似クラスを無効にした後、改めて<code>history.replaceState(&#39;&#39;, &#39;&#39;, location.pathname)</code>とすれば良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>mdtoc - The markdown ToC generator</title>
      <link>http://hail2u.net/blog/coding/mdtoc.html</link>
      <description>Markdownファイルの見出しからGitHub互換のToCを生成して埋め込むCLIツール、mdtocを作成した。Node.js製でmarkedパッケージに依存している。実行すると引数に指定したMarkdownファイルの中に書かれた&lt;!-- #toc --&gt;と&lt;!-- /toc --&gt;の間がToCになる。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/mdtoc.html</guid>
      <pubDate>Mon, 22 Dec 2014 00:40:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Markdownファイルの見出しからGitHub互換のToCを生成して埋め込むCLIツール、mdtocを作成した。Node.js製で<a href="https://www.npmjs.com/package/marked">markedパッケージ</a>に依存している。実行すると引数に指定したMarkdownファイルの中に書かれた<code>&lt;!-- #toc --&gt;</code>と<code>&lt;!-- /toc --&gt;</code>の間がToCになる。</p>

<p>Download: <a href="http://hail2u.net/pub/mdtoc.js">mdtoc.js</a></p>

<p>例えば以下のようにMarkdownファイル、<code>foo.md</code>に<code>&lt;!-- #toc --&gt;</code>と<code>&lt;!-- /toc --&gt;</code>を書いておき、</p>

<pre><code>Test
====

&lt;!-- #toc --&gt;
&lt;!-- /toc --&gt;

Foo
---

### Foo Foo

### Foo Bar

Bar
---

### Bar Foo
</code></pre>

<p>ターミナルからmdtocを実行すると、</p>

<pre><samp>$ <kbd>mdtoc foo.md</kbd>
</samp></pre>

<p>以下のようにToCが挿入される。</p>

<pre><code>Test
====

&lt;!-- #toc --&gt;

* [Foo](#foo)
  * [Foo Foo](#foo-foo)
  * [Foo Bar](#foo-bar)
* [Bar](#bar)
  * [Bar Foo](#bar-foo)

&lt;!-- /toc --&gt;

Foo
---

### Foo Foo

### Foo Bar

Bar
---

### Bar Foo
</code></pre>

<p>ToCの生成対象は最初の見出し以外のすべて。インデントは二番目の見出しを基準に調節されるようにした。大抵は<code>README.md</code>に対して使われると思うので、引数を省略した場合は<code>README.md</code>に対して実行するようにもなっている。改行コードは元の文書に従うようにしておいた。</p>

<p>互換性はそこそこありそうだが、Redcarpetを使ったCLIツールの方が確実と思われるので、それを探すか暇な時に書き直したい。そのためnpmで公開するつもりは今のところない。</p>

<hr>

<p><a href="https://github.com/hail2u/html-best-practices">HTML Best Practices</a>のToCを簡単に更新できるようにするために色々探したけど良い物が見つからなかった。</p>

<p><a href="https://www.npmjs.com/package/marked-toc">marked-toc</a>は記号の扱いにGitHubと互換性がなく、大体はうまくいくのだけど、たまにうまくいかない。別の名前で一から作り直してるみたいだが、今度はまったく英数字以外がまったく考慮されないものになっていて期待できない。</p>

<p><a href="https://www.npmjs.com/package/doctoc">doctoc</a>はコード・ブロックに書いた<code>&lt;h1&gt;</code>タグなどを拾ってしまってめちゃくちゃなToCが生成された。他、どうでも良さそうなPRリンクや派手すぎる埋め込みコメントなど色々うっとうしかった。</p>

<p>他にもたくさんあった(npmだけで15くらい見つかる)が、<code>#</code>での見出し限定のものであったり、特殊な記法で見出しを書かなくてはならなかったりと、試すまでもなく使いたくならないものばかりだった。</p>

<p>mdtocでは、markedの<a href="https://github.com/chjj/marked#overriding-renderer-methods">レンダラーの差し替え</a>を利用して見出しをすべて拾い、Redcarpetのコードにあった<a href="https://github.com/vmg/redcarpet/blob/816e0933a120b66759a71284a24eacac8880f765/ext/redcarpet/html.h#L76">削除する文字</a>を削除し、空白をマイナスに置換し、最後にURLエンコードするというだけにした。余計なことをなるべくしないようにしたので、そこそこ互換性があるんじゃないかと思う。</p>]]></content:encoded>
    </item>

    <item>
      <title>HTML Best Practices</title>
      <link>http://hail2u.net/blog/webdesign/html-best-practices.html</link>
      <description>少し前に書いた失われたウェブ制作のベスト・プラクティスという記事の公開後、やはりある程度まとまった形の文書が必要なのではないかという気分になった。そこでHTMLはどのようなことに気を付けて書くと安定したものになるのかという視点で、悪い例と良い例を併記したHTML Best Practicesという文書を作成した。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/html-best-practices.html</guid>
      <pubDate>Sun, 21 Dec 2014 00:05:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="https://github.com/hail2u/html-best-practices"><img alt="HTML Best Practices" src="http://hail2u.net/images/blog/html-best-practices.png"></a>
</figure>

<p>少し前に書いた<a href="http://hail2u.net/blog/webdesign/lost-best-practices.html">失われたウェブ制作のベスト・プラクティス</a>という記事の公開後、やはりある程度まとまった形の文書が必要なのではないかという気分になった。そこでHTMLはどのようなことに気を付けて書くと安定したものになるのかという視点で、悪い例と良い例を併記した<a href="https://github.com/hail2u/html-best-practices">HTML Best Practices</a>という文書を作成した。</p>

<p>それぞれにそれぞれの理由はあるが、その解説は簡単ではない。歴史的な背景を始めとした様々な点からの落とし所であり、それら前提となる物事について書くとなると膨大な量になりうる。そのためコード例で悪いものと良いものを併記するだけに留めておいた。</p>

<p>こうなっていると、「なぜ」がわからないという面もあるが、「これをこう書けるのか」というような面もある。啓蒙的な意味合いが強い文書にも関わらずカジュアルに読めるため、悪くはないのではないかと思う。</p>

<hr>

<p>現時点でほとんどの要素の書き方についてはひと通り触れることができた。多くは僕の知識に基づくものなので、それなりに「今」を反映できているはずだ。他も仕様のコード例をアレンジしたもののため、正しく、シンプルなものにできていることと思う。</p>

<p>このような安定性を意識した書き方に沿って、シンプルにHTMLを書いていけば、保守しやすく拡張しやすいウェブサイトを制作できることだろう。</p>

<hr>

<p>しかし、この文書にはこういったベスト・プラクティスと呼ばれるものに欠かすことのできない系統のものがまったく出てこない。それはパフォーマンスについてのベスト・プラクティスだ。</p>

<p>パフォーマンス向上を目指したHTMLの書き方とは、つまりHTTPリクエストが効率的に行われるような書き方だ。例えば<code>script</code>要素を動的に追加することによる非同期なJavaScriptの実行が挙げられる。しかしこれには<a href="https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/">有害だという大家からの意見</a>が既にある。またCSSをJavaScriptより先に読み込むというセオリーも崩れ始めている(<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Optimizing_your_pages_for_speculative_parsing">speculative parsing (投機的パース)</a>による)。そしてHTTP/2も控えている。</p>

<p>こういったHTTPリクエストの効率化を目指すための書き方は、数年前ならともかく、激変しつつある今は刹那的なテクニックにしか成りえなそうだ。ベスト・プラクティスと呼べるようなものは減りつつあるのではないか。とは言うものの、そのようなテクニックについて追加してくれれば、取り込むことはやぶさかではない。</p>

<p>他、もちろん提案はどんなものでも大歓迎なので、悪い例と良い例を作るくらいで是非気軽に提案して欲しい。例さえあればあとはタイトルを英語で考えるだけなので、日本語で提案してくれてもまったく構わない。既に載せたものに関してもベスト・プラクティスとは思えないというような意見も、むしろこちらをお願いしたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>複数のPNGからICOへ変換</title>
      <link>http://hail2u.net/blog/software/convert-pngs-into-ico.html</link>
      <description>favicon.icoの作成を自動化しようとして、いくつかCLIの変換ツールを物色していた。最終的にImageMagickのconvertに行き着いたので、あまり得られるところはなかった……。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/convert-pngs-into-ico.html</guid>
      <pubDate>Sat, 20 Dec 2014 05:03:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>favicon.icoの作成を自動化しようとして、いくつかCLIの変換ツールを物色していた。最終的に<a href="http://www.imagemagick.org/">ImageMagick</a>のconvertに行き着いたので、あまり得られるところはなかった……。</p>

<h2><a href="http://www.winterdrache.de/freeware/png2ico/">png2ico</a></h2>

<pre><samp>$ <kbd>png2ico favicon.ico logo-16.png logo-32.png logo-48.png logo-256.png</kbd>
</samp></pre>

<p>特に何も考えずに使える良いツールだった。しかし256x256以上、つまり256x256のアイコンは含めることができない制限がある。16x16以外に32x32だけでなく、256x256を含めてやりたい現状だとちょっと使いづらい気がする。</p>

<h2><a href="http://wizard.ae.krakow.pl/~jb/toico/">ToICO</a></h2>

<pre><samp>$ <kbd>toico -o favicon.ico logo-16.png logo-32.png logo-48.png logo-256.png</kbd>
</samp></pre>

<p>これもあまり考えずに使えた。しかし生成されるICOファイルが異様に大きい。256x256を含めたところ70KBを超えるサイズになってしまった。高解像度を含めるとはいえ、せめて20KB、できれば10KB以下にはしたいので、このサイズはちょっと厳しい。</p>

<h2>ImageMagickのconvert</h2>

<pre><samp>$ <kbd>convert logo-16.png logo-32.png logo-48.png logo-256.png favicon.ico</kbd>
</samp></pre>

<p>樹海のようにコマンドライン・オプションが複雑だが、ICOへの変換は単純なものだった。特に問題はなさそうに見える。出力サイズも15KBとまずまずだった。</p>

<hr>

<p>ポータビリティーのことも考えるとやはりImageMagickかという感じだ。パスを通さずにいかにして使うかみたいに頑張るのが一番大変だった。<code>C:\WINDOWS\system32\convert.exe</code>を消しさりたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>Hender Schemeの財布</title>
      <link>http://hail2u.net/blog/gadget/hender-scheme-wallet.html</link>
      <description>どんな財布を買おうか色々悩んだ結果、Hender Schemeのものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/hender-scheme-wallet.html</guid>
      <pubDate>Fri, 19 Dec 2014 12:04:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="袋状小銭いれ(ボタンなし)と同じく袋状のカード収納、札入れがコンパクトにまとまっているHender Schemeの財布" src="http://hail2u.net/images/blog/hender-scheme-wallet.jpg">
</figure>

<p>どんな財布を買おうか色々悩んだ結果、<a href="http://henderscheme.com/">Hender Scheme</a>のものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。</p>

<p>ようやく財布(とついでにスマホ)を鞄に入れるのに慣れてきた。まだポケットが空だと心もとないけれど、財布持ってたっけと鞄を確認することはほぼなくなった。でもポケットに入れないと財布の革がうまく馴染んでこないかもなーと思ってたりもする。</p>]]></content:encoded>
    </item>

    <item>
      <title>失われたウェブ制作のベスト・プラクティス</title>
      <link>http://hail2u.net/blog/webdesign/lost-best-practices.html</link>
      <description>ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/lost-best-practices.html</guid>
      <pubDate>Thu, 18 Dec 2014 01:40:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。</p>

<p>ウェブ制作においては、技術革新の多い世界であることと、他の世界の変革に対応しなければならないことから、よりいっそう変化が速いとも言えるだろう。だからといってベスト・プラクティスが意識するに留めておけば良いという程度のものというわけではない。例えば<code>&lt;!DOCTYPE html&gt;</code>について考えてみよう。</p>

<h2><code>&lt;!DOCTYPE html&gt;</code></h2>

<p>これはHTML5が産声を上げた時期に先駆者である人々が編み出した魔法の言葉だ。これによりほとんどすべてのブラウザーでウェブ標準に準拠した形でHTMLが表示されることが保証される。つまり個々のブラウザーで大幅に違う挙動になることはなくなり、予期せぬ問題の発生を大幅に低下させることができる。と同時にそういったことの解決に割く時間を大幅に減らすことができるというわけだ。</p>

<p>このようにベスト・プラクティスは効率化の手法ではあるが、それは<em>結果</em>の効率化だけではなく、<em>過程</em>の効率化にまつわるものでもある。</p>

<h2><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></h2>

<p>HTML5黎明期にはもうひとつ魔法の言葉が生み出された。それは<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>だ。この短いフォーマットのタグを書くことでウェブページの文字エンコーディングを指定することができる。あてにならないブラウザーの自動判別機能に依存しなくて済み、文字エンコーディングが正しく解釈されない問題を解決できるというわけだ。</p>

<p>これの元となった<code>meta</code>要素による文字エンコーディング指定そのものは古くからベスト・プラクティスとして存在するものだ。特に日本では3種(Shift_JISとEUC-JP、ISO-2022-JP)が使い分けられていた事情もあり、強く意識されまた使われてきた。しかしこの文字エンコーディング指定にはもうひとつ忘れてはならない書き方がある。それはなるべく先頭に書くこと、だ。</p>

<p>なるべく先頭に書くことにより、英数記号<em>以外</em>の文字がこの指定より先に来ることがなくなる。そういった文字列が文字エンコーディング指定より前に来ると、ブラウザーの自動判別機能がうまく動かなくなることがあるという事情から、そう書くこともベスト・プラクティスとなっていた。</p>

<p>最近のブラウザーでこの魔法の言葉の位置により自動判別機能が狂うということは考えづらい。しかしあえて先頭に書かないという強い理由も見つからない。ページのメタデータではあるが、ページの振る舞いを決定するものとも言えるので、<code>&lt;!DOCTYPE html&gt;</code>と同じように先頭に書くのが安心だろう。</p>

<hr>

<p>文字エンコーディングの指定そのものは失われてはいないが、先頭に書くというベスト・プラクティスは失われつつあるような印象だ。Facebookのいいね！ボタンで使われる<a href="http://ogp.me/">OGP</a>や<a href="https://dev.twitter.com/cards/markup">Twitter Cardsで使われる謎のメタデータ記述法</a>などにより<code>meta</code>要素を利用する頻度が増えたため、それらと一緒にまとめて置かれることが増えた結果なのではないかと想像している。</p>

<p>一方で<code>script</code>要素の<code>type</code>属性のようなほぼ疑いなく失われて良いものにも関わらず、まだよく使われているベスト・プラクティスもある。</p>

<p>これら様々な昔からあるベスト・プラクティス達を体系立てて、失われて良いものかそうではないかを判別することは難しい。失われたことはすなわち必要なくなったわけではなく、失われていないことはつまりまだ必要なわけでもない。それぞれがどうしてそうなっているのか歴史を振り返りながら今に最適化する必要があるだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>ピンク色のTKGを食べた</title>
      <link>http://hail2u.net/blog/misc/tkg-tarako-20141217.html</link>
      <description>ピンク色とは生のたらこ。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！TKG Advent Calendar 2014も17日目か。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/tkg-tarako-20141217.html</guid>
      <pubDate>Wed, 17 Dec 2014 09:50:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="ピンク色の卵をかけたご飯" src="http://hail2u.net/images/blog/tkg-tarako-20141217.jpg">
</figure>

<p>ピンク色とは生の<a href="http://ja.wikipedia.org/wiki/%E3%81%9F%E3%82%89%E3%81%93">たらこ</a>。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！<a href="http://www.adventar.org/calendars/342">TKG Advent Calendar 2014</a>も17日目か。</p>

<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A4%E3%82%AF%E3%83%A9">赤</a>と迷った結果、ピンクにした。<a href="http://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%93%E3%82%A2">黒</a>でやってみようかとも考えていたけど、ジョークでやるには高額の出費になるのでやめた。</p>]]></content:encoded>
    </item>

    <item>
      <title>絵文字のショートカット・ファミリー</title>
      <link>http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</link>
      <description>Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</guid>
      <pubDate>Tue, 16 Dec 2014 10:31:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。</p>

<pre><code>@font-face {
  font-family: &#39;Emoji&#39;;
  src: <mark>local(&#39;Apple Color Emoji&#39;)</mark>,
    local(&#39;Gecko Emoji&#39;),
    local(&#39;Noto Sans Emoji&#39;),
    <mark>local(&#39;Segoe UI Emoji&#39;)</mark>,
    <mark>local(&#39;Segoe UI Symbol&#39;)</mark>,
    local(&#39;Noto Sans Symbols&#39;);
}
</code></pre>

<p>上から順にOS X、Firefox OS (予)、Android (予)、Windows 8、Windows 7、Linux向けに絵文字を表示できるフォントをフォールバックさせている。通常はハイライトした3つだけで良い。こうして定義したショートカット・ファミリーは自由にCSSで利用できる。</p>

<pre><code>body {
  font-family: Hoefler Text, Constantia, Emoji, serif;
}

h1 {
  font-family: Helvetica Neue, Calibri, Emoji, sans-serif;
}

pre {
  font-family: Menlo, Consolas, Emoji, monospace;
}
</code></pre>

<p>方法そのものとしては<code>unicode-range</code>プロパティーを使って絵文字を含めた形にフォント・ファミリーを再定義してやる方が真っ当で優れている。しかしFirefox 36以降に限定される問題があることと、OSネイティブの絵文字を表示する仕組みとバッティングしかねない。各ブラウザーで絵文字が自動的に表示されるようになるまでは、このようにショートカット・ファミリーを作ってやるのが良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>ロボ娘のアーキテクチャ</title>
      <link>http://hail2u.net/blog/media/roboko-no-architecture.html</link>
      <description>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。ロボ娘のアーキテクチャは真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</description>
      <author>hail2u@gmail.com (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/roboko-no-architecture.html</guid>
      <pubDate>Mon, 15 Dec 2014 08:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4812475295&amp;linkCode=as2&amp;tag=hail2unet-22"><img src="http://ecx.images-amazon.com/images/I/51VOJEjEU1L.jpg" alt="ロボ娘のアーキテクチャ 　① (バンブーコミックス)"></a>
</figure>

<p>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。<a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4812475295&amp;linkCode=as2&amp;tag=hail2unet-22">ロボ娘のアーキテクチャ</a>は真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</p>

<p>眼帯が欲しい。</p>

<hr>

<p>4コマは好きでよく読む。わりと何でも読む。けど二極化して長いので、山東ユカの書くやつみたいなのが増えて三極化して欲しい。いわゆる青年誌とかで連載されてる4コマやショートものみたいなのがこれにあたる。専門誌に連載されてるものと違う、絶妙な暗さみたいなのがあるやつ。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
