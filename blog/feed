<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <copyright>Copyright &#x00a9; 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <lastBuildDate>Sun, 21 Dec 2014 00:05:52 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>HTML Best Practices</title>
      <link>http://hail2u.net/blog/webdesign/html-best-practices.html</link>
      <description>少し前に書いた失われたウェブ制作のベスト・プラクティスという記事の公開後、やはりある程度まとまった形の文書が必要なのではないかという気分になった。そこでHTMLはどのようなことに気を付けて書くと安定したものになるのかという視点で、悪い例と良い例を併記したHTML Best Practicesという文書を作成した。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/html-best-practices.html</guid>
      <pubDate>Sun, 21 Dec 2014 00:05:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="https://github.com/hail2u/html-best-practices"><img alt="HTML Best Practices" src="http://hail2u.net/images/blog/html-best-practices.png"></a>
</figure>

<p>少し前に書いた<a href="http://hail2u.net/blog/webdesign/lost-best-practices.html">失われたウェブ制作のベスト・プラクティス</a>という記事の公開後、やはりある程度まとまった形の文書が必要なのではないかという気分になった。そこでHTMLはどのようなことに気を付けて書くと安定したものになるのかという視点で、悪い例と良い例を併記した<a href="https://github.com/hail2u/html-best-practices">HTML Best Practices</a>という文書を作成した。</p>

<p>それぞれにそれぞれの理由はあるが、その解説は簡単ではない。歴史的な背景を始めとした様々な点からの落とし所であり、それら前提となる物事について書くとなると膨大な量になりうる。そのためコード例で悪いものと良いものを併記するだけに留めておいた。</p>

<p>こうなっていると、「なぜ」がわからないという面もあるが、「これをこう書けるのか」というような面もある。啓蒙的な意味合いが強い文書にも関わらずカジュアルに読めるため、悪くはないのではないかと思う。</p>

<hr>

<p>現時点でほとんどの要素の書き方についてはひと通り触れることができた。多くは僕の知識に基づくものなので、それなりに「今」を反映できているはずだ。他も仕様のコード例をアレンジしたもののため、正しく、シンプルなものにできていることと思う。</p>

<p>このような安定性を意識した書き方に沿って、シンプルにHTMLを書いていけば、保守しやすく拡張しやすいウェブサイトを制作できることだろう。</p>

<hr>

<p>しかし、この文書にはこういったベスト・プラクティスと呼ばれるものに欠かすことのできない系統のものがまったく出てこない。それはパフォーマンスについてのベスト・プラクティスだ。</p>

<p>パフォーマンス向上を目指したHTMLの書き方とは、つまりHTTPリクエストが効率的に行われるような書き方だ。例えば<code>script</code>要素を動的に追加することによる非同期なJavaScriptの実行が挙げられる。しかしこれには<a href="https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/">有害だという大家からの意見</a>が既にある。またCSSをJavaScriptより先に読み込むというセオリーも崩れ始めている(<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Optimizing_your_pages_for_speculative_parsing">speculative parsing (投機的パース)</a>による)。そしてHTTP/2も控えている。</p>

<p>こういったHTTPリクエストの効率化を目指すための書き方は、数年前ならともかく、激変しつつある今は刹那的なテクニックにしか成りえなそうだ。ベスト・プラクティスと呼べるようなものは減りつつあるのではないか。とは言うものの、そのようなテクニックについて追加してくれれば、取り込むことはやぶさかではない。</p>

<p>他、もちろん提案はどんなものでも大歓迎なので、悪い例と良い例を作るくらいで是非気軽に提案して欲しい。例さえあればあとはタイトルを英語で考えるだけなので、日本語で提案してくれてもまったく構わない。既に載せたものに関してもベスト・プラクティスとは思えないというような意見も、むしろこちらをお願いしたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>複数のPNGからICOへ変換</title>
      <link>http://hail2u.net/blog/software/convert-pngs-into-ico.html</link>
      <description>favicon.icoの作成を自動化しようとして、いくつかCLIの変換ツールを物色していた。最終的にImageMagickのconvertに行き着いたので、あまり得られるところはなかった……。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/convert-pngs-into-ico.html</guid>
      <pubDate>Sat, 20 Dec 2014 05:03:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>favicon.icoの作成を自動化しようとして、いくつかCLIの変換ツールを物色していた。最終的に<a href="http://www.imagemagick.org/">ImageMagick</a>のconvertに行き着いたので、あまり得られるところはなかった……。</p>

<h2><a href="http://www.winterdrache.de/freeware/png2ico/">png2ico</a></h2>

<pre><samp>$ <kbd>png2ico favicon.ico logo-16.png logo-32.png logo-48.png logo-256.png</kbd>
</samp></pre>

<p>特に何も考えずに使える良いツールだった。しかし256x256以上、つまり256x256のアイコンは含めることができない制限がある。16x16以外に32x32だけでなく、256x256を含めてやりたい現状だとちょっと使いづらい気がする。</p>

<h2><a href="http://wizard.ae.krakow.pl/~jb/toico/">ToICO</a></h2>

<pre><samp>$ <kbd>toico -o favicon.ico logo-16.png logo-32.png logo-48.png logo-256.png</kbd>
</samp></pre>

<p>これもあまり考えずに使えた。しかし生成されるICOファイルが異様に大きい。256x256を含めたところ70KBを超えるサイズになってしまった。高解像度を含めるとはいえ、せめて20KB、できれば10KB以下にはしたいので、このサイズはちょっと厳しい。</p>

<h2>ImageMagickのconvert</h2>

<pre><samp>$ <kbd>convert logo-16.png logo-32.png logo-48.png logo-256.png favicon.ico</kbd>
</samp></pre>

<p>樹海のようにコマンドライン・オプションが複雑だが、ICOへの変換は単純なものだった。特に問題はなさそうに見える。出力サイズも15KBとまずまずだった。</p>

<hr>

<p>ポータビリティーのことも考えるとやはりImageMagickかという感じだ。パスを通さずにいかにして使うかみたいに頑張るのが一番大変だった。<code>C:\WINDOWS\system32\convert.exe</code>を消しさりたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>Hender Schemeの財布</title>
      <link>http://hail2u.net/blog/gadget/hender-scheme-wallet.html</link>
      <description>どんな財布を買おうか色々悩んだ結果、Hender Schemeのものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/hender-scheme-wallet.html</guid>
      <pubDate>Fri, 19 Dec 2014 12:04:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="袋状小銭いれ(ボタンなし)と同じく袋状のカード収納、札入れがコンパクトにまとまっているHender Schemeの財布" src="http://hail2u.net/images/blog/hender-scheme-wallet.jpg">
</figure>

<p>どんな財布を買おうか色々悩んだ結果、<a href="http://henderscheme.com/">Hender Scheme</a>のものにした。この財布は同型でシーズンごとに出ていて、これは2015 SSシーズンのブライドルレザーのもの。色で3日悩んだけど、結局黒にした。使いやすいとか機能性が高いとかではないけど、自分の欲しい機能は満たしていることと革の感じが良かったのでこれに決めた。16200円。</p>

<p>ようやく財布(とついでにスマホ)を鞄に入れるのに慣れてきた。まだポケットが空だと心もとないけれど、財布持ってたっけと鞄を確認することはほぼなくなった。でもポケットに入れないと財布の革がうまく馴染んでこないかもなーと思ってたりもする。</p>]]></content:encoded>
    </item>

    <item>
      <title>失われたウェブ制作のベスト・プラクティス</title>
      <link>http://hail2u.net/blog/webdesign/lost-best-practices.html</link>
      <description>ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/lost-best-practices.html</guid>
      <pubDate>Thu, 18 Dec 2014 01:40:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ベスト・プラクティスは多くの人には固定的なものだ。しかし本来は流動的なもので、革新者によって大きな変化が起きる。ウェブ制作におけるベスト・プラクティスも変化しており、その過程でいくつも失われていった。</p>

<p>ウェブ制作においては、技術革新の多い世界であることと、他の世界の変革に対応しなければならないことから、よりいっそう変化が速いとも言えるだろう。だからといってベスト・プラクティスが意識するに留めておけば良いという程度のものというわけではない。例えば<code>&lt;!DOCTYPE html&gt;</code>について考えてみよう。</p>

<h2><code>&lt;!DOCTYPE html&gt;</code></h2>

<p>これはHTML5が産声を上げた時期に先駆者である人々が編み出した魔法の言葉だ。これによりほとんどすべてのブラウザーでウェブ標準に準拠した形でHTMLが表示されることが保証される。つまり個々のブラウザーで大幅に違う挙動になることはなくなり、予期せぬ問題の発生を大幅に低下させることができる。と同時にそういったことの解決に割く時間を大幅に減らすことができるというわけだ。</p>

<p>このようにベスト・プラクティスは効率化の手法ではあるが、それは<em>結果</em>の効率化だけではなく、<em>過程</em>の効率化にまつわるものでもある。</p>

<h2><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></h2>

<p>HTML5黎明期にはもうひとつ魔法の言葉が生み出された。それは<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>だ。この短いフォーマットのタグを書くことでウェブページの文字エンコーディングを指定することができる。あてにならないブラウザーの自動判別機能に依存しなくて済み、文字エンコーディングが正しく解釈されない問題を解決できるというわけだ。</p>

<p>これの元となった<code>meta</code>要素による文字エンコーディング指定そのものは古くからベスト・プラクティスとして存在するものだ。特に日本では3種(Shift_JISとEUC-JP、ISO-2022-JP)が使い分けられていた事情もあり、強く意識されまた使われてきた。しかしこの文字エンコーディング指定にはもうひとつ忘れてはならない書き方がある。それはなるべく先頭に書くこと、だ。</p>

<p>なるべく先頭に書くことにより、英数記号<em>以外</em>の文字がこの指定より先に来ることがなくなる。そういった文字列が文字エンコーディング指定より前に来ると、ブラウザーの自動判別機能がうまく動かなくなることがあるという事情から、そう書くこともベスト・プラクティスとなっていた。</p>

<p>最近のブラウザーでこの魔法の言葉の位置により自動判別機能が狂うということは考えづらい。しかしあえて先頭に書かないという強い理由も見つからない。ページのメタデータではあるが、ページの振る舞いを決定するものとも言えるので、<code>&lt;!DOCTYPE html&gt;</code>と同じように先頭に書くのが安心だろう。</p>

<hr>

<p>文字エンコーディングの指定そのものは失われてはいないが、先頭に書くというベスト・プラクティスは失われつつあるような印象だ。Facebookのいいね！ボタンで使われる<a href="http://ogp.me/">OGP</a>や<a href="https://dev.twitter.com/cards/markup">Twitter Cardsで使われる謎のメタデータ記述法</a>などにより<code>meta</code>要素を利用する頻度が増えたため、それらと一緒にまとめて置かれることが増えた結果なのではないかと想像している。</p>

<p>一方で<code>script</code>要素の<code>type</code>属性のようなほぼ疑いなく失われて良いものにも関わらず、まだよく使われているベスト・プラクティスもある。</p>

<p>これら様々な昔からあるベスト・プラクティス達を体系立てて、失われて良いものかそうではないかを判別することは難しい。失われたことはすなわち必要なくなったわけではなく、失われていないことはつまりまだ必要なわけでもない。それぞれがどうしてそうなっているのか歴史を振り返りながら今に最適化する必要があるだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>ピンク色のTKGを食べた</title>
      <link>http://hail2u.net/blog/misc/tkg-tarako-20141217.html</link>
      <description>ピンク色とは生のたらこ。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！TKG Advent Calendar 2014も17日目か。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/tkg-tarako-20141217.html</guid>
      <pubDate>Wed, 17 Dec 2014 09:50:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="ピンク色の卵をかけたご飯" src="http://hail2u.net/images/blog/tkg-tarako-20141217.jpg">
</figure>

<p>ピンク色とは生の<a href="http://ja.wikipedia.org/wiki/%E3%81%9F%E3%82%89%E3%81%93">たらこ</a>。ご飯にかける時は辛子明太子よりも普通のやつが好き。丸のままでなくても良いので、おいしいけど切り落としになってて、量の割には安価なものを買ってる。余ったらスパゲッティーの具にしよう！<a href="http://www.adventar.org/calendars/342">TKG Advent Calendar 2014</a>も17日目か。</p>

<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A4%E3%82%AF%E3%83%A9">赤</a>と迷った結果、ピンクにした。<a href="http://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%93%E3%82%A2">黒</a>でやってみようかとも考えていたけど、ジョークでやるには高額の出費になるのでやめた。</p>]]></content:encoded>
    </item>

    <item>
      <title>絵文字のショートカット・ファミリー</title>
      <link>http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</link>
      <description>Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/emoji-shotcut-family.html</guid>
      <pubDate>Tue, 16 Dec 2014 10:31:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Chromeでも着々とユニコード絵文字への対応が始まっているようだが、Windows版のChromeにはまだ来る気配がない。そのため絵文字をそのままで表示しようとすると工夫が必要になる。が、JavaScriptでカラー画像に差し替えて……というのは、コストがそこそこ高く個人のウェブサイト向けではない。かといって様々な要素に絵文字を表示できるフォントをプラットフォームごとに指定していくのも手がかかる。そこで絵文字用のショートカット・ファミリーの出番になる。</p>

<pre><code>@font-face {
  font-family: &#39;Emoji&#39;;
  src: <mark>local(&#39;Apple Color Emoji&#39;)</mark>,
    local(&#39;Gecko Emoji&#39;),
    local(&#39;Noto Sans Emoji&#39;),
    <mark>local(&#39;Segoe UI Emoji&#39;)</mark>,
    <mark>local(&#39;Segoe UI Symbol&#39;)</mark>,
    local(&#39;Noto Sans Symbols&#39;);
}
</code></pre>

<p>上から順にOS X、Firefox OS (予)、Android (予)、Windows 8、Windows 7、Linux向けに絵文字を表示できるフォントをフォールバックさせている。通常はハイライトした3つだけで良い。こうして定義したショートカット・ファミリーは自由にCSSで利用できる。</p>

<pre><code>body {
  font-family: Hoefler Text, Constantia, Emoji, serif;
}

h1 {
  font-family: Helvetica Neue, Calibri, Emoji, sans-serif;
}

pre {
  font-family: Menlo, Consolas, Emoji, monospace;
}
</code></pre>

<p>方法そのものとしては<code>unicode-range</code>プロパティーを使って絵文字を含めた形にフォント・ファミリーを再定義してやる方が真っ当で優れている。しかしFirefox 36以降に限定される問題があることと、OSネイティブの絵文字を表示する仕組みとバッティングしかねない。各ブラウザーで絵文字が自動的に表示されるようになるまでは、このようにショートカット・ファミリーを作ってやるのが良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>ロボ娘のアーキテクチャ</title>
      <link>http://hail2u.net/blog/media/roboko-no-architecture.html</link>
      <description>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。ロボ娘のアーキテクチャは真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/roboko-no-architecture.html</guid>
      <pubDate>Mon, 15 Dec 2014 08:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4812475295&amp;linkCode=as2&amp;tag=hail2unet-22"><img src="http://ecx.images-amazon.com/images/I/51VOJEjEU1L.jpg" alt="ロボ娘のアーキテクチャ 　① (バンブーコミックス)"></a>
</figure>

<p>山東ユカが結構好きで、昔からよく読んでる。大体は明るいギャグなのに、時々脈絡もなく真っ黒なのがぶっ込まれてドキッとする。<a href="http://www.amazon.co.jp/gp/product/4812475295/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4812475295&amp;linkCode=as2&amp;tag=hail2unet-22">ロボ娘のアーキテクチャ</a>は真っ黒なのが少ないけど、突然アイゼナッハとか出てきて笑ってしまう。</p>

<p>眼帯が欲しい。</p>

<hr>

<p>4コマは好きでよく読む。わりと何でも読む。けど二極化して長いので、山東ユカの書くやつみたいなのが増えて三極化して欲しい。いわゆる青年誌とかで連載されてる4コマやショートものみたいなのがこれにあたる。専門誌に連載されてるものと違う、絶妙な暗さみたいなのがあるやつ。</p>]]></content:encoded>
    </item>

    <item>
      <title>Gitで最新のタグをチェックアウト</title>
      <link>http://hail2u.net/blog/software/git-checkout-latest-tag.html</link>
      <description>最新のタグを知りたいことがたまにある。その時はgit describe --tagsで調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、describe --tagsがハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、--abbrev=0を加えると消えることがわかった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/git-checkout-latest-tag.html</guid>
      <pubDate>Sun, 14 Dec 2014 09:21:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>最新のタグを知りたいことがたまにある。その時は<code>git describe --tags</code>で調べ、結果をコピーしていた。シェルの展開をうまく利用すれば良いようなところだが、<code>describe --tags</code>がハッシュ付きで返ってくる時があり、そのまま流しこむと変なことになる。未だにハッシュ付きになる条件はわからないものの、<code>--abbrev=0</code>を加えると消えることがわかった。</p>

<p>具体的には以下のようなコマンドをターミナルで実行すれば良い。</p>

<pre><samp>$ <kbd>git checkout $(git describe --tags <mark>--abbrev=0</mark>)</kbd>
</samp></pre>

<p>主に、何かしらをビルドする時のタスクで使っている。事前に最新のタグをチェックアウトさせることによって、常に安定版がデプロイされるように制御することができる。</p>]]></content:encoded>
    </item>

    <item>
      <title>MinifyしてからConcat</title>
      <link>http://hail2u.net/blog/webdesign/minify-then-concat.html</link>
      <description>配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は壊れる可能性を否定できないことは意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫をソース・マップを維持することを前提にこのウェブサイトで実験し始めた。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/minify-then-concat.html</guid>
      <pubDate>Sat, 13 Dec 2014 07:13:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>配布されているライブラリーを最小ツールに通すと、ライセンスあたりの扱いで面倒なことになる。またCSSの場合は<a href="https://github.com/gruntjs/grunt-contrib-copy">壊れる可能性を否定できないこと</a>は意識しなければならない。ということで重い腰を上げて、最小化してから連結するような工夫を<em>ソース・マップを維持すること</em>を前提にこのウェブサイトで実験し始めた。</p>

<p>JavaScriptファイルのビルドをGruntでやるとして、最小化についてはソース・マップのサポートは問題ないので、いつも通り<a href="https://github.com/gruntjs/grunt-contrib-copy">grunt-contrib-copy</a>と<a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a>を使うことにする。最後に連結する時にソース・マップを維持できるのかというのが最大の問題だったが、7月にソース・マップのサポートが<a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-copy</a>へ入っていたため、結果的にはこれを使うだけで良かった。</p>

<p>タスクの手順的には以下のようになる。</p>

<ol>
<li>一時ディレクトリーを掃除</li>
<li>一時ディレクトリーへソースとなるファイルのコピー<ul>
<li>非ライブラリーはそのファイルのみをコピー</li>
<li>ライブラリーはソース・マップ・ファイルを含めてコピー</li>
</ul>
</li>
<li>非ライブラリーのファイルのみをソース・マップ付きで最小化</li>
<li>プロダクションのファイルを連結して作成</li>
<li>公開ディレクトリーへソース・マップ・ファイルを含めてコピー</li>
</ol>

<p>これを踏まえて、Bowerでインストールした<code>lib-a.min.js</code>と<code>lib-b.min.js</code>、そして自分で書いた<code>foo.js</code>と<code>bar.js</code>を最小化してから連結し、最終的に<code>main.min.js</code>を作るとする。タスクの設定は以下のようになることだろう。</p>

<pre><code>module.exports = function (grunt) {
  grunt.initConfig({
    clean: {
      // `tmp/`ディレクトリーを掃除するタスク
      main: {
        src: ['tmp/**/*']
      }
    },

    concat: {
      // 最小化済みのファイルをソース・マップ付きで連結するタスク
      js: {
        options: {
          seperator: &#39;;&#39;,
          sourceMap: true,
          sourceMapStyle: &#39;link&#39;
        },

        files: {
          &#39;tmp/main.min.js&#39;: [
            &#39;tmp/lib-a.min.js&#39;,
            &#39;tmp/lib-b.min.js&#39;,
            &#39;tmp/foo.min.js&#39;,
            &#39;tmp/bar.min.js&#39;
          ]
        }
      }
    },

    copy: {
      // プロダクション向けに公開ディレクトリーへコピーするタスク
      js: {
        cwd: &#39;tmp/&#39;,
        dest: &#39;build/js/&#39;,
        expand: true,
        src: [
          &#39;**/*.js&#39;,
          &#39;**/*.js.map&#39;
        ]
      },

      // 一時ディレクトリーへ必要なファイルをコピーするタスク
      // 最小化済みのライブラリーは元ファイルとソース・マップ・ファイルも
      prejs: {
        files: {
          &#39;tmp/bar.js&#39;: &#39;src/js/bar.js&#39;,
          &#39;tmp/foo.js&#39;: &#39;src/js/foo.js&#39;,
          &#39;tmp/lib-a.js&#39;: &#39;bower_component/lib-a/dist/lib-a.js&#39;,
          &#39;tmp/lib-a.min.js&#39;: &#39;bower_component/lib-a/dist/lib-a.min.js&#39;,
          &#39;tmp/lib-a.min.js.map&#39;: &#39;bower_component/lib-a/dist/lib-a.min.js.map&#39;,
          &#39;tmp/lib-b.js&#39;: &#39;bower_component/lib-a/dist/lib-b.js&#39;,
          &#39;tmp/lib-b.min.js&#39;: &#39;bower_component/lib-b/dist/lib-b.min.js&#39;,
          &#39;tmp/lib-b.min.js.map&#39;: &#39;bower_component/lib-b/dist/lib-b.min.js.map&#39;
        }
      }
    },

    uglify: {
      options: {
        preserveComments: &#39;some&#39;,
        sourceMap: true
      },

      // まだ最小化されていないファイルをソース・マップ付きで最小化するタスク
      main: {
        cwd: &#39;tmp/&#39;,
        dest: &#39;tmp/&#39;,
        expand: true,
        ext: &#39;.min.js&#39;,
        src: [
          &#39;**/*.js&#39;,
          &#39;!**/*.min.js&#39;
        ]
      }
    }
  });

  grunt.loadNpmTasks(&#39;grunt-contrib-clean&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-copy&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);

  grunt.registerTask(&#39;build:js&#39;, [
    &#39;clean&#39;,
    &#39;copy:prejs&#39;,
    &#39;uglify&#39;,
    &#39;concat:js&#39;,
    &#39;copy:js&#39;
  ]);
};
</code></pre>

<p><code>concat:js</code>と<code>copy:prejs</code>以外はほぼポータブルなタスク設定になっている。これで<code>grunt build:js</code>と実行すると、最終的に<code>build/js/</code>ディレクトリーへ以下のようにファイルが作成される。</p>

<ul>
<li><mark>bar.js</mark></li>
<li>bar.min.js</li>
<li>bar.min.js.map</li>
<li><mark>foo.js</mark></li>
<li>foo.min.js</li>
<li>foo.min.js.map</li>
<li><mark>lib-a.js</mark></li>
<li>lib-a.min.js</li>
<li>lib-a.min.js.map</li>
<li><mark>lib-b.js</mark></li>
<li>lib-b.min.js</li>
<li>lib-b.min.js.map</li>
<li><mark>main.min.js</mark></li>
<li><mark>main.min.js.map</mark></li>
</ul>

<p>中間のソース・マップ・ファイルはちゃんとまとめられているので、実際にはマークされているファイルだけあれば良い。しかし設定が汎用性のない複雑なものになってしまうので、全部コピーしておく方が面倒がないだろう。そうでなければソース・マップ・ファイルへ<code>sourcesContent</code>で元ソースを含めてしまうのが良い。この辺りはもうちょっと運用しないとどうするのが最良なのかは見えてこなさそうだ。</p>

<hr>

<p>欠点はあまりない。最小化後に連結するという観点の考察がウェブにはまだないので手探りでやることになるのが一番の壁だろう。取るに足りないとは思うが、最終ファイルが数バイトから数十バイト増えることは挙げておく。</p>

<p>利点としては、ライブラリーのライセンスや著作権者情報など消すべきでないものが確実に残ることと、ライブラリーが動作が確認されている状態のままで連結されることが挙げられる。消すべきでないものが残るということは、つまりビルド・タスク側でいわゆるバナーなどと呼ばれている先頭のコメントのことを考えなくて良いということでもある。</p>

<p>欠点と比較する限り、得られるものは大きいと言える。</p>]]></content:encoded>
    </item>

    <item>
      <title>InkscapeのCLIを利用してSVGからPNGへ変換</title>
      <link>http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</link>
      <description>InkscapeにはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけどSVG Advent Calendar 2014の12日目の記事ということにしておこう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/convert-svg-to-png-with-inkscape-cli.html</guid>
      <pubDate>Fri, 12 Dec 2014 02:52:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://inkscape.org/">Inkscape</a>にはCLIがあったらしい。これを利用するとSVGから様々なファイル形式、特にPNGへの変換を自動化しやすくなる。最初PhantomJSとcanvas使ってやろうかとか錯乱してた。後出しだけど<a href="http://www.adventar.org/calendars/366">SVG Advent Calendar 2014</a>の12日目の記事ということにしておこう。</p>

<p>例えば<code>in.svg</code>を幅256ピクセルのPNGファイルとして<code>out.png</code>に変換したいとする。Inkscapeの実行ファイルのディレクトリーへパスが通っているとすると、以下のようなオプションで実行すれば変換される。</p>

<pre><samp>$ <kbd>inkscape --without-gui --export-width=256 --file=in.svg --export-png=out.png</kbd>
</samp></pre>

<p><code>--without-gui</code>でGUIの起動を無効にし、<code>--export-width</code>で幅を(高さはアスペクト比を維持してくれる)、<code>--file</code>で変換元のSVGファイルを、そして<code>--export-png</code>で変換先のPNGファイル名を指定する。複数ファイルの変換などについては無理なようだが、実用上はあまり問題ないようにも思える。Inkscape v0.91-pre.3できちんと変換できることを確認した。</p>

<p>Windows版では<code>inkscape.exe</code>にはCLIがないが、同じ場所にある<code>inkscape.com</code>がコマンド・プロンプト用の実行ファイルになっているので、パスさえ通せばこのままでちゃんと使える。</p>

<hr>

<p>自動化目的だったので<a href="http://hail2u.net/pub/grunt-svg2png.js">svg2pngという名前のGruntタスク</a>を書いてみたりもした(使い始めた)。もっと雑に一対多で変換できるような設定を書けると良さそう。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
