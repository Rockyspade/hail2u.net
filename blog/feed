<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Mon, 16 Feb 2015 15:19:54 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>ドロップインで動くLightbox</title>
      <link>http://hail2u.net/blog/webdesign/drop-in-lightbox.html</link>
      <description>リンクが張られた画像をLightbox形式で表示するようなJavaScriptを書いていた。vwとvh単位でa要素を引き伸ばして適当に前面に表示し、img要素をなんとなく拡大してから天地左右中央配置する。予めクラス指定が必要だったり、スタイルの追加が必要だったりしない、ドロップインで動作するものだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drop-in-lightbox.html</guid>
      <pubDate>Mon, 16 Feb 2015 14:03:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/drop-in-lightbox.png"><img alt="描画領域を超える画像はアスペクト比を維持して縮小される(拡大はされない)" src="/images/blog/drop-in-lightbox.png"></a>
</figure>

<p>リンクが張られた画像をLightbox形式で表示するようなJavaScriptを書いていた。<code>vw</code>と<code>vh</code>単位で<code>a</code>要素を引き伸ばして適当に前面に表示し、<code>img</code>要素をなんとなく拡大してから天地左右中央配置する。予めクラス指定が必要だったり、スタイルの追加が必要だったりしない、ドロップインで動作するものだ。</p>

<p>View Demo: <a href="/pub/test/612.html">Lightbox with Clean Markup</a></p>

<p>デモでそれぞれの画像をクリック(タッチ)すると、描画領域全体に画像が表示される。<code>a</code>要素をオーバーレイの背景に変え、<code>img</code>要素をうまく収まるように調整することになる。</p>

<pre><code>if (this.href !== image.src) {
  image._src = image.src;
  image.src = this.href;
}
</code></pre>

<p>リンク先と画像のURLが違う場合は、画像がサムネイルでリンク先がフルサイズの画像とみなし、一時的に画像のリンク先を書き換えてフルサイズ画像が表示されるようにもなっている。サムネイルのURLは一時的に<code>_src</code>プロパティーに保存しておき、閉じると元に戻るようにもした。</p>

<pre><code>if (image._src) {
  image.src = image._src;
  delete image._src;
}
</code></pre>

<p><code>data-*</code>属性を使ってやりたいところだが、スクリプトの規模に比べて大仰なポリフィルが必要になるので、オレオレプロパティーに保存している。<code>setAttribute()</code>や<code>getAttribute()</code>を<code>data-*</code>属性に使ったら負けだ。</p>

<pre><code>this.style.backgroundColor = &#39;#333&#39;;
this.style.cursor = &#39;zoom-out&#39;;
this.style.height = &#39;100vh&#39;;
this.style.left = &#39;0&#39;;
this.style.position = &#39;fixed&#39;;
this.style.top = &#39;0&#39;;
this.style.width = &#39;100vw&#39;;
this.style.zIndex = &#39;1&#39;;
</code></pre>

<p>コンテキストに依存するので、<code>left</code>と<code>top</code>プロパティーは<code>0</code>にする必要があるだろう。<code>a</code>要素はデフォルトで<code>display: inline</code>のため、<code>position: fixed</code>を指定すると<code>block</code>に変わる、と<a href="http://www.w3.org/TR/css3-positioning/#dis-pos-flo">仕様に規定</a>がある。そのためわざわざ<code>this.style.display = &#39;block&#39;</code>を指定しなくても<code>width</code>プロパティー等はきちんと反映されるようになる。描画領域に合わせるのは<code>100vw</code>と<code>100vh</code>で簡単な時代だ。</p>

<pre><code>image.style.bottom = &#39;0&#39;;
image.style.height = &#39;auto&#39;;
image.style.left = &#39;0&#39;;
image.style.margin = &#39;auto&#39;;
image.style.maxHeight = &#39;96%&#39;;
image.style.maxWidth = &#39;96%&#39;;
image.style.position = &#39;absolute&#39;;
image.style.right = &#39;0&#39;;
image.style.top = &#39;0&#39;;
image.style.width = &#39;auto&#39;;
</code></pre>

<p>画像の天地左右中央配置は<a href="http://unformedbuilding.com/articles/firefox-style-center-middle-aligned-css/">Firefoxの画像表示スタイルシート</a>に幅制限を加えたものにした。FirefoxでCSSではなくJavaScriptで<code>height</code>と<code>width</code>属性を書き換えてリサイズしているのは何か意味があるんだろうか。最大幅を<code>100%</code>にしていないのは単に好みだ。</p>

<p>デモではPlaceIMGの画像でリンク先もそれの場合のみに有効になるようにしている。実際にはURLの判定を<code>[src^=&quot;/img/&quot;]</code>やウェブサイトのドメイン、またはその両方で判定するようにすると良いだろう。</p>

<hr>

<p>様々な事情があってHTMLファイルはいじることが難しいけれど、それらから固定で参照されているJavaScriptファイルだけは追記することが可能、というようなケースで必要になって考えていた。このように画像のURLなどから類推し、既存のHTML構造を利用してスタイルを当てていくのがコストが低い。</p>

<p>デモのページにも書いておいたが、実装依存はともかく<code>z-index</code>プロパティーがコンテキストに依存するという問題がある。ライブラリー化するのは難しそうだ。とは言うもののストレートな実装なので汎用化しなくても良さそうではある。</p>]]></content:encoded>
    </item>

    <item>
      <title>グローバル・ヘッダーのマークアップ</title>
      <link>http://hail2u.net/blog/webdesign/marking-global-header-up.html</link>
      <description>ホーム以外ではロゴとサイト・ナビゲーションをまとめてnav要素で括るような形にグローバル・ヘッダーのマークアップを変えた。ホームでは今まで通りnav要素の外でmark要素を使ってロゴは表示される。あわせてタグラインをh1要素にしてしまったが、何か違う気がする。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/marking-global-header-up.html</guid>
      <pubDate>Sun, 15 Feb 2015 03:30:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/marking-global-header-up.png"><img height="627" alt="ロゴとサイト・ナビゲーションをnav要素の子に" src="/images/blog/marking-global-header-up.png" width="1200"></a>
</figure>

<p>ホーム以外ではロゴとサイト・ナビゲーションをまとめて<code>nav</code>要素で括るような形にグローバル・ヘッダーのマークアップを変えた。ホームでは今まで通り<code>nav</code>要素の外で<code>mark</code>要素を使ってロゴは表示される。あわせてタグラインを<code>h1</code>要素にしてしまったが、何か違う気がする。</p>

<p>他にはロゴを真四角から縦長で下が斜めにカットされているような形に変更した。SVGを直すのがなんとなく面倒だったので<a href="https://github.com/hail2u/hail2u.net-styles/blob/92a47719e30a143657c033bd29314dfc958b407e/global-header/_logo.scss"><code>border</code>プロパティーを利用したCSS</a>で雑にやったけど、明らかにSVGを直す方が簡単だったのでちゃんと<a href="https://github.com/hail2u/hail2u.net-styles/blob/eeed78cc4161ffc8d2784f1d52df382ad8b6fbd0/assets/images/logo.svg">SVG画像</a>を作り直した。縦横比は<code>1:1.618</code>になっていて、ロゴの幅に<code>1.618</code>の4乗をかけるとサブカラムの幅に、それにガッターを加えてまた<code>1.618</code>の2乗をかけるとコンテンツ(メインカラム)の幅になったりする。</p>

<hr>

<p>このマークアップの変更は、ロゴは<code>h1</code>要素か否かみたいなちょくちょく論争になる問題というよりも、ロゴもナビゲーションの一部とみなすべきかなという考えに基づいたもの。そうするとロゴも<code>nav</code>要素の子になるべきかな、と。この場合、ロゴで<code>h1</code>要素を使ってしまうとその<code>nav</code>要素の見出しになってしまう。それはさすがにおかしいので、自然とロゴは<code>h1</code>要素ではなくなった。</p>

<p>このままだと<code>body</code>要素がUntitled BODYになってしまうのが難点で、タグラインを半ば強引に<code>h1</code>要素にしたりしてみた。<code>title</code>要素がちゃんとあるならUntitled BODYでもいいかみたいな雑な感覚でお茶を濁しても良さそうだけど……。もうちょっとちゃんと考えよう。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150214.html</link>
      <description>歩いてたらいきなり臭い。しばらくすると防護服を着た人に囲まれる。そのままずっとにらみ合いを続けているとどんどん臭くなっていき、慌てて脇の下とか手とかを嗅いだが臭くない。なんでだろうとお尻に手を伸ばしてからその手を嗅いだら臭くてびっくりしたところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150214.html</guid>
      <pubDate>Sat, 14 Feb 2015 16:20:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>歩いてたらいきなり臭い。しばらくすると防護服を着た人に囲まれる。そのままずっとにらみ合いを続けているとどんどん臭くなっていき、慌てて脇の下とか手とかを嗅いだが臭くない。なんでだろうとお尻に手を伸ばしてからその手を嗅いだら臭くてびっくりしたところで目が覚めた。</p>

<p>自分が寝ながらすごく臭いおならをしただけだった。そのうち大きい方を漏らしそうで怖い。</p>]]></content:encoded>
    </item>

    <item>
      <title>IE11でのfile:プロトコルに対するHistory APIによる操作</title>
      <link>http://hail2u.net/blog/coding/history-api-for-file-protocol-on-ie11.html</link>
      <description>Internet Explorer 11でfile:///で始まるローカル・ファイルのURLをHistory APIで変更すると、ドライブレターがどんどん増えていく現象が起こることを知った。実行する度に/C:が先頭に追加されていく。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/history-api-for-file-protocol-on-ie11.html</guid>
      <pubDate>Fri, 13 Feb 2015 01:08:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Internet Explorer 11で<code>file:///</code>で始まるローカル・ファイルのURLをHistory APIで変更すると、ドライブレターがどんどん増えていく現象が起こることを知った。実行する度に<code>/C:</code>が先頭に追加されていく。</p>

<pre><code>history.replaceState(null, &#39;&#39;, location.pathname);
</code></pre>

<p>相対URLで書きかえが起こるはずなので、こうするとクエリー文字列やフラグメント識別子を削除してクリーンなURLに書き換わるはずだ。実際、普通のウェブサイトで試すと問題なくうまくいく。しかし<code>file:///</code>プロトコルでローカルのファイルを開いている場合、想定通りに動かない。</p>

<pre><samp>&gt; <kbd>location.pathname</kbd>
&lt; &quot;/C:/Users/Kyo/Desktop/test.html&quot;
&gt; <kbd>history.replaceState(null, &#39;&#39;, location.pathname)</kbd>
&lt; undefined
&gt; <kbd>location.pathname</kbd>
&lt; &quot;/C:/C:/Users/Kyo/Desktop/test.html&quot;
</samp></pre>

<p>このようにドライブレターが増殖する。URLの書き換え自体はこのおかしなURLにちゃんと(？)書き換わっているので、この状態で再読込すると「このページは表示できません」になる。</p>

<hr>

<p>明らかにバグと言えそうだが、実際に何か致命的なことが起こるとも思えないバグだ。報告はしておいたけど、悪いこともできなそうな気がするので放置されそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>フルスクリーンでオーバーレイの検索ボックス</title>
      <link>http://hail2u.net/blog/webdesign/fullscreen-overlay-searchbox.html</link>
      <description>増えてきたフルスクリーンでオーバーレイの検索ボックスだが、まだこれといった無難な実装方法はないように見える。今だとvw/vh/vmin/vmax単位を使ってレイアウト、:target擬似クラスを使ってトグルという形にすれば、ほぼCSSで実現できそうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/fullscreen-overlay-searchbox.html</guid>
      <pubDate>Thu, 12 Feb 2015 00:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/fullscreen-overlay-searchbox.png"><img alt="虫眼鏡アイコンをクリックすると、フルスクリーンかつオーバーレイで表示されるタイプの検索ボックス" height="627" src="/images/blog/fullscreen-overlay-searchbox.png" width="1200"></a>
</figure>

<p>増えてきたフルスクリーンでオーバーレイの検索ボックスだが、まだこれといった無難な実装方法はないように見える。今だと<a href="http://www.w3.org/TR/css3-values/#viewport-relative-lengths"><code>vw</code>/<code>vh</code>/<code>vmin</code>/<code>vmax</code>単位</a>を使ってレイアウト、<a href="http://www.w3.org/TR/css3-selectors/#target-pseudo"><code>:target</code>擬似クラス</a>を使ってトグルという形にすれば、ほぼCSSで実現できそうだ。</p>

<p>View Demo: <a href="/pub/test/609.html">Fullscreen Overlay Searchbox</a></p>

<p>デモではShow Searchboxというリンクをクリックすると検索ボックスが表示され、検索ボックスの左上にある✖をクリックすると閉じることができる。実際のウェブサイトではリンクの代わりに虫眼鏡のアイコンでも使ってやれば良いだろう。</p>

<h2>マークアップ</h2>

<pre><code>&lt;aside id=&quot;search&quot; class=&quot;searchbox&quot;&gt;
  &lt;h1&gt;Search this site&lt;/h1&gt;

  &lt;form&gt;
    &lt;input class=&quot;query&quot; placeholder=&quot;Enter search keyword(s)&quot; type=&quot;search&quot;&gt;
  &lt;/form&gt;

  &lt;footer&gt;
    &lt;a class=&quot;close&quot; href=&quot;#top&quot;&gt;Back to Top&lt;/a&gt;
  &lt;/footer&gt;
&lt;/aside&gt;
</code></pre>

<p>検索ボックスのマークアップは<code>aside</code>要素を使って、このような形にした。<code>id</code>属性は後に<code>:target</code>擬似クラスで利用するため、必須になる。</p>

<p><code>h1</code>要素は冗長な気もするが、通常は隠れたセクションであることを考慮すると、見出しはあった方が良いだろう。<code>label</code>要素や<code>input type=submit&quot;</code>を使う必要がないフォームであることも考えると、このような一般的な文言で見出しを付けておくのが無難か。</p>

<p>閉じるボタンは<code>a</code>要素で<code>#top</code>に移動させるようにして実現するが、リンク文字列は「閉じる」や「Close」ではない方が良い。CSS側で✖に変えたりすることになるが、リンクそのものの機能としてはページの最上部に移動するという機能でしかないからだ。CSSが無効の時に「閉じる」というリンクで「ページの最上部に移動する」ことになるのがおかしいからというように考えても良いだろう。</p>

<h2>フルスクリーン化</h2>

<pre><code>.searchbox {
  height: 100vh;
  left: 0;
  position: fixed;
  top: 0;
  width: 100vw;
}
</code></pre>

<p>検索ボックスのレイアウトでは<code>vw</code>と<code>vh</code>単位を使って描画領域全体と同じサイズになるようにして、フルスクリーンになるようにする。サイズさえ正しければ<code>position: fixed</code>で配置するだけで、きれいに全体にかぶさるはずだ。</p>

<h2>閉じるボタン</h2>

<pre><code>.searchbox .close {
  display: block;
  font-size: 8vmin;
  height: 8vmin;
  left: 1vmin;
  position: absolute;
  top: 1vmin;
  width: 8vmin;
}

.searchbox .close::before {
  content: &#39;✖&#39;;
  display: block;
  height: 100%;
  width: 100%;
}
</code></pre>

<p>閉じるボタンでは<code>vmin</code>単位を使うことで占有する面積を一定以下に維持し、大きすぎる・小さすぎるがあまりないようにしておいた。<code>font-size</code>でも使えるので、うまく使ってやるときれいに文字(記号)を配置することができる。また、<code>vw</code>や<code>vh</code>ではなく<code>vmin</code>単位を使うことで、縦横のどちらが余っているのかわからない検索フォームの領域とかぶさらないようにもできる。そうすると閉じるボタンがクリックできないというような事故や検索フォームをクリアーするアイコンとかぶったというような事故を避けることができるはずだ。</p>

<p>もうひとつスクロールバーの有無という問題があるので、左上に配置すると簡単になる。スクロールバーの有無をCSSで判定するのは難しく、かといってそのためだけにJavaScriptを使うのももったいない。<code>calc()</code>を使うと何とかなるが、直感的ではない。近年のOSのGUIを考えると、閉じるボタンが右上というのももはや暗黙の了解とは言えなくなってきたので、左上でもわかりやすければ大丈夫だろう。</p>

<p>アイコン化は簡単にユニコードの<a href="http://en.wikipedia.org/wiki/Dingbat#Unicode">Dingbatsブロック</a>のHeavy Multiplication Xを利用した。うかつに絵文字で良さそうなものを探すと予期せぬカラー化などが起こるので、こういったUIでおとなしめに使う場合はこの辺りの記号から選択すると良い。</p>

<h2>検索ボックス</h2>

<pre><code>.searchbox .query {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  font-size: 7vmin;
  left: 10vw;
  margin-top: -0.675em;
  position: absolute;
  top: 50%;
  width: 80vw;
}
</code></pre>

<p>検索フォームは縦横中央寄せをすることになる。<code>transform: translate()</code>を使って配置しても良いが、運が悪いと枠線や背景画像がぼやけてしまう。この場合はサイズが明確なので、絶対配置と負のマージンで配置する方が安定する。Flexboxも悪くないが、単純な縦方向のセンタリングには少し牛刀感がある。</p>

<p>左位置の指定や幅においても<code>vw</code>単位を使うことで、前述の閉じるボタンとうまくマッチさせることができる。画面サイズに従ってある程度可変して欲しいフォント・サイズは<code>vmin</code>を使って調節するのが簡単だ。メディア・クエリーを使ってビューポートのサイズで切り替えるのも悪くないがそこそこ手間がかかる。</p>

<h2>トグルの実装</h2>

<pre><code>#searchbox {
  display: none;
}

#searchbox:target {
  display: block;
}
</code></pre>

<p>トグルの機能はフラグメント識別子と<code>:target</code>擬似クラスの組み合わせで簡単に実装できる。閉じるボタンのリンク先を<code>#top</code>にしてやると、それをクリック(タッチ)することで<code>#search:target</code>を無効にできるため、うまいこと検索ボックスを閉じることができるというわけだ。ここでIDセレクターをちゃんと使うことで、フルスクリーンでオーバーレイにするビジュアル・デザインのためのルール群とトグルのためのルールを切り分けることができる。</p>

<p>デモでは検索ボックスを消した後に残るフラグメント識別子を<code>histroy.replaceState()</code>を使って消しているが、これをやめればCSSのみでできるだろう。</p>

<hr>

<p>フルスクリーンでオーバーレイの検索ボックスは、独立したコンポーネントとしてデザインしやすいのが大きな利点だ。そうデザインできることで、異なるデバイス間でも似た検索体験を提供でき、また違うプロジェクトでも再利用することも比較的容易になる。ここで作ったデモもほぼどこでも使えるように出来たと思う。</p>

<p>しかし独立したコンポーネントとしてデザインするためには、構造(HTML)として安定した形(独立したセクション)である必要があり、その上で前後の文脈や周辺の要素に依存しないようにCSSを書いていく必要がある。<code>vw</code>や<code>vh</code>、<code>vmin</code>、<code>vmax</code>といった描画領域を基準にした単位は、親要素はもちろん<code>body</code>や<code>html</code>要素のレンダリング状況を迂回してサイズを決定できるので、そういったCSSの書き方に大いに役に立つ。</p>]]></content:encoded>
    </item>

    <item>
      <title>バターなし！牛乳なし！のヨーグルトを使ったスコーン</title>
      <link>http://hail2u.net/blog/misc/yogurt-scone.html</link>
      <description>ヨーグルトを水切りしてクリームとホエーに分け、それをバターと牛乳の代わりにして作るスコーンを作った。水切りに時間はかかったものの、バターの時とほぼ同じ感覚で作ることができ、特に難しくなかった。美味しかったけれど、やっぱりスコーンではないかなーというできあがりだ。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/yogurt-scone.html</guid>
      <pubDate>Wed, 11 Feb 2015 00:01:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/yogurt-scone.jpg"><img alt="水切りしたヨーグルトを使い、バターなし！牛乳なし！で作ったスコーン" src="/images/blog/yogurt-scone.jpg"></a>
</figure>

<p>ヨーグルトを水切りしてクリームとホエーに分け、それをバターと牛乳の代わりにして作るスコーンを作った。水切りに時間はかかったものの、バターの時とほぼ同じ感覚で作ることができ、特に難しくなかった。美味しかったけれど、やっぱりスコーンではないかなーというできあがりだ。</p>

<p>ヨーグルトの水切りはガーゼを二重にして筒状の容器にかぶせてから輪ゴムで止めたものでやった。キッチンペーパーでも可能なようだけれど、ヨーグルトの水分量の多さにも依存するので、ガーゼやふきんの方が無難そうだ。きっちりクリーム状にするには一晩かかる。ヨーグルトは<a href="http://product.koiwaimilk.com/product/yogurt/nama_400.html">小岩井 生乳100％ヨーグルト</a>を丸々400g使った。これで大体200g弱のクリームと150ccくらいのホエーに分離するようだ。</p>

<table>
<thead>
<tr>
<th>材料</th>
<th style="text-align:right">分量</th>
</tr>
</thead>
<tbody>
<tr>
<td>小麦粉</td>
<td style="text-align:right">150g</td>
</tr>
<tr>
<td>ベーキングパウダー</td>
<td style="text-align:right">10g</td>
</tr>
<tr>
<td>砂糖</td>
<td style="text-align:right">大さじ2</td>
</tr>
<tr>
<td>塩</td>
<td style="text-align:right">小さじ1/3</td>
</tr>
<tr>
<td>ヨーグルトクリーム</td>
<td style="text-align:right">50g</td>
</tr>
<tr>
<td>ホエー</td>
<td style="text-align:right">大さじ1</td>
</tr>
<tr>
<td>サラダ油</td>
<td style="text-align:right">大さじ1</td>
</tr>
<tr>
<td>溶き卵</td>
<td style="text-align:right">1/2個</td>
</tr>
</tbody>
</table>

<p>この分量で7個分として焼いたところ、こぶし大より一回りくらい小さいサイズに焼きあがった。バターなし！牛乳なし！</p>

<p>小麦粉から塩までを一旦混ぜあわせ、そこにヨーグルトクリームを加えて更に混ぜ、最後にホエーから溶き卵までを混ぜると生地がまとまる。ゴルフボールくらいに丸めただけで焼いたところ、ポワンとパンみたいにふっくらしてしまったので、ちゃんとのばして型抜きした方が良いのかもしれない。</p>

<p>サクフワで普通のスコーンとは違った美味しさだった。まわりはカリッと焼きあがることもあって、甘食とかの食感に近い。甘みが強めだったので、砂糖はもうちょっと減らしても良いかもしれないけれど、それだと今度はヨーグルトクリームの酸味やベーキングパウダーの苦味が出てしまいそうだ。</p>

<hr>

<p>スコーンのサクサクではないサックリ感みたいなのはやはりバターなようだ。ちょくちょくバターをなたね油などで代用したお菓子レシピとか見かけるが、あんまり期待はできない感じがしてきた。でも今度やってみよう。</p>

<p>余ったホエーは野菜入れてスープにして飲んだが、これは微妙だった(まずくはない)。このホエーと牛乳でリコッタチーズのようなものができあがるらしいので、今度やる時は挑戦してみようと思う。ヨーグルトクリームの方はレーズンパンに塗ったり、コーヒーに浮かべたり、どうやっても美味しかった。</p>]]></content:encoded>
    </item>

    <item>
      <title>置換要素の絶対配置</title>
      <link>http://hail2u.net/blog/webdesign/absolute-positioning-on-replaced-element.html</link>
      <description>検索ボックスを更新して検索ボタンを左に動かした……つもりだったが、動いていなかったのを直していた。単純に置換要素を絶対配置する時にautoの扱いが非置換要素と違うことを完全に忘れていたのが原因で直せたが、どうしてこうなるのかがよくわからなくなったので少し調べてみたが更に混乱しただけだった。Chrome 40 (31あたりから変わったらしい？)の挙動が正しそうだが……。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/absolute-positioning-on-replaced-element.html</guid>
      <pubDate>Tue, 10 Feb 2015 11:36:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>検索ボックスを更新して検索ボタンを左に動かした……つもりだったが、動いていなかったのを直していた。単純に置換要素を絶対配置する時に<code>auto</code>の扱いが非置換要素と違うことを完全に忘れていたのが原因で直せたが、どうしてこうなるのかがよくわからなくなったので少し調べてみたが更に混乱しただけだった。Chrome 40 (31あたりから変わったらしい？)の挙動が正しそうだが……。</p>

<p>View Demo: <a href="/pub/test/608.html">position: absolute on Replaced Element</a></p>

<p>デモでは置換要素を二つ(入力ボックスと送信ボタン)並べ、送信ボタンを絶対配置しようとしている。</p>

<p>最初の例では入力ボックスの幅が<code>100%</code>になっており、枠線の分だけはみ出す状態だ。この状態で続く送信ボタンを絶対配置し、<code>left</code>プロパティーを無指定にすると、なぜかInternet Explorer 11では入力ボックスの隣に配置される。他のブラウザーでは入力ボックスのすぐ下だ。</p>

<p>二番目の例では入力ボックスに<code>box-sizing</code>プロパティーを適用して、幅を<code>100%</code>にしてもはみ出さないようにしている。この状態ではFirefox 35やMobile Safari 8でも送信ボタンが入力ボックスの隣に配置されるようになる。Chrome 40では入力ボックスのすぐ下だ。</p>

<p>三番目の例では送信ボタンへ<code>left: 0</code>を指定している。Internet Explorer 11では入力ボックスに重なってしまう。他のブラウザーでは入力ボックスのすぐ下だ。</p>

<hr>

<p>折り返しが起きるタイミングと<code>left: auto</code>の解釈の違いが重なっていて、たまたま似たような配置になったりならなかったりするようだ。<a href="http://www.w3.org/TR/CSS2/visudet.html#abs-replaced-width">仕様</a>(<a href="http://www.w3.org/TR/2015/WD-css3-positioning-20150203/#abs-replaced-width">最新の仕様</a>も含め)がややこしいこともあって、どれがバグでどれが仕様なのかよくわからなくなった。</p>

<p>ともかく<code>auto</code>による適当な配置に期待せずにばっちりと値を指定することでこの辺りでハマることはなくなるだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>Drawic v2.9.0</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.9.0.html</link>
      <description>はてなブックマークでブックマークするリンクを復活させた都合で、はてな系のアイコンを4種類、Drawicに追加してv2.9.0にした。はてなのアイコン平べったい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.9.0.html</guid>
      <pubDate>Mon, 09 Feb 2015 10:44:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.github.io/drawic/"><img alt="はてな・人力検索はてな・はてなブックマーク・はてなブロク" height="627" src="/images/blog/drawic-v2.9.0.png" width="1200"></a>
</figure>

<p>はてなブックマークでブックマークするリンクを復活させた都合で、はてな系のアイコンを4種類、<a href="http://hail2u.github.io/drawic/">Drawic</a>に追加してv2.9.0にした。はてなのアイコン平べったい。</p>

<p>ブックマークするリンクを追加する時、はてなブックマークでブックマークするページがユーザーごとにユニークなことをすっかり忘れてた。TwitterやFacebookみたいなURLか、あの大きいブックマーク画面へリダイレクトしてくれるURLみたいなの欲しい気がする……と<code>/my/add.confirm</code>をエンドポイントにするとリダイレクトしてくれることを思い出したので、これを使うことにした。</p>

<p>まだブックマークされていない時のページが気になるけど、ブックマークレットの画面を流用するよりは多分マシ。</p>]]></content:encoded>
    </item>

    <item>
      <title>文字参照と属性セレクター</title>
      <link>http://hail2u.net/blog/webdesign/character-reference-and-attribute-selector.html</link>
      <description>文字参照を含む可能性がある属性の値を使ってセレクターを自動生成するような仕組みで少しハマった。文字参照をそのまま属性セレクターの値として指定してしまったので、うまく動かなかった。style要素に記述するようなケースでも、属性セレクターの値には文字参照は使えない。戻して書き、必要ならバックスラッシュでエスケープする。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/character-reference-and-attribute-selector.html</guid>
      <pubDate>Sun, 08 Feb 2015 10:12:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>文字参照を含む可能性がある属性の値を使ってセレクターを自動生成するような仕組みで少しハマった。文字参照をそのまま属性セレクターの値として指定してしまったので、うまく動かなかった。<code>style</code>要素に記述するようなケースでも、属性セレクターの値には文字参照は使えない。戻して書き、必要ならバックスラッシュでエスケープする。</p>

<p>View Demo: <a href="/pub/test/607.html">Character Reference and Attribute Selector</a></p>

<p>デモの<code>p</code>要素には<code>title</code>属性の値に二重引用符が文字参照で入っている。普通に文字参照を使って属性セレクターを書いた場合、要素が選択できない。また属性セレクターでの二重引用符は特別な意味を持つので、引用符なしのつもりで書いても同じように選択できない。文字参照を戻した上で以下のどれかで指定する必要がある。</p>

<ul>
<li>一重引用符で括る</li>
<li>二重引用符で括り、エスケープする</li>
<li>二重引用符をエスケープする</li>
</ul>

<p>属性セレクターでは引用符で括ることが必須ではないので、エスケープするだけでも大丈夫だった。</p>

<hr>

<p>やりたかった仕組みではユーザーの入力によって仕込まれた<code>title</code>属性の値に従ってセレクターを生成して、スタイルを追加するというようなものなので、ユーザーの入力をそのまま<code>style</code>要素の子に追加する必要があり、かなり危険そうだ。別の方法を考えなければならなくなった……。</p>]]></content:encoded>
    </item>

    <item>
      <title>node-git-release v1.1.2</title>
      <link>http://hail2u.net/blog/software/node-git-release-v1.1.2.html</link>
      <description>node-git-releaseをio.js v1.1.0を要件にして、child_process.spawnSync()を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも*Sync()がサポートされ、動くようになったようだ(試してない)。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/node-git-release-v1.1.2.html</guid>
      <pubDate>Sat, 07 Feb 2015 09:38:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/hail2u/node-git-release">node-git-release</a>をio.js v1.1.0を要件にして、<code>child_process.spawnSync()</code>を使って書き直した。使い方をうまく考えつかなくて、あんまりきれいにならない。asyncパッケージを使った方がスッキリ見えるのは慣れの問題だろうか。とか下書きしていたらNode.js v0.12.0が出て、こちらでも<code>*Sync()</code>がサポートされ、動くようになったようだ(試してない)。</p>

<p><code>package.json</code>でio.jsの特定バージョンを要件にしたい場合、<code>engines</code>フィールドでは<code>iojs</code>というキーで指定するようだ。npmの公式ドキュメントでは特に触れられていないが、Herokuでは既にこれを見て実装されているという話だった。</p>

<pre><code>{
  &quot;engines&quot;: {
    &quot;iojs&quot;: &quot;&gt;=v1.1.0&quot;
  }
}
</code></pre>

<p>当然ながら実行をブロックしてくれるわけではないので、気休め程度と言って良い。他、この<code>engines</code>フィールドでio.js v1.1.0<em>または</em>Node.js v0.12.0という要件にしたい場合の書き方がわからないという問題もあった。配列で書くしかないような気がするが、解釈できるのだろうか。色々想定されていなさそうなフィールドなので、Herokuで明示的にio.jsを使いたいという場合を除いて指定しない方が良さそうだ。</p>

<hr>

<p>WindowsのGitがアレでアレなので、いまだ<code>npm publish</code>することができない。一生無理そう。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
