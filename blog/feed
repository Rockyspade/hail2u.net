<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Fri, 27 Feb 2015 05:40:56 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>min-widthを含むクエリーをソート</title>
      <link>http://hail2u.net/blog/coding/pack-and-sort-min-width.html</link>
      <description>CSS MQPackerにmin-widthを使ったクエリーのみ(なんとなく)ソートしてやる機能を付けている。あまり付けるつもりはなかったけれど、ユーザー層が広がったっぽいこともあり、たまにメールで聞かれたりもしていたので、まぁやるかという感じになった。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/pack-and-sort-min-width.html</guid>
      <pubDate>Fri, 27 Feb 2015 05:40:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/hail2u/node-css-mqpacker">CSS MQPacker</a>に<code>min-width</code>を使ったクエリーのみ(なんとなく)ソートしてやる機能を付けている。あまり付けるつもりはなかったけれど、ユーザー層が広がったっぽいこともあり、たまにメールで聞かれたりもしていたので、まぁやるかという感じになった。</p>

<p>色々面倒なのがあるので、多くの人が必要なのは<code>min-width</code>だけだろうと決めつけて実装している。その上で以下の条件にマッチするクエリーを<em>後ろ</em>に回して、その中でソートするようにした。</p>

<ul>
<li><code>min-width</code>をどこかに含む</li>
<li>対応している単位である</li>
<li><code>calc()</code>は使っていない</li>
</ul>

<p>クエリーはまずカンマで分割されて、その中で更に空白文字で分割し、クエリーをなんとなく多次元配列へ変換する。ここで<code>min-width</code>が見つかったら後ろに回すようになっている。対応した単位は<code>px</code>を基準に<code>ch</code>、<code>em</code>、<code>ex</code>、<code>pc</code>、<code>pt</code>、そして<code>rem</code>までだ。どうやっても描画領域を基準にした<code>v*</code>単位には対応できない。<code>cm</code>や<code>in</code>は対応しても良いけれどさほど意味はなさそうだ。ソートは<code>px</code>単位に変換されて行われる。</p>

<pre><code>@media (min-width: 48px) {}
@media (min-width: 2em) {}
@media (min-width: 1rem) {}
</code></pre>

<p>このように単位系が混在している場合は以下のように良い感じ(私見)にソートされる。それぞれの単位系ごとにソートとしても良いのだけど、それはそれで面倒そうなので一気にソートしてしまうことにした。</p>

<pre><code>@media (min-width: 1rem) {}
@media (min-width: 2em) {}
@media (min-width: 48px) {}
</code></pre>

<p><code>1rem</code>は<code>16px</code>、<code>2em</code>は<code>32px</code>とみなされ<code>48px</code>より前に来るようになるわけだ。</p>

<p>式自体の書き換えはもちろん行わない。<code>calc()</code>にも対応したい気はすごくあるのだけど、フルスクラッチで書くのはなかなか厳しそうだ。<a href="https://www.npmjs.com/package/reduce-css-calc">reduce-css-calc</a>を使おうかなと考えている。</p>

<p>CSSの書き方自体は普通にメディア・クエリーを書いてくれればなんとかなるはずだ。気をつけるのはなるべく単位を揃えることくらいだろう。気取って<code>screen</code>とか書いていても、Retina対応の<code>resolution</code>が混ざっていたりとかも大丈夫だと思うのだけど、もっと色々テスト書かないと不安だ。</p>

<hr>

<p>メディア・クエリーは<em>後方互換性を維持して</em>今度更に強化されていく。実装の方も進みつつある上、<code>calc()</code>の存在や憎むべきCSS Variablesも控えているので、やはり一時的なソリューションにしかならないと思う。<code>min-width</code>だけにしたのもその辺りが理由だ。でもソリューションとして機能しなくなった頃にはHTTP/2やらWeb Componentsやらで大量の細かいCSSファイルを気軽に投げつけられる時代になっているはずなので、きっとメディア・クエリーをまとめなくても良くなっているのではないかとも思う。</p>

<p><code>not</code>キーワードの扱いをどうしようか悩んでいて、それが解決したらリリースするつもりだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>Semantic Versioningにおける破壊的な変更</title>
      <link>http://hail2u.net/blog/software/breaking-changes-on-semver.html</link>
      <description>io.jsがv1.3.0になり、ビルトインのURLモジュールでresolve(&#39;/foo/bar&#39;, &#39;.&#39;)が/foo/とスラッシュ付きで返されるようになった。今までは/fooとスラッシュなしで返っていたので、これは破壊的な変更であり、Semantic Versioningに従うならばメジャー・バージョンを上げるべきではないのかという議論がなされていたようだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/breaking-changes-on-semver.html</guid>
      <pubDate>Thu, 26 Feb 2015 06:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://iojs.org/">io.js</a>がv1.3.0になり、ビルトインのURLモジュールで<code>resolve(&#39;/foo/bar&#39;, &#39;.&#39;)</code>が<code>/foo/</code>とスラッシュ付きで返されるようになった。今までは<code>/foo</code>とスラッシュなしで返っていたので、これは破壊的な変更であり、Semantic Versioningに従うならばメジャー・バージョンを上げるべきではないのかという議論がなされていたようだ。</p>

<p>仮にこういった実装ミスの修正が破壊的な変更だとすると、ほとんどすべてのバグ・フィックスは破壊的な変更になってしまう。バグ・フィックスは必ずどこかで何か(モンキーパッチとか)を破壊するし、破壊しないことを保証することは不可能だ。Semverにおいては変更の仕分けはユーザーの利用ではなく、仕様という観点での話になる。つまり仕様に変更があったかどうかが焦点になる。</p>

<p>このURLモジュールのケースでは、仕様が外部(ドキュメントのブラウザーの実装のように～という一文)にあり、それに従った結果になっていなかったということになる。この間違った実装に依存したコードにおいては破壊的な変更となるが、それはそのコードが悪いだけで、メジャー・バージョンを上げる理由にはならない。</p>

<p>概ねこう解釈したが、ユーザーに優しくはない。特にこのモジュールのこの挙動は長らく放置されていたバグで、こういうものだと思って利用していた人も多かったはずだ。stableと明記されていたこともその判断を後押ししたことだろう。そこを考慮するとメジャー・バージョンを上げてやり、ユーザーに周知する必要があったんじゃないだろうか。</p>

<p>Semverのこのあたりの微妙な判断を求められる点が、v1.0.0をリリースする気配がないパッケージでnpmリポジトリーが溢れかえっている原因なのかなと感じる。メジャー・バージョンを上げることの抵抗感をなくすか、Semverを諦めるかの二択になりそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>VimでGitで衝突したところにジャンプ</title>
      <link>http://hail2u.net/blog/software/jump-git-conflict-in-vim.html</link>
      <description>Gitでマージやリベースで衝突が起きた場合、その解消のために該当ファイルを開き、移動する……前に自動的に&lt;&lt;&lt;&lt;&lt;&lt;&lt;にジャンプするだけみたいなのがちょっと欲しくなった。VimだとBufReadPostでsearch()を呼べば良さそうだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/jump-git-conflict-in-vim.html</guid>
      <pubDate>Wed, 25 Feb 2015 21:37:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Gitでマージやリベースで衝突が起きた場合、その解消のために該当ファイルを開き、移動する……前に自動的に<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>にジャンプするだけみたいなのがちょっと欲しくなった。Vimだと<code>BufReadPost</code>で<code>search()</code>を呼べば良さそうだ。</p>

<pre><code>augroup LtLtLtLtLtLtLt
  autocmd!

  &quot; Jump to first conflict position if find
  autocmd BufReadPost * call search(&#39;^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#39;, &#39;sw&#39;, 0, 1000)
augroup END
</code></pre>

<p>検索を一周させるようにフラグを立てておくついでに戻れるようにもフラグを立てたつもりだけど、発火するタイミング的に常に先頭で意味が無いような気がしないでもない。あと大きなファイルで死にそうなので1000ミリ秒に制限しておいたけど、もっと短くても良さそう。カーソル位置の復帰など、同じようにファイルを開いた時にカーソル位置を動かすプラグインと相性は悪いけど、なんとかなる。</p>

<p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>は大体は文法エラーなので、Syntasticを使っている人は、</p>

<ul>
<li>開いた時にチェック(<code>let g:syntastic_check_on_open = 1</code>)</li>
<li>最初のエラーにジャンプ(<code>let g:syntastic_auto_jump = 1</code>)</li>
<li>位置リストを自動的に開く(<code>let g:syntastic_auto_loc_list = 1</code>)</li>
</ul>

<p>の設定を有効にするとだいたい実現できそうな気がする。最初のエラーじゃなかった時の保険として、位置リストを自動的に開くようにしておくといける。</p>]]></content:encoded>
    </item>

    <item>
      <title>よろしくESLint</title>
      <link>http://hail2u.net/blog/coding/come-into-eslint.html</link>
      <description>重い腰を上げてESLintを使い始めた。そろそろv1.0.0になるらしい。これは良いなと思ったところを簡単にまとめておく。ついでに引っかかって対処にちょっと悩んだところも。既にすごく好感触なので、このまま素直に乗り換えられると良いな。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/come-into-eslint.html</guid>
      <pubDate>Tue, 24 Feb 2015 05:14:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>重い腰を上げて<a href="http://eslint.org/">ESLint</a>を使い始めた。そろそろv1.0.0になるらしい。これは良いなと思ったところを簡単にまとめておく。ついでに引っかかって対処にちょっと悩んだところも。既にすごく好感触なので、このまま素直に乗り換えられると良いな。</p>

<h2>package.jsonに設定が書ける</h2>

<p>外部設定ファイルとしては<code>.eslinrc</code>の他にも<code>package.json</code>に混ぜ込むこともできる。フィールド名は<code>eslintConfig</code>で、それ以下は同じ。</p>

<pre><code>{
  &quot;eslintConfig&quot;: {
    &quot;env&quot;: {
      &quot;node&quot;: true
    }
  }
}
</code></pre>

<p>通常のnpmパッケージでは別にした方が良さそうだが、依存解決にnpmを使うだけとかコマンド作るためだけのようなプライベートなケースでは特に気にせず混ぜてしまって良さそう。</p>

<h2>no-multi-spaces</h2>

<p>複数の連続した空白が検出できる。</p>

<pre><code>var a =  1;
</code></pre>

<p>これで警告出るのはかなり助かる。ソロエルノスキーさんには厳しそう。</p>

<h2>no-comma-dangle</h2>

<p><a href="http://jshint.com/">JSHint</a>では<code>es3</code>オプションを有効にしないと検出できない不必要なカンマを検出できる。とにかくあのカンマを消したい人なのですごくうれしい。</p>

<h2>curly</h2>

<p>中括弧なしの制御構文を検出できる。一行<code>if</code>とか書くなやみたいな感じで、僕はそっち派なのですごい助かる。</p>

<h2>出現順の検出</h2>

<p>先に<code>var</code>などで定義されているかや定義される前に関数が使われていないかなどを検出できる。他、定義済みで使われていないというケースも検出できる。メンテナンスのお供に。</p>

<hr>

<p>あまり気にしたことがなくて対処に困ったものも挙げておく。</p>

<h2>quotes</h2>

<p>JSHintで一重引用符を強制されて以降、そっちを使っていたが、ESlintではデフォルトは二重引用符になっていた。書き直すのがとても面倒な気がするので、<code>~/.eslintrc</code>で以下のようにして一重引用符をデフォルトにしてしまった。</p>

<pre><code>{
  &quot;rules&quot;: {
    &quot;quotes&quot;: [
      1,
      &quot;single&quot;
    ]
  }
}
</code></pre>

<h2>camelcase</h2>

<p>変数名などにアンダースコアを使えなくなり、キャメルケースで書くことを要求される。厳しいのはGruntの設定ファイルなどでアンダースコアがばんばん出てくるあたり。グローバルやファイルごとに無効にしたいところだけど、素直に引用符で括ってパスさせるのが良さそう。</p>

<h2>no-underscore-dangle</h2>

<p>アンダースコアで始まるまたは終わる変数やプロパティーへアクセスするだけで怒られる。ライブラリー側で使っていることもあるので、そういったファイルでのみ無効にするのが良さそう。</p>

<pre><code>var _ = require(&#39;underscore&#39;);
</code></pre>

<p>だけは特別視されてて、現実的。</p>

<h2>no-process-exit</h2>

<p>Node.js (つまり<code>&quot;node&quot;: true</code>)で<code>process.exit()</code>を使ってプログラムを終了しようとしていると怒られる。とりあえずは以下のようにして逃げるのも可能だが、完全に悪手っぽい。</p>

<pre><code>var exit = process.exit;

if (process.argv[3] === &#39;--version&#39;) {
  console.log(&#39;Foo v0.1.0&#39;);
  exit();
}
</code></pre>

<p>CLIプログラムのような完全に最上流であることを保証できるファイルのみで無効にするなら悪くはなさそう。だけど埋め込みコメントでの設定はなるべく避けた方が良いという経験則があるので、<code>switch</code>構文などをうまく使って書き直すのが良さそう。</p>

<p>他に<code>ecmaFeatures</code>フィールドで<code>globalReturn</code>を許可してやり、<code>process.exit()</code>の代わりに<code>return</code>を使うという手もなくはないみたいだけど、どうなんだろう。</p>

<hr>

<p>凶悪なルール(one-varとか)がデフォルトで無効なことが多いので、JSLintほどイラッとすることはない。しかしコード・スタイル的な面で様々なチェックが入るので、JSHintほどこれ拾えやみたいな辛さもない。肌にあっているのか快適に気持ちよく修正していけた。</p>

<p>無効になっているルールも機会があったら有効にしてみたいと感じるものが多い。例えば以下のルールは気になる。</p>

<ul>
<li>valid-jsdoc - JSDocのバリデーション</li>
<li>block-scoped-var - <code>var</code>をなんとなく<code>let</code>扱いするぞ</li>
<li>no-process-env - <code>process.env</code>いじっちゃダメ</li>
<li>no-warning-comments - コメントにTODOとか書くなや</li>
<li>vars-on-top - <code>var</code>はスコープの先頭にまとめてね</li>
<li>no-undefined - その<code>undefined</code>は<code>undefined</code>なの</li>
<li>no-sync - 同期とかウケる</li>
<li>brace-style - 中括弧の前後の改行スタイルは統一してくれ</li>
<li>sort-vars - 変数はソートするとわかりやすいぞ</li>
</ul>

<p>歴史的な事情により今すぐJSHintを投げ捨てるということは難しい。まずは手元でESLintを使ってJSHintよりのルール(一重引用符だとか半角空白二つによるインデントだとか)でチェックし、JSHintはタスク・ランナーなどからのみ実行するようにしておくようにするのが良さそう。そうしておけばうまく機会を捉えて切り替えを断行することができるはず。</p>]]></content:encoded>
    </item>

    <item>
      <title>Failswatch</title>
      <link>http://hail2u.net/blog/internet/failswatch.html</link>
      <description>ウェブサイトの死活監視をしつつ、もし落ちたら事前に保存しておいたキャッシュを自動的に返してくれる、Failswatchはそういう機能を提供する。CloudFlareや他のCDNにも同じ機能があるが、こちらはCDN的な機能はなく特化型で有料プランのみ。構成がシンプルな分、トラブルは少なそうだ。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/failswatch.html</guid>
      <pubDate>Mon, 23 Feb 2015 06:54:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ウェブサイトの死活監視をしつつ、もし落ちたら事前に保存しておいたキャッシュを自動的に返してくれる、<a href="https://failswitch.com/">Failswatch</a>はそういう機能を提供する。<a href="https://www.cloudflare.com/">CloudFlare</a>や他のCDNにも同じ機能があるが、こちらはCDN的な機能はなく特化型で有料プランのみ。構成がシンプルな分、トラブルは少なそうだ。</p>

<p>ウェブサイトの死活監視は必要なのだけど、中小規模のウェブサイトにおいてその対策までは練られない印象がある。実際に問題が起こるのはもっと上流であったりして、手が出せないからだ。せいぜい落ちた時にすばやくアナウンスをTwitterなどで出すくらいだろう。</p>

<p>このFailswatchのような、対策までをセットにしたソリューションというのは需要はかなりある。導入に成功すればほぼ全自動で対策が完了という点もスケールにマッチしている。しかし小規模なウェブサイトで継続的に使うには月15ドルはちょっと高いか。立ちあげ直後のトラフィックが読めない時期だけ保険として使うなどという一時的な利用に留めるのが良さそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSSできれいな斜め線</title>
      <link>http://hail2u.net/blog/webdesign/antialiased-diagonal-line-with-css.html</link>
      <description>CSSで斜めに線を引くようなことをするには多少なりとも工夫が必要だった。つまりCSSで作る吹き出し(もう5年前の記事だ)のようにborderプロパティーを使って頑張るしかなかったわけだ。今はlinear-gradient()があるので直感的に作ることができるようになった。しかしきれいに引くとなるとまだ工夫が必要そうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/antialiased-diagonal-line-with-css.html</guid>
      <pubDate>Sun, 22 Feb 2015 01:39:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/antialiased-diagonal-line-with-css.png"><img alt="斜め" height="627" src="/images/blog/antialiased-diagonal-line-with-css.png" width="1200"></a>
</figure>

<p>CSSで斜めに線を引くようなことをするには多少なりとも工夫が必要だった。つまり<a href="/blog/webdesign/pure-css-speech-bubble.html">CSSで作る吹き出し</a>(もう5年前の記事だ)のように<code>border</code>プロパティーを使って頑張るしかなかったわけだ。今は<code>linear-gradient()</code>があるので直感的に作ることができるようになった。しかしきれいに引くとなるとまだ工夫が必要そうだ。</p>

<p>View Demo: <a href="/pub/test/614.html">CSS Diagonal Line</a></p>

<p><code>border</code>プロパティーを使ったもの、<code>linear-gradient()</code>を背景で使ったもの、Data URI化したSVGを背景に使ったもの、以上の計3つのデモを作った。</p>

<pre><code>.lg {
  background-image: linear-gradient(
    <mark>to right bottom</mark>,
    transparent 50%,
    #f0f 50%
  );
  background-repeat: no-repeat;
  background-size: cover;
  height: 3rem;
  width: 16rem;
}
</code></pre>

<p>2番目の<code>linear-gradient()</code>を背景に使ったものが最も直感的に書けるが、Chrome 40ではぎざぎざになってしまう。Chromeはトップシェアで安定しだしたと考えられるので、今この方法で実装するのはかなり勇気がいる。</p>

<pre><code>.border {
  border-bottom: 3rem solid #f0f;
  border-left: 16rem solid <mark>transparent</mark>;
  box-sizing: border-box;
  height: 0;
  width: 16rem;
}
</code></pre>

<p>1番目の<code>border</code>プロパティーによる実装は安定の結果だ。以前はハードウェア・アクセラレーションを有効化するハックが必要だったが、今はいらない。とはいえ相変わらず意味のわからないCSSコードになる。加えて<code>border</code>プロパティーで<code>%</code>を使えないため、不明な幅の要素に対してはうまく作ることができない。</p>

<pre><code>.svg {
  background-image: url(&#39;data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%221%22%20height%3D%221%22%20preserveAspectRatio%3D%22none%22%3E%3Cpath%20d%3D%22M0%201l1-1v1z%22%20fill%3D%22%23f0f%22%2F%3E%3C%2Fsvg%3E&#39;);
  background-repeat: no-repeat;
  background-size: 100% 100%;
  height: 3rem;
  width: 16rem;
}
</code></pre>

<p>しょうがないのでSVGをData URI化して埋め込むという奥の手を使った。斜めの画像があるという前提だと、概ね直感的なCSSだとは言える。Data URIも長いが、それでも226バイト程度なので、多少複雑なCSSグラデーションだと思えば許容範囲だろう。見逃しがちなのは<code>background-size</code>プロパティーで明示的にいっぱいいっぱいにリサイズしてやることくらいだ。</p>

<pre><code>&lt;svg
  xmlns=&quot;http://www.w3.org/2000/svg&quot;
  width=&quot;1&quot;
  height=&quot;1&quot;
  preserveAspectRatio=&quot;none&quot;&gt;
  &lt;path
    d=&quot;M0 1l1-1v1z&quot;
    fill=&quot;#f0f&quot;/&gt;
&lt;/svg&gt;
</code></pre>

<p>SVGもこの程度の簡単なものだ。Chromeにかなり古くからある<a href="/pub/test/613.html">リサイズ・バグ</a>へ対応するために<code>preserveAspectRatio</code>属性を指定することに注意が必要なくらいだ(これで30分くらいハマった)。</p>

<hr>

<p>こういった斜めの線やブロックを作る場合にはCSS Transformを使って回転させる(<code>rotate()</code>する)というアプローチも可能だ。少し足りなかったりはみ出たりする部分は、<code>width</code>プロパティーで大きく作り、<code>overflow</code>プロパティーで隠せば良い。中身も回ってしまうのは、回転軸に注意して子の要素で逆方向に回転させれば戻せるだろう。CSSは煩雑だが傾けたいから傾けるわけで、概ね直感的とも言えそうだ。</p>

<p>ただ<a href="http://kyonagashima.com/">必要としたページ</a>では、斜めにしたいブロックの高さが一定ではないこと、斜めの角度ではなく高さを一定にしたかったことなどの条件があった。CSS Transformでも頑張って計算すれば可能そうだったが、面倒すぎるかと思い、背景画像によるアプローチに絞って考えていた。</p>

<hr>

<p>安定なのは<code>border</code>プロパティーで行う実装だが、不明な幅の要素で使いたい場合はSVGによる実装というのが現時点での妥当な選択だろう。Firefox 35で若干アンチエイリアスが甘いことも考慮すると、SVGで統一という選択も悪くはない。とにかくChromeでも早いところ<code>linear-gradient()</code>へきれいにアンチエイリアスかかるようになって欲しい。</p>]]></content:encoded>
    </item>

    <item>
      <title>xml2js v0.4.5でCDATAセクションがサポート</title>
      <link>http://hail2u.net/blog/coding/cdata-section-in-xml2js-v0.4.5.html</link>
      <description>Node.jsでXMLをまともに読み書きできる唯一と言えそうなxml2jsパッケージがv0.4.5に更新され、待望のCDATAセクションの書き込みに対応した。今までも読み込みは普通に行えていたが、書き込みには対応していなかったため全て文字参照で書かれていたが、これできれいに(小さなRSSが)吐ける。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/cdata-section-in-xml2js-v0.4.5.html</guid>
      <pubDate>Sat, 21 Feb 2015 01:28:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Node.jsでXMLをまともに読み書きできる唯一と言えそうな<a href="https://github.com/Leonidas-from-XIV/node-xml2js">xml2js</a>パッケージがv0.4.5に更新され、待望のCDATAセクションの書き込みに対応した。今までも読み込みは普通に行えていたが、書き込みには対応していなかったため全て文字参照で書かれていたが、これできれいに(小さなRSSが)吐ける。</p>

<p>使い方はビルダーのオプションで<code>cdata: true</code>するだけだ。これで要素の値が文字列で、かつ<code>[&amp;&lt;&gt;]</code>のいずれかを含む場合のみCDATAセクションとして書かれるようになる。</p>

<pre><code>var xml2js = require(&#39;xml2js&#39;);

var builder = new xml2js.Builder({
  cdata: true
});
var obj = {
  foo: &#39;Foo&#39;,
  bar: &#39;Bar&#39;
};
var xml = builder.buildObject(obj);
</code></pre>

<p>このようにグローバルでの設定しかないため、CDATAで書くか書かないかの二択になる。この要素ではCDATAを、この要素では文字参照で、などとはできないのが少し残念だ。</p>

<hr>

<p>まだサポートは完璧ではないようで、パーサー側で<code>explicitArray: false</code>で配列を強制せずに読み込んだ場合にうまくいかない事がある。そう設定した場合に得られるJavaScriptオブジェクトやそれと同じ構造を持つJavaScriptオブジェクトを、CDATAで書くように設定したビルダーに渡しても、配列でないプロパティーの値はCDATAで書いてくれない。最小再現コードは以下の通りだ。</p>

<pre><code>var xml2js = require(&#39;xml2js&#39;);

console.log(new xml2js.Builder({
  cdata: true
}).buildObject({
  &#39;foo&#39;: {
    &#39;bar&#39;: &#39;baz &amp; qux&#39;
  }
}));
</code></pre>

<p>これで<code>bar</code>要素の中身がCDATAセクションになってくれれば良いが、なってくれない。</p>

<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;foo&gt;
  &lt;bar&gt;baz &amp;amp; qux&lt;/bar&gt;
&lt;/foo&gt;
</code></pre>

<p>イシューは立てておいたので早めに直って欲しい。手元では<a href="/pub/xml2js.js.diff">パッチ</a>を(しかもJavaScriptファイルの方に)当ててなんとなく対応してみたが、ちゃんと全部コード読んでないので間違ってそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150218.html</link>
      <description>ケンタウロス(セントール)のことを考えていた。あのサイズで人間の上半身だと、食料の摂取が大変で、食事だけで数時間浪費してしまいそうだ、とか。胃も同じサイズだと……というところまで考えて、はて胃はどこにあるのだろうか、いや待って腸はどうだろうか、いやいやそもそも心臓や肺が人間の部分にあってそのサイズのままだったら、馬として走れないんじゃないのか、などと疑問がわいた。そこで一頭捕まえて解剖しようとしたら、蹴られて痛いってなったところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150218.html</guid>
      <pubDate>Fri, 20 Feb 2015 05:00:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ケンタウロス(セントール)のことを考えていた。あのサイズで人間の上半身だと、食料の摂取が大変で、食事だけで数時間浪費してしまいそうだ、とか。胃も同じサイズだと……というところまで考えて、はて胃はどこにあるのだろうか、いや待って腸はどうだろうか、いやいやそもそも心臓や肺が人間の部分にあってそのサイズのままだったら、馬として走れないんじゃないのか、などと疑問がわいた。そこで一頭捕まえて解剖しようとしたら、蹴られて痛いってなったところで目が覚めた。</p>

<p>合成生物学みたいなのあるけど、別にこういうケンタウロスのようなキメラ(複合生物)を扱う学問じゃなかった。キメラ系だとグリフォン(鷲の頭と翼にライオンの胴体と足)が飛び抜けてかっこいいとずっと思ってたけど、ヒッポグリフ(鷲の頭と翼に馬の胴体と足)の方がシュッとしててもっとかっこいい。</p>]]></content:encoded>
    </item>

    <item>
      <title>普通に引かれた下線</title>
      <link>http://hail2u.net/blog/webdesign/underlining.html</link>
      <description>Mediumライクなかっこいいリンクの下線をついに諦めた。目的とコードがあまりにもかけはなれていて、CSSらしくないのが気になるようになったからだ。プロパティーの組み合わせから結果が想像しづらいルールセットに苦しめられた過去を思い出す。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/underlining.html</guid>
      <pubDate>Thu, 19 Feb 2015 01:42:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://medium.com/designing-medium/crafting-link-underlines-on-medium-7c03a9274f9">Mediumライクなかっこいいリンクの下線</a>をついに諦めた。目的とコードがあまりにもかけはなれていて、CSSらしくないのが気になるようになったからだ。プロパティーの組み合わせから結果が想像しづらいルールセットに苦しめられた過去を思い出す。</p>

<p>とは言うものの、できることなら下線の色だけを変えるようにはしたいので、<code>text-decoration-color</code>プロパティーのサポートで切り替えるようにCSSを書いた。</p>

<pre><code>a {
  color: #1188bb;
  text-decoration: underline;
}

@supports (-moz-text-decoration-color: red) or
  (-webkit-text-decoration-color: red) or
  (text-decoration-color: red) {
  a {
    color: inherit;
    -moz-text-decoration-color: #5bacd0;
    -webkit-text-decoration-color: #5bacd0;
    text-decoration-color: #5bacd0;
  }
}
</code></pre>

<p>まず通常はリンクの色を変えて、普通にその色で下線が引かれるようにしておく。そして<code>@supports</code>ルールを使い、<code>text-decoration-color</code>プロパティーをサポートしている環境では、文字色を地の文と合わせ(<code>inherit</code>)た上で、下線の色を変更してやる。式で<code>red</code>を使っているのは一番短いからで、他に特に意味はない。</p>

<p><a href="http://caniuse.com/#feat=text-decoration"><code>text-decoration-color</code>プロパティーをサポートしている環境</a>はFirefox 6.0以降とSafari 7.1及びMobile Safari 7.1以降のみだ。Chrome 40やInternet Explorer 11ではまだサポートされていない。また、サポートしている環境でもまだプリフィックスがとれていないので(Firefoxでは36から取れる)、<code>@supports</code>ルールの式とプロパティーの両方でプリフィックスを書く必要がある。</p>

<p>しかしながら<a href="http://caniuse.com/#feat=css-featurequeries"><code>@supports</code>ルール</a>はSafari 7.1以降やMobile Safari 7.1以降でサポートされていない。そのため、ここまで<em>ちゃんと</em>書いてもFirefox 6.0以降でしか有効にならないという現実が待ち受けている。CSSハックを混ぜて適用させることもできるが、ChromeやIEの安定版でサポートされていないことを考えると、まだそこまでする必要もなさそうだ。</p>

<hr>

<p>Mediumライクなリンクの下線は、その表示結果自体の満足度はかなり高いが、時々これはいったい何をどうするためのCSSなのかがわからなくなる。特にそういったものをプレースホルダー・セレクターやミックスインとして定義している場合、<em>ハイパーリンクへ適用されるスタイルであること</em>という文脈が失われるため、何がどうなっていて何のための定義たちなのかまったく想像できないルールセットになる。</p>

<pre><code>%underline {
  background-image: linear-gradient(
    transparent 50%,
    #5bacd0 50%
  );
  background-position: 0 87.5%;
  background-repeat: repeat-x;
  background-size: 2px 2px;
  text-decoration: none;
}
</code></pre>

<p>実際に実装するとこんな感じのプレースホルダー・セレクターになる。CSSグラデーションで横方向に繰り返す画像を作ろうとしているまではわかるが、このルールセットを見てスッと<em>文字列の少し下に<code>1px</code>の線を引く</em>というルールセットだということを把握するのは無理があるだろう。プレースホルダー・セレクターの名前で説明を試みても良いが……。</p>

<p>このようなセレクターとセットで初めて意味をなすことがあるようなケースはままある。例えば<code>:target</code>擬似クラスや、<code>:focus</code>擬似クラスと隣接セレクターを組み合わせたセレクターなどは良い例だろう。これらに割り当てられるルールセットは一部プロパティーを変更するだけであったりするため、それだけでは何のために何をやっているのかよくわからない。</p>

<p>僕がCSSにおいてオブジェクト志向を持ち込むことに無理があると考えているのは、このようにロジックが混ざるセレクターとルールセットが事実上不可分だと考えているからだ。一部で例外を設けるという選択もあるが、それを赤の他人に汲んでもらうのは難しい。それならばきちんと設計されたHTMLの構造のような意味のある単位でルールセットを構築するか、CSSを構造化して管理することを放棄するかの方が良いのではないか。</p>

<p>実際にはこの辺りとOOCSSの間を行ったり来たりしているところだ。</p>

<hr>

<p>なおこのウェブサイトではこの新しい普通のリンクの下線がデフォルトになっていて、いくつかのコンポーネント(例えばグローバル・ヘッダー)などでは下線を消すような仕組みになっている(SCSSでプレースホルダー・セレクターを使って当てる)。そちらはそちらで書き直す必要があったりもする。</p>

<pre><code>%link-underline-removal {
  a {
    text-decoration: none;
  }

  @supports (-moz-text-decoration-color: red) or
    (-webkit-text-decoration-color: red) or
    (text-decoration-color: red) {
    a {
      color: #1188bb;
      -moz-text-decoration-color: initial;
      -webkit-text-decoration-color: initial;
      text-underline-color: initial;
    }
  }
}
</code></pre>

<p>プリフィックス付きの式を含む<code>@supports</code>ルールをもう一回書いたりしていると頭がおかしくなってくる。現実は厳しい。</p>]]></content:encoded>
    </item>

    <item>
      <title>全称セレクターは擬似要素にマッチしない</title>
      <link>http://hail2u.net/blog/webdesign/universal-selector-does-not-match-against-pseudo-elements.html</link>
      <description>Mediumの印刷スタイルシートの記事を読んでいた。印刷スタイルシートについては常に盛り上がりに欠けるような印象だが、Mediumのデザイナーが書くと盛り上がってくれるんじゃないかとちょっと期待している。ついでに少しこのウェブサイトの印刷スタイルシートに手を入れていたところ、どうやら全称セレクターは擬似要素にマッチしないという、あまり関係のないことを今さら学んだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/universal-selector-does-not-match-against-pseudo-elements.html</guid>
      <pubDate>Wed, 18 Feb 2015 13:52:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://medium.com/designing-medium/printing-medium-stories-89f381b903c9">Mediumの印刷スタイルシートの記事</a>を読んでいた。印刷スタイルシートについては常に盛り上がりに欠けるような印象だが、Mediumのデザイナーが書くと盛り上がってくれるんじゃないかとちょっと期待している。ついでに少しこのウェブサイトの印刷スタイルシートに手を入れていたところ、どうやら全称セレクターは擬似要素にマッチしないという、あまり関係のないことを今さら学んだ。</p>

<pre><code>* {
  color: black !important;
}
</code></pre>

<p>このウェブサイトの印刷スタイルシートではこのようにして、強制的に文字を<code>#000000</code>で印刷させるようにしていた。よくよく確認してみると、実際に印刷するまでもなく、印刷プレビューの状態でも一部色がおかしいことに気付いた。おかしい部分は全て擬似要素で挿入した文字列だった。</p>

<p>最初は全称セレクターが詳細度においてもっとも弱いことに由来する問題かと思ったが、この例では<code>!important</code>フラグでも逆転できていないため、詳細度の問題ではないようだ。つまり全称セレクターは擬似要素にはマッチしないということになる。</p>

<p>View Demo: <a href="/pub/test/611.html">Universal Selector and Pseudo Element</a></p>

<p>デモでは擬似要素で挿入した文字列を赤にし、それを全称セレクターと<code>!important</code>フラグを使って上書きしようとしている。しかしうまくいかない。マッチしないでまず間違いないだろう。確認はChrome 40とInternet Explorer 11、Firefox 35で行った。</p>

<hr>

<p>実際にどう対処するべきかというと二通りに分かれると思う。一つは普通に擬似要素の文字色も直してしまう方法だ。</p>

<pre><code>*,
*::before,
*::after {
  color: black !important;
}
</code></pre>

<p>もう一つは擬似要素は印刷しないことにする方法だ。</p>

<pre><code>* {
  color: black !important;
}

*::before,
*::after {
  display: none !important;
}
</code></pre>

<p>擬似要素で挿入する文字列等がクリティカルな要素であるべきではないことを考慮すると、後者の方がより良い印刷結果をもたらしそうではある。その反面、印刷結果でも擬似要素を使って補助的な情報や飾りを挿入したいようなケースに対する柔軟性に欠ける。前者が無難か。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
