<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja-JP"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja-JP</language>
    <copyright>Copyright &#x00a9; 2002-2014, Kyo Nagashima</copyright>
    <managingEditor>kyo@hail2u.net (Kyo Nagashima)</managingEditor>
    <webMaster>kyo@hail2u.net (Kyo Nagashima)</webMaster>
    <lastBuildDate>Wed, 3 Dec 2014 12:49:42 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>2014年の宗旨替え</title>
      <link>http://hail2u.net/blog/webdesign/i-changed-my-mind-in-2014.html</link>
      <description>移り変わりが激しい世界なので、去年まで当たり前のようにやっていたことを、今年はまったくやらなくなったりすることはよくある。僕は遂に諦めてCSSの定義(プロパティーと値のセット)を書く順序をアルファベット順に統一した。去年はシンプルなクラス名からBEMへの変更だった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/i-changed-my-mind-in-2014.html</guid>
      <pubDate>Wed, 03 Dec 2014 12:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>移り変わりが激しい世界なので、去年まで当たり前のようにやっていたことを、今年はまったくやらなくなったりすることはよくある。僕は遂に諦めてCSSの定義(プロパティーと値のセット)を書く順序をアルファベット順に統一した。去年はシンプルなクラス名からBEMへの変更だった。</p>

<p>CSSで定義を書く順序は論理的な理由を持つ順序が良いとは今でも思っている。関連するプロパティーが並んでいれば、そのルールセットがどういう振る舞いをするのかわかりやすいはずだ。そういう意味で<a href="http://hail2u.net/blog/webdesign/css2-property-order.html">CSS 2.1仕様書に出てくる順</a>で書くというのは、仕様書が論理的な構造を持って書かれていることを考えると理にかなっている。</p>

<p>しかし時代は変わった。</p>

<p>CSS 3の時代になり、仕様書はモジュール単位で散在するようになり、実装が出てから安定版に進むようになり、スナップショットは作られなくなった。こうなるとどのような順で書くか仕様書を基準に明確に規定することは難しくなる。CSS 2.1をベースに考えてモジュール化された仕様の位置を決めることはできなくはないが、AnimationなどといったCSS 2.1には欠片も存在しないようなものの位置は決めることができない。</p>

<p>かといって無作為な順番で書くというのは読みづらさを加速する。落とし所としてはアルファベット順がデメリットが少ないという点と賛同を得やすいという点で優れている。そうでなければルールセットごとにひとつの定義しか書かない<a href="https://developers.google.com/speed/articles/optimizing-css">Declaration Just Once</a>アプローチだろうか。</p>

<hr>

<p>Declaration Just Onceアプローチは一度(まだ一度だけ)使ってみた。これはCSSプリプロセッサーと、そしてオブジェクト志向と食合せが非常に悪い。しかしひたすら素のCSSで書くというケースではそこそこうまく行き、保守性が高いことがすこしわかってきた。</p>

<p>CSSファイルでセレクターが散在することが懸念だったが、2006年当時と違ってあるセレクターでの問題はCSSファイルと格闘するわけではない。余程のことがなければ開発者ツールで格闘するので、セレクターがあっちこっちに散らばっていてもほとんど問題になることはなかった。</p>

<p>来年にはうまくいけばCSSプリプロセッサーを捨てることも不可能ではないと感じている。その際にはCSSの定義を書く順序……というかCSSの書き方という単位でまた宗旨変えしそうだ。</p>

<hr>

<p>こういった宗旨替えは誰しも毎年(どころか四半期に一度くらい)何かしらやっていることと思う。みなネタが豊富そうなので、来年は是非アドベント・カレンダーとして作りたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>毛布をかけずに敷く</title>
      <link>http://hail2u.net/blog/misc/laying-out-the-blanket.html</link>
      <description>TwitterのTLで流れてきてた毛布をかけるのではなく敷くのを試してみている。確かに暖かい。熱が上に逃げるから、下に暖かさが維持できるものがあると効率的ということなのかな？ただ断熱性の高い羽毛布団のような掛け布団は必須そう。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/laying-out-the-blanket.html</guid>
      <pubDate>Tue, 02 Dec 2014 13:01:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>TwitterのTLで流れてきてた毛布をかけるのではなく敷くのを試してみている。確かに暖かい。熱が上に逃げるから、下に暖かさが維持できるものがあると効率的ということなのかな？ただ断熱性の高い羽毛布団のような掛け布団は必須そう。</p>

<p>下から:</p>

<ol>
<li>マットレス</li>
<li>ベッドパッド</li>
<li>毛布</li>
<li>ボックスシーツ</li>
<li>タオルケット</li>
<li>掛け布団</li>
</ol>

<p>という形にした。体に直接毛布だと、気軽に洗えない毛布が汚れまくりそうで嫌だったため、ベットパッドとボックスシーツの間にした。冬用の厚手でウール(やアクリル)のシーツとかでも良さそうだけど、洗うの大変なので問題外だと思う。</p>

<p>羽毛布団の良いやつ欲しい。けどiMac (Retineモデル)よりも高い。</p>]]></content:encoded>
    </item>

    <item>
      <title>ギジュツケー・アドベント・カレンダー</title>
      <link>http://hail2u.net/blog/internet/well-prepared-tech-advent-calendar.html</link>
      <description>技術系アドベント・カレンダーもすっかり定着した感じだ。この(多分)独特の(色々)ゆるゆるな感じのものも悪くはないが、もっとしっかりと準備されたものもあった方が良いのではないかと去年くらいから思ってる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/well-prepared-tech-advent-calendar.html</guid>
      <pubDate>Mon, 01 Dec 2014 13:07:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>技術系アドベント・カレンダーもすっかり定着した感じだ。この(多分)独特の(色々)ゆるゆるな感じのものも悪くはないが、もっとしっかりと準備されたものもあった方が良いのではないかと去年くらいから思ってる。</p>

<p>記事の網羅性とメンバー同士での査読期間を確保するためにはかなり余裕を持って始めなければならないかもしれない。</p>

<ul>
<li>7月頭: 募集開始</li>
<li>8月末: メンバー及び原稿内容の決定</li>
<li>9月末: 第一〆切</li>
<li>10月末: 原稿の完成</li>
</ul>

<p>このようなスケジュールで原稿を完成させ、11月にウェブサイトをみんなで作って、12月に順次公開したい。というようなことを考えたこともあったが、みんなそんなにヒマじゃないのでそこそこお金を出してくれるスポンサーでも募集しないと無理そうだ。</p>

<hr>

<p>僕は今年はギジュツケーには書かず、<a href="http://www.adventar.org/calendars/342">TKG</a>と<a href="http://www.adventar.org/calendars/539">床</a>についてゆるゆるで書く予定……だが、書きたい感じがちょっと高まってきた。SassやGruntをいつでも捨てられるようにするためのA-Zみたいなネタがあり、この前とあるプロジェクトで捨てた時に感じたことをまとめたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>タスク・ランナーをnpm run-scriptでラップ</title>
      <link>http://hail2u.net/blog/webdesign/wrapping-task-runner-with-npm-run-script.html</link>
      <description>npm で依存もタスクも一元化するという記事を興味深く読んだ。僕もしばらく前、具体的にはnpm v2出た時からGruntをnpm run-scriptでラップして使っている。概ね良好に機能すると感じている。懸念であった引数で特定の処理を行わせたいようなケースもnpm v2で引数を解釈できるようになったので解決した。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/wrapping-task-runner-with-npm-run-script.html</guid>
      <pubDate>Sun, 30 Nov 2014 11:48:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://qiita.com/Jxck_/items/efaff21b977ddc782971">npm で依存もタスクも一元化する</a>という記事を興味深く読んだ。僕もしばらく前、具体的にはnpm v2出た時からGruntを<a href="https://www.npmjs.org/doc/cli/npm-run-script.html">npm run-script</a>でラップして使っている。概ね良好に機能すると感じている。懸念であった引数で特定の処理を行わせたいようなケースもnpm v2で引数を解釈できるようになったので解決した。</p>

<p>npm run-script経由にすることによる大きなデメリットとしては、そんなに速くもないnpm経由で常にタスクを実行することによる速度の低下が挙げられる。</p>

<p>この速度の低下は、Gruntやgulpの主要な目的であるビルドにおいてはそれほど問題にならない。ビルドにかかる時間に比べると、相対的にその低下の割合は低いものだと考えられるからだ。しかしタスクはそういったものにとどまらず例えばHTML(やMarkdown)のプレビューであったり、Sassのオンデマンド・コンパイルといった小さなタスクもある。その場合は速度低下が占める割合は高くなってしまい、実行時のストレスに繋がる。</p>

<p>もちろんそういった小さなタスクを各開発者が自前で用意している環境に任せるという選択もあり、実際そうする方が良いことが多い。しかしその一方で小さなタスクまでも用意してやることによって、環境一式を開発者間で揃えられるというメリットも捨てがたい。その場合、小さなタスクのコストをできるだけ小さく抑えるための工夫が必要になる。</p>

<p>そうなるとタスク・ランナー経由で実行させるよりも、設定不要な小さなNode.jsスクリプトを作りそれを実行した方が効率的だ。プロジェクトにGruntとgulpを混ぜてnpm run-scriptでラップというのは馬鹿げているが、Gruntと小さなNode.jsスクリプトの組み合わせは悪くはない。そのNode.jsスクリプトが設定不要なことと<code>package.json</code>の<code>script</code>で複雑なコマンドライン・オプションを指定したコマンドを定義しないこと辺りがキモになる。</p>

<pre><code>{
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;grunt build&quot;,
    &quot;deploy&quot;: &quot;grunt deploy&quot;,
    &quot;preview&quot;: &quot;.bin/preview&quot;,
    &quot;sassc&quot;: &quot;.bin/sassc&quot;,
    &quot;start&quot;: &quot;grunt connect&quot;,
    &quot;test&quot;: &quot;grunt test&quot;
  },
  devDependencies: {}
}
</code></pre>

<p>具体的にはこのような形でミックスしている。</p>

<pre><samp>$ <kbd>npm test</kbd>
$ <kbd>npm run deploy</kbd>
$ <kbd>npm run preview -- src/weblog/drafts/example.markdown</kbd>
$ <kbd>npm run sassc -- src/css/style.scss</kbd>
</samp></pre>

<p>実行のインターフェイスは統一され、引数あるなしはあるものの中身には特に左右されない。例えばこの<code>.bin/preview</code> (20行くらい)では引数のファイルの拡張子でどうやってHTMLを作るかを分け、一時ディレクトリーにHTMLファイルを作成し、最後にそれをブラウザーで開くようになっている。また<code>.bin/sassc</code> (10行くらい)はSassのCLIプログラムをプロジェクトにあった形のオプションで実行するだけのラッパー・スクリプトだ。</p>

<p>両者ともに似たような、またはもっと高機能のGruntプラグインやgulpプラグインはいくつも存在する。それらは小回りを犠牲に汎用性を持たせているため、プロジェクト特化型の小さなNode.jsスクリプトと違い、やることに比して大仰過ぎる嫌いがある。まさに牛刀といったところだ。</p>

<p>無理にGruntやgulpに寄せるよりも、タスクの規模と利用ケースを考慮して書き分け、npm run-scriptで統一してやる方が使いやすいものになるはずだ。どうせ使う方は中身を読んだり修正したりはしないので、Node.jsで完結しているならばどんな風に書かれていても大した問題ではない。プロジェクトを構成するファイルが増えることにはなるが、<code>.bin</code>といった見えにくいディレクトリーに放り込んでおけば邪魔扱いされることもないだろう。</p>

<p>僕はGruntやgulpといったタスク・ランナーをいずれ捨てる(新しいタスク・ランナーに変えるではなく、単に捨てる)ことも視野に入れて使っているので、特にこう感じるのかもしれない。</p>

<hr>

<p>他には<code>npm run</code>は微妙に長いことと引数を付ける時に<code>--</code>を挟むのを忘れがちなことというような、使い方において慣れないと厳しいことくらいか。<code>package.json</code>の肥大化が～というような観点もあるが、多くても20行くらい(<code>pre-</code>や<code>post-</code>を駆使した場合でも)なので<code>Gruntfile.js</code>のあっという間に300行と比べると問題にならないだろう。</p>

<p>npm run-scriptでのラップが優れた解であることは疑いないが、その実際の構成にはもう少し色々考えるべきところがありそうだ。もっと様々なユースケースを知りたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>Gruntで実行しているエイリアス・タスクの名前とターゲットの取得</title>
      <link>http://hail2u.net/blog/coding/getting-grunt-alias-task-name-and-target.html</link>
      <description>Gruntのタスク内から今実行されているタスクの名前とターゲットは、それぞれthis.nameとthis.targetで取得できる。しかしエイリアス・タスク経由での実行の場合、その名前やターゲットを簡単に取得する方法は用意されてない。どうやっても拾えないかというとそうでもなく、grunt.cli.tasksにコマンドラインで実際に指定されたタスク群が配列として格納されるので、それから拾えば良い。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/getting-grunt-alias-task-name-and-target.html</guid>
      <pubDate>Sat, 29 Nov 2014 10:16:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Gruntのタスク内から今実行されているタスクの名前とターゲットは、それぞれ<a href="http://gruntjs.com/api/inside-tasks#this.name"><code>this.name</code></a>と<a href="http://gruntjs.com/api/inside-tasks#this.target"><code>this.target</code></a>で取得できる。しかし<a href="http://gruntjs.com/creating-tasks#alias-tasks">エイリアス・タスク</a>経由での実行の場合、その名前やターゲットを簡単に取得する方法は用意されてない。どうやっても拾えないかというとそうでもなく、<code>grunt.cli.tasks</code>にコマンドラインで実際に指定されたタスク群が配列として格納されるので、それから拾えば良い。</p>

<p>例えば以下のようなオプションでGruntを実行し、普通のマルチ・タスクとエイリアス・タスクを複数まとめて実行したとする。</p>

<pre><samp>$ <kbd>grunt multi:foo alias:bar</kbd>
</samp></pre>

<p>この場合<code>grunt.cli.tasks</code>は以下のような配列になる。</p>

<pre><code>[
  &#39;multi:foo&#39;,
  &#39;alias:bar&#39;
];
</code></pre>

<p>この<code>grunt.cli.tasks</code>にはコマンドライン・オプションで指定したタスクがそのままの順序で格納される。そのためエイリアス・タスクの名前やターゲットへアクセスできるというわけだ。</p>

<pre><code>&#39;use strict&#39;;

module.exports = function (grunt) {
  grunt.registerMultiTask(
    &#39;example&#39;,
    &#39;Example task.&#39;,
    function () {
      if (grunt.cli.tasks.some(function (task) {
        return task === &#39;alias:bar&#39;;
      })) {
        // Do task.
      }
    }
  );
</code></pre>

<p>タスク内からはこのようにしてアクセスすることになるだろう。<code>Array.prototype.some()</code>を使って<code>grunt.cli.tasks</code>を調べ、<code>alias:bar</code>経由での実行の時のみ特別扱いしてやる、というわけだ。</p>

<hr>

<p>Gruntの本道としては設定を切り分けて<code>options</code>でフラグを立ててやるべきようなことなので、あまり必要とされることはない。そのためかアクセスする方法が用意されていないのだが、書き捨てるタスクではコード側でガッツリやってやった方が面倒じゃないことも多い。エイリアス・タスクの名前やターゲットと同じような意味を持つ設定を書かなくて済み、コード側で完結できるからだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>twitter:siteプロパティー</title>
      <link>http://hail2u.net/blog/internet/twitter-site-property.html</link>
      <description>TwitterアナリティクスにはTwitterカードの解析が出来る機能があるのだけど、単にウェブサイトにTwitterカードを設置しただけでは解析してくれなかった。どうやれば良いのか全然わからなかったけど、どうやらtwitter:creatorだけでなくtwitter:siteプロパティーも設定してやる必要があるようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/twitter-site-property.html</guid>
      <pubDate>Fri, 28 Nov 2014 08:18:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://analytics.twitter.com/">Twitterアナリティクス</a>には<a href="https://dev.twitter.com/cards/overview">Twitterカード</a>の解析が出来る機能があるのだけど、単にウェブサイトにTwitterカードを設置しただけでは解析してくれなかった。どうやれば良いのか全然わからなかったけど、どうやら<code>twitter:creator</code>だけでなく<code>twitter:site</code>プロパティーも設定してやる必要があるようだ。</p>

<p>必須である<code>twitter:card</code>と<code>twitter:creator</code>プロパティーに加えて<code>twitter:site</code>プロパティーを書くことになる。</p>

<pre><code>&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@hail2unet&quot;&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@hail2u_&quot;&gt;
</code></pre>

<p>このウェブサイトの場合は他のプロパティーはOGPから読んで貰っているので、固定でこれらを追加するだけで良かった。</p>

<figure>
  <img alt="Twitter Cardsの解析が有効になり、水色でツイート数、紺でインプレッション数、オレンジでURLクリック数とそれぞれグラフが描画されるように" src="http://hail2u.net/images/blog/twitter-cards-analytics.png">

  <figcaption>Graph of Twitter Cards Analytics</figcaption>
</figure>

<p>設定後はTwitterカードの解析内容がアカウントと結びつけられるので、TwitterアナリティクスのダッシュボードからTwitterカードを見るとこのようにグラフが描画されるようになった。ゆるやかに上昇しているのはグラフ描画ライブラリのせいで、ツイート数とURLクリック数のグラフがおかしいのはまだデータが足りないせいだろう(変化率なのでデータが貯まれば是正されるはず)。</p>

<p>他、どのようなユーザーがツイートしてくれたか(インフルエンサー)やそれらユーザーが利用しているクライアント名など様々なデータを見ることが可能になる。</p>]]></content:encoded>
    </item>

    <item>
      <title>未満と以上</title>
      <link>http://hail2u.net/blog/webdesign/less-than-and-or-more.html</link>
      <description>8 Facesというタイポグラフィーの雑誌では毎回インタビューが載っている。そのインタビューで触れられた書体をまとめたTypographer’s typefacesという記事ではGeorgiaやVerdanaを始め、Gotham、FF Scala (Sans)と素晴らしい書体が挙げられている。これらの書体が良いものであることはほぼ疑いがないが、その良さには多少の誤解が含まれるのではないかと感じる。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/less-than-and-or-more.html</guid>
      <pubDate>Thu, 27 Nov 2014 07:38:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://www.8faces.com/">8 Faces</a>というタイポグラフィーの雑誌では毎回インタビューが載っている。そのインタビューで触れられた書体をまとめた<a href="http://blog.8faces.com/post/103548341771/typographers-typefaces">Typographer’s typefaces</a>という記事ではGeorgiaやVerdanaを始め、Gotham、FF Scala (Sans)と素晴らしい書体が挙げられている。これらの書体が良いものであることはほぼ疑いがないが、その良さには多少の誤解が含まれるのではないかと感じる。</p>

<p>こういったいわゆるプロフェッショナルに評価が高い書体というものは、全体のクオリティーを引き上げてくれるもの……のように思われるが実際はそうではない。底上げには大いに貢献してくれるが、差し替えたところでその変化はうまく伝わることは少ないだろう。で、あるからこそ軽視されやすいとも言えるし、差し替えるだけで大きく印象が変化する名前を言うことすら憚られるあの書体が濫用されるということでもある。</p>

<p>もう一つは素人以上プロフェッショナル未満の存在だ。多くのウェブ・デザイナー達はここに含まれる。タイポグラフィーについて長い期間系統立てて学んだウェブ・デザイナーは稀だろう。彼らは当該記事で挙げられた書体が底上げのみを行ってくれることは知っているが、実際にどのように底上げしてくれるかは感覚としてしか理解していない。</p>

<p>ウェブ・フォントとCSS 3の拡充は、このプロフェッショナル未満とプロフェッショナルの間に多くの技術が実装されていくこと、されていることを示している。うちいくつかは<a href="http://kennethormandy.com/journal/normalize-opentype-css">Normalize-OpenType.css</a>のようなライブラリーを通して導入できるが、感覚的な理解だけでは効果的な利用には程遠くなる。それはすなわち書体本来の良さを引き出しきれないということになるだろう。</p>

<hr>

<p>僕は8 Facesをまだ1冊しか読んだことはないのだけど、すごく面白かった記憶はある。新号が面白かったら集めたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>ナイン・ストーリーズ</title>
      <link>http://hail2u.net/blog/media/nine-stories.html</link>
      <description>読もうと思ったらなかったのでナイン・ストーリーズを買って読んでた。3回目くらいの新潮文庫版。いつ読んでもすっきりしなくて、難解な小説を読んだ的な満腹感があって楽しい。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/nine-stories.html</guid>
      <pubDate>Wed, 26 Nov 2014 07:06:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/4102057013/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4102057013&amp;linkCode=as2&amp;tag=hail2unet-22"><img src="http://ecx.images-amazon.com/images/I/416EBEXR8PL.jpg" alt="ナイン・ストーリーズ (新潮文庫): サリンジャー, 野崎 孝: 本"></a>
</figure>

<p>読もうと思ったらなかったので<a href="http://www.amazon.co.jp/gp/product/4102057013/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4102057013&amp;linkCode=as2&amp;tag=hail2unet-22">ナイン・ストーリーズ</a>を買って読んでた。3回目くらいの新潮文庫版。いつ読んでもすっきりしなくて、難解な小説を読んだ的な満腹感があって楽しい。</p>

<p>サリンジャーはたまに(3年に一度くらい)読むんだけど、いつも読まなきゃ良かったとか思う。読む度に印象と感想が変わっていくので、そういう意味では面白いし好きなんだけど、どんどん愛せなくなってくる。なので次に読むまで間があく→また印象が変わる→間があくと悪循環している。</p>

<p>これをあと2周くらいすると最初期のハマった心持ちに戻れるような気がしていて、また3年後くらいに読むんじゃないかと思う。</p>

<hr>

<p>そのまま流れでアッシュ・リンクスのお話の方を読んでて、時間がいくらあっても足りない。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSSWringとCSS MQPackerのv2.0.0をリリース</title>
      <link>http://hail2u.net/blog/webdesign/csswring-and-css-mqpacker-v2.0.0.html</link>
      <description>CSSWringとCSS MQPackerをPostCSS v3に更新したものをリリースした。どのバージョンを上げるか迷ったが、メジャー・バージョンアップして気持ち悪いのは自分だけなので、ユーザーに混乱を与えないようにメジャー・バージョンを上げることにした。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/csswring-and-css-mqpacker-v2.0.0.html</guid>
      <pubDate>Tue, 25 Nov 2014 09:12:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/hail2u/node-csswring">CSSWring</a>と<a href="https://github.com/hail2u/node-css-mqpacker">CSS MQPacker</a>をPostCSS v3に更新したものをリリースした。<a href="http://hail2u.net/blog/software/major-update-of-dependencies.html">どのバージョンを上げるか</a>迷ったが、メジャー・バージョンアップして気持ち悪いのは自分だけなので、ユーザーに混乱を与えないようにメジャー・バージョンを上げることにした。</p>

<p>PostCSSにそのまま渡されるオプションのうち<code>map</code>キーのデフォルト値が変わったことが互換性のない変更ということになる。今まで通りソース・マップ・ファイルを外部に吐き、元ソースを含めない場合は以下のように設定してやる必要がある。</p>

<pre><code>var csswring = require(&#39;csswring&#39;);

var result = csswring.wring(css, {
  map: {
    inline: false,
    sourcesContent: false
  },
  from: &#39;from.css&#39;,
  to: &#39;to.css&#39;
});
</code></pre>

<p>つまりインラインにソース・マップを埋め込む<code>inline</code>オプションと、元ソースをソース・マップに含める<code>sourcesContent</code>オプションが<code>false</code>から<code>true</code>に変更になったので、それぞれを無効にしてやる必要があるということだ。単純にインラインで元ソース付きのソース・マップでも構わないのなら、<code>map</code>オプションを<code>true</code>にするだけで良い。</p>

<pre><code>var csswring = require(&#39;csswring&#39;);

var result = csswring.wring(css, {
  map: true
});
</code></pre>

<p>この場合はインラインで全て解決するので、<code>from</code>や<code>to</code>オプションも不要になる。</p>

<hr>

<p>インラインをデフォルトにした理由はちょっと良くわかっていない。インラインの方がパス解決などの点で都合が良いことが多く、開発現場では使いやすいからなのではないかと想像している。今までのように<code>map: true</code>だと出力するCSSが肥大化する(3倍超)ので、開発とリリースそれぞれのビルドにおいてオプションを変えて生成するように気を付ける必要があるだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>ファビコンでData URIは使えるか</title>
      <link>http://hail2u.net/blog/webdesign/data-uri-for-a-favicon.html</link>
      <description>ちょっとした理由があって、外部リソースにまったく依存しないページを作る必要があった。大抵のもののインライン化については知識があったのだけど、ファビコンをData URIでインライン化できるかはよく知らなかったため簡単なテスト・ページを作って調べてみたが、ChromeやFirefoxでは大丈夫なようだった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/data-uri-for-a-favicon.html</guid>
      <pubDate>Mon, 24 Nov 2014 05:53:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ちょっとした理由があって、外部リソースにまったく依存しないページを作る必要があった。大抵のもののインライン化については知識があったのだけど、ファビコンをData URIでインライン化できるかはよく知らなかったため簡単なテスト・ページを作って調べてみたが、ChromeやFirefoxでは大丈夫なようだった。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/602.html">Data URI Favicon</a></p>

<p>単色の緑の四角がファビコンとして表示されれば対応していることになる。表の通り、Chrome 39やFirefox 33では問題なく表示された。対してInternet Explorer 11 (及び12)ではうまく読めなかった。ファビコンの参照は<code>link</code>要素で行うため、読める方が好ましいはずだ。Internet Explorerの実装が行き届いていないと言って良い。</p>

<p>簡単に回避する手段もなさそうなので、ファビコンをインライン化するのは難しいと結論づけた。</p>

<hr>

<p>ファビコンをもインライン化したい理由は、HTTPリクエストを0にすることに加えて同じドメイン配下のページとは違うファビコンにするという要件があったことだった。多くのブラウザーではファビコンが設定されていない場合にルートの<code>favicon.ico</code>を見に行くという仕様になっているので、どうにかして別のファビコンを設定しなければならなかった。この仕様には悩ませられることがままある。もちろん<code>apple-touch-icon.png</code>とかでも。</p>

<p>決め打ちで何かされたりしないストイックなブラウザーが良いな。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
